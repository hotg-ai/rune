{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3","program":"/Users/kthakore/.rustup/toolchains/nightly-x86_64-apple-darwin/bin/rls","arguments":["--crate-name","rand","--edition=2018","/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"alloc\"","--cfg","feature=\"default\"","--cfg","feature=\"getrandom\"","--cfg","feature=\"libc\"","--cfg","feature=\"rand_chacha\"","--cfg","feature=\"rand_hc\"","--cfg","feature=\"std\"","--cfg","feature=\"std_rng\"","-C","metadata=f4ee8d9d44fda7fe","-C","extra-filename=-f4ee8d9d44fda7fe","--out-dir","/Users/kthakore/Documents/HOTG-ai/rune/proc_blocks/ohv_label/target/rls/debug/deps","-L","dependency=/Users/kthakore/Documents/HOTG-ai/rune/proc_blocks/ohv_label/target/rls/debug/deps","--extern","libc=/Users/kthakore/Documents/HOTG-ai/rune/proc_blocks/ohv_label/target/rls/debug/deps/liblibc-ffbf5279cc004e9a.rmeta","--extern","rand_chacha=/Users/kthakore/Documents/HOTG-ai/rune/proc_blocks/ohv_label/target/rls/debug/deps/librand_chacha-d6f3cf7865fc0d50.rmeta","--extern","rand_core=/Users/kthakore/Documents/HOTG-ai/rune/proc_blocks/ohv_label/target/rls/debug/deps/librand_core-a6baccc7a9814181.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/Users/kthakore/.rustup/toolchains/nightly-x86_64-apple-darwin"],"output":"/Users/kthakore/Documents/HOTG-ai/rune/proc_blocks/ohv_label/target/rls/debug/deps/librand-f4ee8d9d44fda7fe.rmeta"},"prelude":{"crate_id":{"name":"rand","disambiguator":[12686041001667635547,10609601828297431694]},"crate_root":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src","external_crates":[{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[6552575213732972370,4857478896615676938]}},{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[9368402477752345001,16510660328274119402]}},{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[11979046517868875526,4248718423519269454]}},{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","num":4,"id":{"name":"std","disambiguator":[11263399830942021807,3354326593337767418]}},{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[5389889921351115945,6106823979989002352]}},{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[18147862036360416397,10602909980673647499]}},{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[17806817554892560348,14725492049942068312]}},{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[764992845537178953,4386711774585810915]}},{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[6726354693825255046,1562708793232137953]}},{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[13802537688027037173,7865830378773675775]}},{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[12634588057184811132,13278508508218871713]}},{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","num":12,"id":{"name":"addr2line","disambiguator":[5580722395240640672,9810153816205700700]}},{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","num":13,"id":{"name":"gimli","disambiguator":[451124501899321987,10206045407480806854]}},{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","num":14,"id":{"name":"object","disambiguator":[4126279991979072403,11569616848169612015]}},{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","num":15,"id":{"name":"panic_unwind","disambiguator":[1864816784851368348,2345431951253805751]}},{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","num":16,"id":{"name":"rand_core","disambiguator":[2437959481818855352,481646472201552655]}},{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","num":17,"id":{"name":"getrandom","disambiguator":[8721581932535453603,3673764355957887413]}},{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","num":18,"id":{"name":"cfg_if","disambiguator":[10645903167683084943,7507394493178449852]}},{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/adapter/reseeding.rs","num":19,"id":{"name":"libc","disambiguator":[8317966286324383199,3113213192325495495]}},{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/std.rs","num":20,"id":{"name":"rand_chacha","disambiguator":[5708531705371582332,7690831724705221174]}},{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/std.rs","num":21,"id":{"name":"ppv_lite86","disambiguator":[8395343582739728967,16935181611998405177]}}],"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":408,"byte_end":6743,"line_start":10,"line_end":215,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":16,"index":145},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":2860,"byte_end":2869,"line_start":95,"line_end":95,"column_start":21,"column_end":30},"alias_span":null,"name":"CryptoRng","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":16,"index":77},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":2871,"byte_end":2876,"line_start":95,"line_end":95,"column_start":32,"column_end":37},"alias_span":null,"name":"Error","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":16,"index":140},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":2878,"byte_end":2885,"line_start":95,"line_end":95,"column_start":39,"column_end":46},"alias_span":null,"name":"RngCore","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":16,"index":146},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":2887,"byte_end":2898,"line_start":95,"line_end":95,"column_start":48,"column_end":59},"alias_span":null,"name":"SeedableRng","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":749},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":11194,"byte_end":11203,"line_start":99,"line_end":99,"column_start":27,"column_end":36},"alias_span":null,"name":"Bernoulli","value":"","parent":{"krate":0,"index":16}},{"kind":"Use","ref_id":{"krate":0,"index":756},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":11205,"byte_end":11219,"line_start":99,"line_end":99,"column_start":38,"column_end":52},"alias_span":null,"name":"BernoulliError","value":"","parent":{"krate":0,"index":16}},{"kind":"Use","ref_id":{"krate":0,"index":1167},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":11244,"byte_end":11250,"line_start":100,"line_end":100,"column_start":23,"column_end":29},"alias_span":null,"name":"Open01","value":"","parent":{"krate":0,"index":16}},{"kind":"Use","ref_id":{"krate":0,"index":1168},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":11244,"byte_end":11250,"line_start":100,"line_end":100,"column_start":23,"column_end":29},"alias_span":null,"name":"Open01","value":"","parent":{"krate":0,"index":23}},{"kind":"Use","ref_id":{"krate":0,"index":1160},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":11252,"byte_end":11264,"line_start":100,"line_end":100,"column_start":31,"column_end":43},"alias_span":null,"name":"OpenClosed01","value":"","parent":{"krate":0,"index":16}},{"kind":"Use","ref_id":{"krate":0,"index":1161},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":11252,"byte_end":11264,"line_start":100,"line_end":100,"column_start":31,"column_end":43},"alias_span":null,"name":"OpenClosed01","value":"","parent":{"krate":0,"index":24}},{"kind":"Use","ref_id":{"krate":0,"index":1236},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":11288,"byte_end":11300,"line_start":101,"line_end":101,"column_start":22,"column_end":34},"alias_span":null,"name":"Alphanumeric","value":"","parent":{"krate":0,"index":16}},{"kind":"Use","ref_id":{"krate":0,"index":1237},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":11288,"byte_end":11300,"line_start":101,"line_end":101,"column_start":22,"column_end":34},"alias_span":null,"name":"Alphanumeric","value":"","parent":{"krate":0,"index":25}},{"kind":"Use","ref_id":{"krate":0,"index":770},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":11340,"byte_end":11347,"line_start":102,"line_end":102,"column_start":39,"column_end":46},"alias_span":null,"name":"Uniform","value":"","parent":{"krate":0,"index":16}},{"kind":"Use","ref_id":{"krate":0,"index":1140},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":11407,"byte_end":11420,"line_start":105,"line_end":105,"column_start":32,"column_end":45},"alias_span":null,"name":"WeightedError","value":"","parent":{"krate":0,"index":16}},{"kind":"Use","ref_id":{"krate":0,"index":1129},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":11422,"byte_end":11435,"line_start":105,"line_end":105,"column_start":47,"column_end":60},"alias_span":null,"name":"WeightedIndex","value":"","parent":{"krate":0,"index":16}},{"kind":"Use","ref_id":{"krate":0,"index":1129},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/weighted.rs","byte_start":90026,"byte_end":90039,"line_start":14,"line_end":14,"column_start":17,"column_end":30},"alias_span":null,"name":"WeightedIndex","value":"","parent":{"krate":0,"index":155}},{"kind":"Use","ref_id":{"krate":0,"index":1140},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/weighted.rs","byte_start":90041,"byte_end":90054,"line_start":14,"line_end":14,"column_start":32,"column_end":45},"alias_span":null,"name":"WeightedError","value":"","parent":{"krate":0,"index":155}},{"kind":"Use","ref_id":{"krate":0,"index":202},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":11859,"byte_end":11868,"line_start":122,"line_end":122,"column_start":27,"column_end":36},"alias_span":null,"name":"IntoFloat","value":"","parent":{"krate":0,"index":206}},{"kind":"Use","ref_id":{"krate":0,"index":310},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/prelude.rs","byte_start":153070,"byte_end":153082,"line_start":21,"line_end":21,"column_start":49,"column_end":61},"alias_span":null,"name":"Distribution","value":"","parent":{"krate":0,"index":333}},{"kind":"Use","ref_id":{"krate":0,"index":1946},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/prelude.rs","byte_start":153230,"byte_end":153236,"line_start":26,"line_end":26,"column_start":40,"column_end":46},"alias_span":null,"name":"StdRng","value":"","parent":{"krate":0,"index":333}},{"kind":"Use","ref_id":{"krate":0,"index":1960},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/prelude.rs","byte_start":153327,"byte_end":153336,"line_start":29,"line_end":29,"column_start":22,"column_end":31},"alias_span":null,"name":"ThreadRng","value":"","parent":{"krate":0,"index":333}},{"kind":"Use","ref_id":{"krate":0,"index":677},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/prelude.rs","byte_start":153377,"byte_end":153391,"line_start":30,"line_end":30,"column_start":40,"column_end":54},"alias_span":null,"name":"IteratorRandom","value":"","parent":{"krate":0,"index":333}},{"kind":"Use","ref_id":{"krate":0,"index":649},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/prelude.rs","byte_start":153393,"byte_end":153404,"line_start":30,"line_end":30,"column_start":56,"column_end":67},"alias_span":null,"name":"SliceRandom","value":"","parent":{"krate":0,"index":333}},{"kind":"Use","ref_id":{"krate":0,"index":747},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/prelude.rs","byte_start":153491,"byte_end":153497,"line_start":33,"line_end":33,"column_start":17,"column_end":23},"alias_span":null,"name":"random","value":"","parent":{"krate":0,"index":333}},{"kind":"Use","ref_id":{"krate":0,"index":527},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/prelude.rs","byte_start":153499,"byte_end":153509,"line_start":33,"line_end":33,"column_start":25,"column_end":35},"alias_span":null,"name":"thread_rng","value":"","parent":{"krate":0,"index":333}},{"kind":"Use","ref_id":{"krate":16,"index":145},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/prelude.rs","byte_start":153546,"byte_end":153555,"line_start":34,"line_end":34,"column_start":35,"column_end":44},"alias_span":null,"name":"CryptoRng","value":"","parent":{"krate":0,"index":333}},{"kind":"Use","ref_id":{"krate":0,"index":363},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/prelude.rs","byte_start":153557,"byte_end":153560,"line_start":34,"line_end":34,"column_start":46,"column_end":49},"alias_span":null,"name":"Rng","value":"","parent":{"krate":0,"index":333}},{"kind":"Use","ref_id":{"krate":16,"index":140},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/prelude.rs","byte_start":153562,"byte_end":153569,"line_start":34,"line_end":34,"column_start":51,"column_end":58},"alias_span":null,"name":"RngCore","value":"","parent":{"krate":0,"index":333}},{"kind":"Use","ref_id":{"krate":16,"index":146},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/prelude.rs","byte_start":153571,"byte_end":153582,"line_start":34,"line_end":34,"column_start":60,"column_end":71},"alias_span":null,"name":"SeedableRng","value":"","parent":{"krate":0,"index":333}},{"kind":"Use","ref_id":{"krate":0,"index":1906},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/adapter/mod.rs","byte_start":178371,"byte_end":178380,"line_start":14,"line_end":14,"column_start":22,"column_end":31},"alias_span":null,"name":"ReadError","value":"","parent":{"krate":0,"index":394}},{"kind":"Use","ref_id":{"krate":0,"index":1900},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/adapter/mod.rs","byte_start":178382,"byte_end":178389,"line_start":14,"line_end":14,"column_start":33,"column_end":40},"alias_span":null,"name":"ReadRng","value":"","parent":{"krate":0,"index":394}},{"kind":"Use","ref_id":{"krate":0,"index":1911},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/adapter/mod.rs","byte_start":178417,"byte_end":178429,"line_start":15,"line_end":15,"column_start":26,"column_end":38},"alias_span":null,"name":"ReseedingRng","value":"","parent":{"krate":0,"index":394}},{"kind":"Use","ref_id":{"krate":0,"index":1946},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":177727,"byte_end":177733,"line_start":115,"line_end":115,"column_start":48,"column_end":54},"alias_span":null,"name":"StdRng","value":"","parent":{"krate":0,"index":393}},{"kind":"Use","ref_id":{"krate":0,"index":1960},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":177807,"byte_end":177816,"line_start":116,"line_end":116,"column_start":73,"column_end":82},"alias_span":null,"name":"ThreadRng","value":"","parent":{"krate":0,"index":393}},{"kind":"Use","ref_id":{"krate":16,"index":204},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":177922,"byte_end":177927,"line_start":119,"line_end":119,"column_start":50,"column_end":55},"alias_span":null,"name":"OsRng","value":"","parent":{"krate":0,"index":393}},{"kind":"Use","ref_id":{"krate":16,"index":205},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":177922,"byte_end":177927,"line_start":119,"line_end":119,"column_start":50,"column_end":55},"alias_span":null,"name":"OsRng","value":"","parent":{"krate":0,"index":539}},{"kind":"Use","ref_id":{"krate":0,"index":527},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":3094,"byte_end":3104,"line_start":106,"line_end":106,"column_start":30,"column_end":40},"alias_span":null,"name":"thread_rng","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":384},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":3120,"byte_end":3124,"line_start":107,"line_end":107,"column_start":15,"column_end":19},"alias_span":null,"name":"Fill","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":363},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":3126,"byte_end":3129,"line_start":107,"line_end":107,"column_start":21,"column_end":24},"alias_span":null,"name":"Rng","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":408,"byte_end":6743,"line_start":10,"line_end":215,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":333},{"krate":0,"index":348},{"krate":0,"index":393},{"krate":0,"index":540},{"krate":0,"index":740},{"krate":0,"index":741},{"krate":0,"index":742},{"krate":0,"index":743},{"krate":0,"index":744},{"krate":0,"index":745},{"krate":0,"index":746},{"krate":0,"index":2320},{"krate":0,"index":747}],"decl_id":null,"docs":" Utilities for random number generation","sig":null,"attributes":[{"value":"/ Utilities for random number generation","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":408,"byte_end":450,"line_start":10,"line_end":10,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":451,"byte_end":454,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ Rand provides utilities to generate random numbers, to convert them to","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":455,"byte_end":529,"line_start":12,"line_end":12,"column_start":1,"column_end":75}},{"value":"/ useful types and distributions, and some randomness-related algorithms.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":530,"byte_end":605,"line_start":13,"line_end":13,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":606,"byte_end":609,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ # Quick Start","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":610,"byte_end":627,"line_start":15,"line_end":15,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":628,"byte_end":631,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ To get you started quickly, the easiest and highest-level way to get","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":632,"byte_end":704,"line_start":17,"line_end":17,"column_start":1,"column_end":73}},{"value":"/ a random value is to use [`random()`]; alternatively you can use","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":705,"byte_end":773,"line_start":18,"line_end":18,"column_start":1,"column_end":69}},{"value":"/ [`thread_rng()`]. The [`Rng`] trait provides a useful API on all RNGs, while","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":774,"byte_end":854,"line_start":19,"line_end":19,"column_start":1,"column_end":81}},{"value":"/ the [`distributions`] and [`seq`] modules provide further","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":855,"byte_end":916,"line_start":20,"line_end":20,"column_start":1,"column_end":62}},{"value":"/ functionality on top of RNGs.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":917,"byte_end":950,"line_start":21,"line_end":21,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":951,"byte_end":954,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":955,"byte_end":962,"line_start":23,"line_end":23,"column_start":1,"column_end":8}},{"value":"/ use rand::prelude::*;","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":963,"byte_end":988,"line_start":24,"line_end":24,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":989,"byte_end":992,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ if rand::random() { // generates a boolean","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":993,"byte_end":1039,"line_start":26,"line_end":26,"column_start":1,"column_end":47}},{"value":"/     // Try printing a random unicode code point (probably a bad idea)!","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":1040,"byte_end":1114,"line_start":27,"line_end":27,"column_start":1,"column_end":75}},{"value":"/     println!(\"char: {}\", rand::random::<char>());","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":1115,"byte_end":1168,"line_start":28,"line_end":28,"column_start":1,"column_end":54}},{"value":"/ }","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":1169,"byte_end":1174,"line_start":29,"line_end":29,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":1175,"byte_end":1178,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ let mut rng = rand::thread_rng();","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":1179,"byte_end":1216,"line_start":31,"line_end":31,"column_start":1,"column_end":38}},{"value":"/ let y: f64 = rng.gen(); // generates a float between 0 and 1","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":1217,"byte_end":1281,"line_start":32,"line_end":32,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":1282,"byte_end":1285,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ let mut nums: Vec<i32> = (1..100).collect();","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":1286,"byte_end":1334,"line_start":34,"line_end":34,"column_start":1,"column_end":49}},{"value":"/ nums.shuffle(&mut rng);","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":1335,"byte_end":1362,"line_start":35,"line_end":35,"column_start":1,"column_end":28}},{"value":"/ ```","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":1363,"byte_end":1370,"line_start":36,"line_end":36,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":1371,"byte_end":1374,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ # The Book","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":1375,"byte_end":1389,"line_start":38,"line_end":38,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":1390,"byte_end":1393,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ For the user guide and further documentation, please read","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":1394,"byte_end":1455,"line_start":40,"line_end":40,"column_start":1,"column_end":62}},{"value":"/ [The Rust Rand Book](https://rust-random.github.io/book).","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":1456,"byte_end":1517,"line_start":41,"line_end":41,"column_start":1,"column_end":62}},{"value":"deny(missing_docs)","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":1733,"byte_end":1755,"line_start":48,"line_end":48,"column_start":1,"column_end":23}},{"value":"deny(missing_debug_implementations)","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":1756,"byte_end":1795,"line_start":49,"line_end":49,"column_start":1,"column_end":40}},{"value":"no_std","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":1857,"byte_end":1867,"line_start":51,"line_end":51,"column_start":1,"column_end":11}},{"value":"allow(clippy :: float_cmp, clippy :: neg_cmp_op_on_partial_ord,)","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":2034,"byte_end":2108,"line_start":55,"line_end":58,"column_start":1,"column_end":3}}]},{"kind":"Mod","id":{"krate":0,"index":16},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"distributions","qualname":"::distributions","value":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","parent":null,"children":[{"krate":0,"index":17},{"krate":0,"index":18},{"krate":0,"index":19},{"krate":0,"index":20},{"krate":0,"index":21},{"krate":0,"index":22},{"krate":0,"index":23},{"krate":0,"index":2032},{"krate":0,"index":24},{"krate":0,"index":2034},{"krate":0,"index":25},{"krate":0,"index":2036},{"krate":0,"index":26},{"krate":0,"index":27},{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":47},{"krate":0,"index":155},{"krate":0,"index":168},{"krate":0,"index":195},{"krate":0,"index":206},{"krate":0,"index":208},{"krate":0,"index":240},{"krate":0,"index":273},{"krate":0,"index":310},{"krate":0,"index":316},{"krate":0,"index":1603},{"krate":0,"index":1610},{"krate":0,"index":322},{"krate":0,"index":329},{"krate":0,"index":1615},{"krate":0,"index":1620},{"krate":0,"index":1619},{"krate":0,"index":1617}],"decl_id":null,"docs":" Generating random samples from probability distributions","sig":null,"attributes":[{"value":"/ Generating random samples from probability distributions","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":7153,"byte_end":7213,"line_start":10,"line_end":10,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":7214,"byte_end":7217,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ This module is the home of the [`Distribution`] trait and several of its","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":7218,"byte_end":7294,"line_start":12,"line_end":12,"column_start":1,"column_end":77}},{"value":"/ implementations. It is the workhorse behind some of the convenient","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":7295,"byte_end":7365,"line_start":13,"line_end":13,"column_start":1,"column_end":71}},{"value":"/ functionality of the [`Rng`] trait, e.g. [`Rng::gen`] and of course","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":7366,"byte_end":7437,"line_start":14,"line_end":14,"column_start":1,"column_end":72}},{"value":"/ [`Rng::sample`].","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":7438,"byte_end":7458,"line_start":15,"line_end":15,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":7459,"byte_end":7462,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ Abstractly, a [probability distribution] describes the probability of","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":7463,"byte_end":7536,"line_start":17,"line_end":17,"column_start":1,"column_end":74}},{"value":"/ occurrence of each value in its sample space.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":7537,"byte_end":7586,"line_start":18,"line_end":18,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":7587,"byte_end":7590,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ More concretely, an implementation of `Distribution<T>` for type `X` is an","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":7591,"byte_end":7669,"line_start":20,"line_end":20,"column_start":1,"column_end":79}},{"value":"/ algorithm for choosing values from the sample space (a subset of `T`)","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":7670,"byte_end":7743,"line_start":21,"line_end":21,"column_start":1,"column_end":74}},{"value":"/ according to the distribution `X` represents, using an external source of","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":7744,"byte_end":7821,"line_start":22,"line_end":22,"column_start":1,"column_end":78}},{"value":"/ randomness (an RNG supplied to the `sample` function).","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":7822,"byte_end":7880,"line_start":23,"line_end":23,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":7881,"byte_end":7884,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ A type `X` may implement `Distribution<T>` for multiple types `T`.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":7885,"byte_end":7955,"line_start":25,"line_end":25,"column_start":1,"column_end":71}},{"value":"/ Any type implementing [`Distribution`] is stateless (i.e. immutable),","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":7956,"byte_end":8029,"line_start":26,"line_end":26,"column_start":1,"column_end":74}},{"value":"/ but it may have internal parameters set at construction time (for example,","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":8030,"byte_end":8108,"line_start":27,"line_end":27,"column_start":1,"column_end":79}},{"value":"/ [`Uniform`] allows specification of its sample space as a range within `T`).","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":8109,"byte_end":8189,"line_start":28,"line_end":28,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":8190,"byte_end":8193,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":8194,"byte_end":8197,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ # The `Standard` distribution","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":8198,"byte_end":8231,"line_start":31,"line_end":31,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":8232,"byte_end":8235,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ The [`Standard`] distribution is important to mention. This is the","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":8236,"byte_end":8306,"line_start":33,"line_end":33,"column_start":1,"column_end":71}},{"value":"/ distribution used by [`Rng::gen`] and represents the \"default\" way to","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":8307,"byte_end":8380,"line_start":34,"line_end":34,"column_start":1,"column_end":74}},{"value":"/ produce a random value for many different types, including most primitive","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":8381,"byte_end":8458,"line_start":35,"line_end":35,"column_start":1,"column_end":78}},{"value":"/ types, tuples, arrays, and a few derived types. See the documentation of","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":8459,"byte_end":8535,"line_start":36,"line_end":36,"column_start":1,"column_end":77}},{"value":"/ [`Standard`] for more details.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":8536,"byte_end":8570,"line_start":37,"line_end":37,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":8571,"byte_end":8574,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ Implementing `Distribution<T>` for [`Standard`] for user types `T` makes it","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":8575,"byte_end":8654,"line_start":39,"line_end":39,"column_start":1,"column_end":80}},{"value":"/ possible to generate type `T` with [`Rng::gen`], and by extension also","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":8655,"byte_end":8729,"line_start":40,"line_end":40,"column_start":1,"column_end":75}},{"value":"/ with the [`random`] function.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":8730,"byte_end":8763,"line_start":41,"line_end":41,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":8764,"byte_end":8767,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ ## Random characters","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":8768,"byte_end":8792,"line_start":43,"line_end":43,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":8793,"byte_end":8796,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ [`Alphanumeric`] is a simple distribution to sample random letters and","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":8797,"byte_end":8871,"line_start":45,"line_end":45,"column_start":1,"column_end":75}},{"value":"/ numbers of the `char` type; in contrast [`Standard`] may sample any valid","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":8872,"byte_end":8949,"line_start":46,"line_end":46,"column_start":1,"column_end":78}},{"value":"/ `char`.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":8950,"byte_end":8961,"line_start":47,"line_end":47,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":8962,"byte_end":8965,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":8966,"byte_end":8969,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ # Uniform numeric ranges","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":8970,"byte_end":8998,"line_start":50,"line_end":50,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":8999,"byte_end":9002,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ The [`Uniform`] distribution is more flexible than [`Standard`], but also","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":9003,"byte_end":9080,"line_start":52,"line_end":52,"column_start":1,"column_end":78}},{"value":"/ more specialised: it supports fewer target types, but allows the sample","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":9081,"byte_end":9156,"line_start":53,"line_end":53,"column_start":1,"column_end":76}},{"value":"/ space to be specified as an arbitrary range within its target type `T`.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":9157,"byte_end":9232,"line_start":54,"line_end":54,"column_start":1,"column_end":76}},{"value":"/ Both [`Standard`] and [`Uniform`] are in some sense uniform distributions.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":9233,"byte_end":9311,"line_start":55,"line_end":55,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":9312,"byte_end":9315,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ Values may be sampled from this distribution using [`Rng::sample(Range)`] or","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":9316,"byte_end":9396,"line_start":57,"line_end":57,"column_start":1,"column_end":81}},{"value":"/ by creating a distribution object with [`Uniform::new`],","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":9397,"byte_end":9457,"line_start":58,"line_end":58,"column_start":1,"column_end":61}},{"value":"/ [`Uniform::new_inclusive`] or `From<Range>`. When the range limits are not","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":9458,"byte_end":9536,"line_start":59,"line_end":59,"column_start":1,"column_end":79}},{"value":"/ known at compile time it is typically faster to reuse an existing","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":9537,"byte_end":9606,"line_start":60,"line_end":60,"column_start":1,"column_end":70}},{"value":"/ `Uniform` object than to call [`Rng::sample(Range)`].","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":9607,"byte_end":9664,"line_start":61,"line_end":61,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":9665,"byte_end":9668,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/ User types `T` may also implement `Distribution<T>` for [`Uniform`],","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":9669,"byte_end":9741,"line_start":63,"line_end":63,"column_start":1,"column_end":73}},{"value":"/ although this is less straightforward than for [`Standard`] (see the","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":9742,"byte_end":9814,"line_start":64,"line_end":64,"column_start":1,"column_end":73}},{"value":"/ documentation in the [`uniform`] module). Doing so enables generation of","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":9815,"byte_end":9891,"line_start":65,"line_end":65,"column_start":1,"column_end":77}},{"value":"/ values of type `T` with  [`Rng::sample(Range)`].","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":9892,"byte_end":9944,"line_start":66,"line_end":66,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":9945,"byte_end":9948,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ ## Open and half-open ranges","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":9949,"byte_end":9981,"line_start":68,"line_end":68,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":9982,"byte_end":9985,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ There are surprisingly many ways to uniformly generate random floats. A","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":9986,"byte_end":10061,"line_start":70,"line_end":70,"column_start":1,"column_end":76}},{"value":"/ range between 0 and 1 is standard, but the exact bounds (open vs closed)","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":10062,"byte_end":10138,"line_start":71,"line_end":71,"column_start":1,"column_end":77}},{"value":"/ and accuracy differ. In addition to the [`Standard`] distribution Rand offers","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":10139,"byte_end":10220,"line_start":72,"line_end":72,"column_start":1,"column_end":82}},{"value":"/ [`Open01`] and [`OpenClosed01`]. See \"Floating point implementation\" section of","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":10221,"byte_end":10304,"line_start":73,"line_end":73,"column_start":1,"column_end":84}},{"value":"/ [`Standard`] documentation for more details.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":10305,"byte_end":10353,"line_start":74,"line_end":74,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":10354,"byte_end":10357,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ # Non-uniform sampling","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":10358,"byte_end":10384,"line_start":76,"line_end":76,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":10385,"byte_end":10388,"line_start":77,"line_end":77,"column_start":1,"column_end":4}},{"value":"/ Sampling a simple true/false outcome with a given probability has a name:","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":10389,"byte_end":10466,"line_start":78,"line_end":78,"column_start":1,"column_end":78}},{"value":"/ the [`Bernoulli`] distribution (this is used by [`Rng::gen_bool`]).","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":10467,"byte_end":10538,"line_start":79,"line_end":79,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":10539,"byte_end":10542,"line_start":80,"line_end":80,"column_start":1,"column_end":4}},{"value":"/ For weighted sampling from a sequence of discrete values, use the","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":10543,"byte_end":10612,"line_start":81,"line_end":81,"column_start":1,"column_end":70}},{"value":"/ [`WeightedIndex`] distribution.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":10613,"byte_end":10648,"line_start":82,"line_end":82,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":10649,"byte_end":10652,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"/ This crate no longer includes other non-uniform distributions; instead","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":10653,"byte_end":10727,"line_start":84,"line_end":84,"column_start":1,"column_end":75}},{"value":"/ it is recommended that you use either [`rand_distr`] or [`statrs`].","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":10728,"byte_end":10799,"line_start":85,"line_end":85,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":10800,"byte_end":10803,"line_start":86,"line_end":86,"column_start":1,"column_end":4}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":10804,"byte_end":10807,"line_start":87,"line_end":87,"column_start":1,"column_end":4}},{"value":"/ [probability distribution]: https://en.wikipedia.org/wiki/Probability_distribution","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":10808,"byte_end":10894,"line_start":88,"line_end":88,"column_start":1,"column_end":87}},{"value":"/ [`rand_distr`]: https://crates.io/crates/rand_distr","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":10895,"byte_end":10950,"line_start":89,"line_end":89,"column_start":1,"column_end":56}},{"value":"/ [`statrs`]: https://crates.io/crates/statrs","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":10951,"byte_end":10998,"line_start":90,"line_end":90,"column_start":1,"column_end":48}},{"value":"/ [`random`]: crate::random","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":11000,"byte_end":11029,"line_start":92,"line_end":92,"column_start":1,"column_end":30}},{"value":"/ [`rand_distr`]: https://crates.io/crates/rand_distr","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":11030,"byte_end":11085,"line_start":93,"line_end":93,"column_start":1,"column_end":56}},{"value":"/ [`statrs`]: https://crates.io/crates/statrs","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":11086,"byte_end":11133,"line_start":94,"line_end":94,"column_start":1,"column_end":48}}]},{"kind":"Struct","id":{"krate":0,"index":749},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/bernoulli.rs","byte_start":21505,"byte_end":21514,"line_start":38,"line_end":38,"column_start":12,"column_end":21},"name":"Bernoulli","qualname":"::distributions::bernoulli::Bernoulli","value":"Bernoulli {  }","parent":null,"children":[{"krate":0,"index":750}],"decl_id":null,"docs":" The Bernoulli distribution.","sig":null,"attributes":[{"value":"/ The Bernoulli distribution.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/bernoulli.rs","byte_start":20863,"byte_end":20894,"line_start":17,"line_end":17,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/bernoulli.rs","byte_start":20895,"byte_end":20898,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ This is a special case of the Binomial distribution where `n = 1`.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/bernoulli.rs","byte_start":20899,"byte_end":20969,"line_start":19,"line_end":19,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/bernoulli.rs","byte_start":20970,"byte_end":20973,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/bernoulli.rs","byte_start":20974,"byte_end":20987,"line_start":21,"line_end":21,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/bernoulli.rs","byte_start":20988,"byte_end":20991,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/bernoulli.rs","byte_start":20992,"byte_end":21003,"line_start":23,"line_end":23,"column_start":1,"column_end":12}},{"value":"/ use rand::distributions::{Bernoulli, Distribution};","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/bernoulli.rs","byte_start":21004,"byte_end":21059,"line_start":24,"line_end":24,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/bernoulli.rs","byte_start":21060,"byte_end":21063,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ let d = Bernoulli::new(0.3).unwrap();","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/bernoulli.rs","byte_start":21064,"byte_end":21105,"line_start":26,"line_end":26,"column_start":1,"column_end":42}},{"value":"/ let v = d.sample(&mut rand::thread_rng());","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/bernoulli.rs","byte_start":21106,"byte_end":21152,"line_start":27,"line_end":27,"column_start":1,"column_end":47}},{"value":"/ println!(\"{} is from a Bernoulli distribution\", v);","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/bernoulli.rs","byte_start":21153,"byte_end":21208,"line_start":28,"line_end":28,"column_start":1,"column_end":56}},{"value":"/ ```","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/bernoulli.rs","byte_start":21209,"byte_end":21216,"line_start":29,"line_end":29,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/bernoulli.rs","byte_start":21217,"byte_end":21220,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ # Precision","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/bernoulli.rs","byte_start":21221,"byte_end":21236,"line_start":31,"line_end":31,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/bernoulli.rs","byte_start":21237,"byte_end":21240,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ This `Bernoulli` distribution uses 64 bits from the RNG (a `u64`),","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/bernoulli.rs","byte_start":21241,"byte_end":21311,"line_start":33,"line_end":33,"column_start":1,"column_end":71}},{"value":"/ so only probabilities that are multiples of 2<sup>-64</sup> can be","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/bernoulli.rs","byte_start":21312,"byte_end":21382,"line_start":34,"line_end":34,"column_start":1,"column_end":71}},{"value":"/ represented.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/bernoulli.rs","byte_start":21383,"byte_end":21399,"line_start":35,"line_end":35,"column_start":1,"column_end":17}}]},{"kind":"TupleVariant","id":{"krate":0,"index":757},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/bernoulli.rs","byte_start":22979,"byte_end":22997,"line_start":72,"line_end":72,"column_start":5,"column_end":23},"name":"InvalidProbability","qualname":"::distributions::bernoulli::BernoulliError::InvalidProbability","value":"BernoulliError::InvalidProbability","parent":{"krate":0,"index":756},"children":[],"decl_id":null,"docs":" `p < 0` or `p > 1`.\n","sig":null,"attributes":[{"value":"/ `p < 0` or `p > 1`.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/bernoulli.rs","byte_start":22951,"byte_end":22974,"line_start":71,"line_end":71,"column_start":5,"column_end":28}}]},{"kind":"Enum","id":{"krate":0,"index":756},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/bernoulli.rs","byte_start":22930,"byte_end":22944,"line_start":70,"line_end":70,"column_start":10,"column_end":24},"name":"BernoulliError","qualname":"::distributions::bernoulli::BernoulliError","value":"pub enum BernoulliError {\n\n    /// `p < 0` or `p > 1`.\n    InvalidProbability,\n}","parent":null,"children":[{"krate":0,"index":757}],"decl_id":null,"docs":" Error type returned from `Bernoulli::new`.\n","sig":null,"attributes":[{"value":"/ Error type returned from `Bernoulli::new`.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/bernoulli.rs","byte_start":22829,"byte_end":22875,"line_start":68,"line_end":68,"column_start":1,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":42},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/bernoulli.rs","byte_start":23868,"byte_end":23871,"line_start":98,"line_end":98,"column_start":12,"column_end":15},"name":"new","qualname":"<Bernoulli>::new","value":"pub fn new(f64) -> Result<Bernoulli, BernoulliError>","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `Bernoulli` with the given probability of success `p`.","sig":null,"attributes":[{"value":"/ Construct a new `Bernoulli` with the given probability of success `p`.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/bernoulli.rs","byte_start":23349,"byte_end":23423,"line_start":87,"line_end":87,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/bernoulli.rs","byte_start":23428,"byte_end":23431,"line_start":88,"line_end":88,"column_start":5,"column_end":8}},{"value":"/ # Precision","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/bernoulli.rs","byte_start":23436,"byte_end":23451,"line_start":89,"line_end":89,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/bernoulli.rs","byte_start":23456,"byte_end":23459,"line_start":90,"line_end":90,"column_start":5,"column_end":8}},{"value":"/ For `p = 1.0`, the resulting distribution will always generate true.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/bernoulli.rs","byte_start":23464,"byte_end":23536,"line_start":91,"line_end":91,"column_start":5,"column_end":77}},{"value":"/ For `p = 0.0`, the resulting distribution will always generate false.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/bernoulli.rs","byte_start":23541,"byte_end":23614,"line_start":92,"line_end":92,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/bernoulli.rs","byte_start":23619,"byte_end":23622,"line_start":93,"line_end":93,"column_start":5,"column_end":8}},{"value":"/ This method is accurate for any input `p` in the range `[0, 1]` which is","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/bernoulli.rs","byte_start":23627,"byte_end":23703,"line_start":94,"line_end":94,"column_start":5,"column_end":81}},{"value":"/ a multiple of 2<sup>-64</sup>. (Note that not all multiples of","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/bernoulli.rs","byte_start":23708,"byte_end":23774,"line_start":95,"line_end":95,"column_start":5,"column_end":71}},{"value":"/ 2<sup>-64</sup> in `[0, 1]` can be represented as a `f64`.)","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/bernoulli.rs","byte_start":23779,"byte_end":23842,"line_start":96,"line_end":96,"column_start":5,"column_end":68}},{"value":"inline","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/bernoulli.rs","byte_start":23847,"byte_end":23856,"line_start":97,"line_end":97,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":43},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/bernoulli.rs","byte_start":24752,"byte_end":24762,"line_start":119,"line_end":119,"column_start":12,"column_end":22},"name":"from_ratio","qualname":"<Bernoulli>::from_ratio","value":"pub fn from_ratio(u32, u32) -> Result<Bernoulli, BernoulliError>","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `Bernoulli` with the probability of success of\n `numerator`-in-`denominator`. I.e. `new_ratio(2, 3)` will return\n a `Bernoulli` with a 2-in-3 chance, or about 67%, of returning `true`.","sig":null,"attributes":[{"value":"/ Construct a new `Bernoulli` with the probability of success of","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/bernoulli.rs","byte_start":24210,"byte_end":24276,"line_start":110,"line_end":110,"column_start":5,"column_end":71}},{"value":"/ `numerator`-in-`denominator`. I.e. `new_ratio(2, 3)` will return","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/bernoulli.rs","byte_start":24281,"byte_end":24349,"line_start":111,"line_end":111,"column_start":5,"column_end":73}},{"value":"/ a `Bernoulli` with a 2-in-3 chance, or about 67%, of returning `true`.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/bernoulli.rs","byte_start":24354,"byte_end":24428,"line_start":112,"line_end":112,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/bernoulli.rs","byte_start":24433,"byte_end":24436,"line_start":113,"line_end":113,"column_start":5,"column_end":8}},{"value":"/ return `true`. If `numerator == 0` it will always return `false`.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/bernoulli.rs","byte_start":24441,"byte_end":24510,"line_start":114,"line_end":114,"column_start":5,"column_end":74}},{"value":"/ For `numerator > denominator` and `denominator == 0`, this returns an","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/bernoulli.rs","byte_start":24515,"byte_end":24588,"line_start":115,"line_end":115,"column_start":5,"column_end":78}},{"value":"/ error. Otherwise, for `numerator == denominator`, samples are always","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/bernoulli.rs","byte_start":24593,"byte_end":24665,"line_start":116,"line_end":116,"column_start":5,"column_end":77}},{"value":"/ true; for `numerator == 0` samples are always false.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/bernoulli.rs","byte_start":24670,"byte_end":24726,"line_start":117,"line_end":117,"column_start":5,"column_end":61}},{"value":"inline","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/bernoulli.rs","byte_start":24731,"byte_end":24740,"line_start":118,"line_end":118,"column_start":5,"column_end":14}}]},{"kind":"Mod","id":{"krate":0,"index":47},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"uniform","qualname":"::distributions::uniform","value":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","parent":null,"children":[{"krate":0,"index":48},{"krate":0,"index":49},{"krate":0,"index":50},{"krate":0,"index":51},{"krate":0,"index":52},{"krate":0,"index":53},{"krate":0,"index":54},{"krate":0,"index":55},{"krate":0,"index":56},{"krate":0,"index":57},{"krate":0,"index":58},{"krate":0,"index":59},{"krate":0,"index":60},{"krate":0,"index":61},{"krate":0,"index":770},{"krate":0,"index":779},{"krate":0,"index":777},{"krate":0,"index":774},{"krate":0,"index":62},{"krate":0,"index":70},{"krate":0,"index":74},{"krate":0,"index":76},{"krate":0,"index":94},{"krate":0,"index":97},{"krate":0,"index":100},{"krate":0,"index":103},{"krate":0,"index":106},{"krate":0,"index":110},{"krate":0,"index":115},{"krate":0,"index":120},{"krate":0,"index":782},{"krate":0,"index":792},{"krate":0,"index":790},{"krate":0,"index":787},{"krate":0,"index":795},{"krate":0,"index":797},{"krate":0,"index":815},{"krate":0,"index":817},{"krate":0,"index":835},{"krate":0,"index":837},{"krate":0,"index":855},{"krate":0,"index":857},{"krate":0,"index":875},{"krate":0,"index":877},{"krate":0,"index":895},{"krate":0,"index":897},{"krate":0,"index":915},{"krate":0,"index":917},{"krate":0,"index":935},{"krate":0,"index":937},{"krate":0,"index":955},{"krate":0,"index":957},{"krate":0,"index":975},{"krate":0,"index":977},{"krate":0,"index":995},{"krate":0,"index":997},{"krate":0,"index":1015},{"krate":0,"index":1017},{"krate":0,"index":126},{"krate":0,"index":1035},{"krate":0,"index":1040},{"krate":0,"index":1039},{"krate":0,"index":1037},{"krate":0,"index":128},{"krate":0,"index":129},{"krate":0,"index":130},{"krate":0,"index":131},{"krate":0,"index":1042},{"krate":0,"index":1051},{"krate":0,"index":1049},{"krate":0,"index":1046},{"krate":0,"index":1054},{"krate":0,"index":1056},{"krate":0,"index":1070},{"krate":0,"index":1072},{"krate":0,"index":1086},{"krate":0,"index":1092},{"krate":0,"index":1091},{"krate":0,"index":1089},{"krate":0,"index":1094},{"krate":0,"index":1107},{"krate":0,"index":1106},{"krate":0,"index":1104},{"krate":0,"index":142},{"krate":0,"index":144}],"decl_id":null,"docs":" A distribution uniformly sampling numbers within a given range.","sig":null,"attributes":[{"value":"/ A distribution uniformly sampling numbers within a given range.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":28068,"byte_end":28135,"line_start":10,"line_end":10,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":28136,"byte_end":28139,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ [`Uniform`] is the standard distribution to sample uniformly from a range;","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":28140,"byte_end":28218,"line_start":12,"line_end":12,"column_start":1,"column_end":79}},{"value":"/ e.g. `Uniform::new_inclusive(1, 6)` can sample integers from 1 to 6, like a","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":28219,"byte_end":28298,"line_start":13,"line_end":13,"column_start":1,"column_end":80}},{"value":"/ standard die. [`Rng::gen_range`] supports any type supported by","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":28299,"byte_end":28366,"line_start":14,"line_end":14,"column_start":1,"column_end":68}},{"value":"/ [`Uniform`].","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":28367,"byte_end":28383,"line_start":15,"line_end":15,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":28384,"byte_end":28387,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ This distribution is provided with support for several primitive types","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":28388,"byte_end":28462,"line_start":17,"line_end":17,"column_start":1,"column_end":75}},{"value":"/ (all integer and floating-point types) as well as [`std::time::Duration`],","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":28463,"byte_end":28541,"line_start":18,"line_end":18,"column_start":1,"column_end":79}},{"value":"/ and supports extension to user-defined types via a type-specific *back-end*","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":28542,"byte_end":28621,"line_start":19,"line_end":19,"column_start":1,"column_end":80}},{"value":"/ implementation.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":28622,"byte_end":28641,"line_start":20,"line_end":20,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":28642,"byte_end":28645,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ The types [`UniformInt`], [`UniformFloat`] and [`UniformDuration`] are the","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":28646,"byte_end":28724,"line_start":22,"line_end":22,"column_start":1,"column_end":79}},{"value":"/ back-ends supporting sampling from primitive integer and floating-point","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":28725,"byte_end":28800,"line_start":23,"line_end":23,"column_start":1,"column_end":76}},{"value":"/ ranges as well as from [`std::time::Duration`]; these types do not normally","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":28801,"byte_end":28880,"line_start":24,"line_end":24,"column_start":1,"column_end":80}},{"value":"/ need to be used directly (unless implementing a derived back-end).","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":28881,"byte_end":28951,"line_start":25,"line_end":25,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":28952,"byte_end":28955,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ # Example usage","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":28956,"byte_end":28975,"line_start":27,"line_end":27,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":28976,"byte_end":28979,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":28980,"byte_end":28987,"line_start":29,"line_end":29,"column_start":1,"column_end":8}},{"value":"/ use rand::{Rng, thread_rng};","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":28988,"byte_end":29020,"line_start":30,"line_end":30,"column_start":1,"column_end":33}},{"value":"/ use rand::distributions::Uniform;","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":29021,"byte_end":29058,"line_start":31,"line_end":31,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":29059,"byte_end":29062,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":29063,"byte_end":29094,"line_start":33,"line_end":33,"column_start":1,"column_end":32}},{"value":"/ let side = Uniform::new(-10.0, 10.0);","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":29095,"byte_end":29136,"line_start":34,"line_end":34,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":29137,"byte_end":29140,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ // sample between 1 and 10 points","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":29141,"byte_end":29178,"line_start":36,"line_end":36,"column_start":1,"column_end":38}},{"value":"/ for _ in 0..rng.gen_range(1..=10) {","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":29179,"byte_end":29218,"line_start":37,"line_end":37,"column_start":1,"column_end":40}},{"value":"/     // sample a point from the square with sides -10 - 10 in two dimensions","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":29219,"byte_end":29298,"line_start":38,"line_end":38,"column_start":1,"column_end":80}},{"value":"/     let (x, y) = (rng.sample(side), rng.sample(side));","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":29299,"byte_end":29357,"line_start":39,"line_end":39,"column_start":1,"column_end":59}},{"value":"/     println!(\"Point: {}, {}\", x, y);","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":29358,"byte_end":29398,"line_start":40,"line_end":40,"column_start":1,"column_end":41}},{"value":"/ }","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":29399,"byte_end":29404,"line_start":41,"line_end":41,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":29405,"byte_end":29412,"line_start":42,"line_end":42,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":29413,"byte_end":29416,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ # Extending `Uniform` to support a custom type","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":29417,"byte_end":29467,"line_start":44,"line_end":44,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":29468,"byte_end":29471,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ To extend [`Uniform`] to support your own types, write a back-end which","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":29472,"byte_end":29547,"line_start":46,"line_end":46,"column_start":1,"column_end":76}},{"value":"/ implements the [`UniformSampler`] trait, then implement the [`SampleUniform`]","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":29548,"byte_end":29629,"line_start":47,"line_end":47,"column_start":1,"column_end":82}},{"value":"/ helper trait to \"register\" your back-end. See the `MyF32` example below.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":29630,"byte_end":29706,"line_start":48,"line_end":48,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":29707,"byte_end":29710,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ At a minimum, the back-end needs to store any parameters needed for sampling","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":29711,"byte_end":29791,"line_start":50,"line_end":50,"column_start":1,"column_end":81}},{"value":"/ (e.g. the target range) and implement `new`, `new_inclusive` and `sample`.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":29792,"byte_end":29870,"line_start":51,"line_end":51,"column_start":1,"column_end":79}},{"value":"/ Those methods should include an assert to check the range is valid (i.e.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":29871,"byte_end":29947,"line_start":52,"line_end":52,"column_start":1,"column_end":77}},{"value":"/ `low < high`). The example below merely wraps another back-end.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":29948,"byte_end":30015,"line_start":53,"line_end":53,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":30016,"byte_end":30019,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ The `new`, `new_inclusive` and `sample_single` functions use arguments of","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":30020,"byte_end":30097,"line_start":55,"line_end":55,"column_start":1,"column_end":78}},{"value":"/ type SampleBorrow<X> in order to support passing in values by reference or","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":30098,"byte_end":30176,"line_start":56,"line_end":56,"column_start":1,"column_end":79}},{"value":"/ by value. In the implementation of these functions, you can choose to","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":30177,"byte_end":30250,"line_start":57,"line_end":57,"column_start":1,"column_end":74}},{"value":"/ simply use the reference returned by [`SampleBorrow::borrow`], or you can choose","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":30251,"byte_end":30335,"line_start":58,"line_end":58,"column_start":1,"column_end":85}},{"value":"/ to copy or clone the value, whatever is appropriate for your type.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":30336,"byte_end":30406,"line_start":59,"line_end":59,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":30407,"byte_end":30410,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":30411,"byte_end":30418,"line_start":61,"line_end":61,"column_start":1,"column_end":8}},{"value":"/ use rand::prelude::*;","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":30419,"byte_end":30444,"line_start":62,"line_end":62,"column_start":1,"column_end":26}},{"value":"/ use rand::distributions::uniform::{Uniform, SampleUniform,","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":30445,"byte_end":30507,"line_start":63,"line_end":63,"column_start":1,"column_end":63}},{"value":"/         UniformSampler, UniformFloat, SampleBorrow};","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":30508,"byte_end":30564,"line_start":64,"line_end":64,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":30565,"byte_end":30568,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/ struct MyF32(f32);","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":30569,"byte_end":30591,"line_start":66,"line_end":66,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":30592,"byte_end":30595,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ #[derive(Clone, Copy, Debug)]","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":30596,"byte_end":30629,"line_start":68,"line_end":68,"column_start":1,"column_end":34}},{"value":"/ struct UniformMyF32(UniformFloat<f32>);","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":30630,"byte_end":30673,"line_start":69,"line_end":69,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":30674,"byte_end":30677,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ impl UniformSampler for UniformMyF32 {","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":30678,"byte_end":30720,"line_start":71,"line_end":71,"column_start":1,"column_end":43}},{"value":"/     type X = MyF32;","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":30721,"byte_end":30744,"line_start":72,"line_end":72,"column_start":1,"column_end":24}},{"value":"/     fn new<B1, B2>(low: B1, high: B2) -> Self","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":30745,"byte_end":30794,"line_start":73,"line_end":73,"column_start":1,"column_end":50}},{"value":"/         where B1: SampleBorrow<Self::X> + Sized,","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":30795,"byte_end":30847,"line_start":74,"line_end":74,"column_start":1,"column_end":53}},{"value":"/               B2: SampleBorrow<Self::X> + Sized","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":30848,"byte_end":30899,"line_start":75,"line_end":75,"column_start":1,"column_end":52}},{"value":"/     {","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":30900,"byte_end":30909,"line_start":76,"line_end":76,"column_start":1,"column_end":10}},{"value":"/         UniformMyF32(UniformFloat::<f32>::new(low.borrow().0, high.borrow().0))","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":30910,"byte_end":30993,"line_start":77,"line_end":77,"column_start":1,"column_end":84}},{"value":"/     }","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":30994,"byte_end":31003,"line_start":78,"line_end":78,"column_start":1,"column_end":10}},{"value":"/     fn new_inclusive<B1, B2>(low: B1, high: B2) -> Self","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":31004,"byte_end":31063,"line_start":79,"line_end":79,"column_start":1,"column_end":60}},{"value":"/         where B1: SampleBorrow<Self::X> + Sized,","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":31064,"byte_end":31116,"line_start":80,"line_end":80,"column_start":1,"column_end":53}},{"value":"/               B2: SampleBorrow<Self::X> + Sized","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":31117,"byte_end":31168,"line_start":81,"line_end":81,"column_start":1,"column_end":52}},{"value":"/     {","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":31169,"byte_end":31178,"line_start":82,"line_end":82,"column_start":1,"column_end":10}},{"value":"/         UniformSampler::new(low, high)","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":31179,"byte_end":31221,"line_start":83,"line_end":83,"column_start":1,"column_end":43}},{"value":"/     }","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":31222,"byte_end":31231,"line_start":84,"line_end":84,"column_start":1,"column_end":10}},{"value":"/     fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> Self::X {","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":31232,"byte_end":31299,"line_start":85,"line_end":85,"column_start":1,"column_end":68}},{"value":"/         MyF32(self.0.sample(rng))","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":31300,"byte_end":31337,"line_start":86,"line_end":86,"column_start":1,"column_end":38}},{"value":"/     }","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":31338,"byte_end":31347,"line_start":87,"line_end":87,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":31348,"byte_end":31353,"line_start":88,"line_end":88,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":31354,"byte_end":31357,"line_start":89,"line_end":89,"column_start":1,"column_end":4}},{"value":"/ impl SampleUniform for MyF32 {","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":31358,"byte_end":31392,"line_start":90,"line_end":90,"column_start":1,"column_end":35}},{"value":"/     type Sampler = UniformMyF32;","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":31393,"byte_end":31429,"line_start":91,"line_end":91,"column_start":1,"column_end":37}},{"value":"/ }","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":31430,"byte_end":31435,"line_start":92,"line_end":92,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":31436,"byte_end":31439,"line_start":93,"line_end":93,"column_start":1,"column_end":4}},{"value":"/ let (low, high) = (MyF32(17.0f32), MyF32(22.0f32));","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":31440,"byte_end":31495,"line_start":94,"line_end":94,"column_start":1,"column_end":56}},{"value":"/ let uniform = Uniform::new(low, high);","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":31496,"byte_end":31538,"line_start":95,"line_end":95,"column_start":1,"column_end":43}},{"value":"/ let x = uniform.sample(&mut thread_rng());","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":31539,"byte_end":31585,"line_start":96,"line_end":96,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":31586,"byte_end":31593,"line_start":97,"line_end":97,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":31594,"byte_end":31597,"line_start":98,"line_end":98,"column_start":1,"column_end":4}},{"value":"/ [`SampleUniform`]: crate::distributions::uniform::SampleUniform","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":31598,"byte_end":31665,"line_start":99,"line_end":99,"column_start":1,"column_end":68}},{"value":"/ [`UniformSampler`]: crate::distributions::uniform::UniformSampler","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":31666,"byte_end":31735,"line_start":100,"line_end":100,"column_start":1,"column_end":70}},{"value":"/ [`UniformInt`]: crate::distributions::uniform::UniformInt","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":31736,"byte_end":31797,"line_start":101,"line_end":101,"column_start":1,"column_end":62}},{"value":"/ [`UniformFloat`]: crate::distributions::uniform::UniformFloat","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":31798,"byte_end":31863,"line_start":102,"line_end":102,"column_start":1,"column_end":66}},{"value":"/ [`UniformDuration`]: crate::distributions::uniform::UniformDuration","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":31864,"byte_end":31935,"line_start":103,"line_end":103,"column_start":1,"column_end":72}},{"value":"/ [`SampleBorrow::borrow`]: crate::distributions::uniform::SampleBorrow::borrow","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":31936,"byte_end":32017,"line_start":104,"line_end":104,"column_start":1,"column_end":82}}]},{"kind":"Struct","id":{"krate":0,"index":770},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":34617,"byte_end":34624,"line_start":175,"line_end":175,"column_start":12,"column_end":19},"name":"Uniform","qualname":"::distributions::uniform::Uniform","value":"","parent":null,"children":[],"decl_id":null,"docs":" Sample values uniformly between two bounds.","sig":null,"attributes":[{"value":"/ Sample values uniformly between two bounds.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":32635,"byte_end":32682,"line_start":124,"line_end":124,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":32683,"byte_end":32686,"line_start":125,"line_end":125,"column_start":1,"column_end":4}},{"value":"/ [`Uniform::new`] and [`Uniform::new_inclusive`] construct a uniform","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":32687,"byte_end":32758,"line_start":126,"line_end":126,"column_start":1,"column_end":72}},{"value":"/ distribution sampling from the given range; these functions may do extra","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":32759,"byte_end":32835,"line_start":127,"line_end":127,"column_start":1,"column_end":77}},{"value":"/ work up front to make sampling of multiple values faster. If only one sample","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":32836,"byte_end":32916,"line_start":128,"line_end":128,"column_start":1,"column_end":81}},{"value":"/ from the range is required, [`Rng::gen_range`] can be more efficient.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":32917,"byte_end":32990,"line_start":129,"line_end":129,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":32991,"byte_end":32994,"line_start":130,"line_end":130,"column_start":1,"column_end":4}},{"value":"/ When sampling from a constant range, many calculations can happen at","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":32995,"byte_end":33067,"line_start":131,"line_end":131,"column_start":1,"column_end":73}},{"value":"/ compile-time and all methods should be fast; for floating-point ranges and","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":33068,"byte_end":33146,"line_start":132,"line_end":132,"column_start":1,"column_end":79}},{"value":"/ the full range of integer types this should have comparable performance to","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":33147,"byte_end":33225,"line_start":133,"line_end":133,"column_start":1,"column_end":79}},{"value":"/ the `Standard` distribution.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":33226,"byte_end":33258,"line_start":134,"line_end":134,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":33259,"byte_end":33262,"line_start":135,"line_end":135,"column_start":1,"column_end":4}},{"value":"/ Steps are taken to avoid bias which might be present in naive","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":33263,"byte_end":33328,"line_start":136,"line_end":136,"column_start":1,"column_end":66}},{"value":"/ implementations; for example `rng.gen::<u8>() % 170` samples from the range","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":33329,"byte_end":33408,"line_start":137,"line_end":137,"column_start":1,"column_end":80}},{"value":"/ `[0, 169]` but is twice as likely to select numbers less than 85 than other","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":33409,"byte_end":33488,"line_start":138,"line_end":138,"column_start":1,"column_end":80}},{"value":"/ values. Further, the implementations here give more weight to the high-bits","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":33489,"byte_end":33568,"line_start":139,"line_end":139,"column_start":1,"column_end":80}},{"value":"/ generated by the RNG than the low bits, since with some RNGs the low-bits","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":33569,"byte_end":33646,"line_start":140,"line_end":140,"column_start":1,"column_end":78}},{"value":"/ are of lower quality than the high bits.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":33647,"byte_end":33691,"line_start":141,"line_end":141,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":33692,"byte_end":33695,"line_start":142,"line_end":142,"column_start":1,"column_end":4}},{"value":"/ Implementations must sample in `[low, high)` range for","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":33696,"byte_end":33754,"line_start":143,"line_end":143,"column_start":1,"column_end":59}},{"value":"/ `Uniform::new(low, high)`, i.e., excluding `high`. In particular, care must","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":33755,"byte_end":33834,"line_start":144,"line_end":144,"column_start":1,"column_end":80}},{"value":"/ be taken to ensure that rounding never results values `< low` or `>= high`.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":33835,"byte_end":33914,"line_start":145,"line_end":145,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":33915,"byte_end":33918,"line_start":146,"line_end":146,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":33919,"byte_end":33932,"line_start":147,"line_end":147,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":33933,"byte_end":33936,"line_start":148,"line_end":148,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":33937,"byte_end":33944,"line_start":149,"line_end":149,"column_start":1,"column_end":8}},{"value":"/ use rand::distributions::{Distribution, Uniform};","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":33945,"byte_end":33998,"line_start":150,"line_end":150,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":33999,"byte_end":34002,"line_start":151,"line_end":151,"column_start":1,"column_end":4}},{"value":"/ let between = Uniform::from(10..10000);","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":34003,"byte_end":34046,"line_start":152,"line_end":152,"column_start":1,"column_end":44}},{"value":"/ let mut rng = rand::thread_rng();","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":34047,"byte_end":34084,"line_start":153,"line_end":153,"column_start":1,"column_end":38}},{"value":"/ let mut sum = 0;","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":34085,"byte_end":34105,"line_start":154,"line_end":154,"column_start":1,"column_end":21}},{"value":"/ for _ in 0..1000 {","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":34106,"byte_end":34128,"line_start":155,"line_end":155,"column_start":1,"column_end":23}},{"value":"/     sum += between.sample(&mut rng);","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":34129,"byte_end":34169,"line_start":156,"line_end":156,"column_start":1,"column_end":41}},{"value":"/ }","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":34170,"byte_end":34175,"line_start":157,"line_end":157,"column_start":1,"column_end":6}},{"value":"/ println!(\"{}\", sum);","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":34176,"byte_end":34200,"line_start":158,"line_end":158,"column_start":1,"column_end":25}},{"value":"/ ```","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":34201,"byte_end":34208,"line_start":159,"line_end":159,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":34209,"byte_end":34212,"line_start":160,"line_end":160,"column_start":1,"column_end":4}},{"value":"/ For a single sample, [`Rng::gen_range`] may be prefered:","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":34213,"byte_end":34273,"line_start":161,"line_end":161,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":34274,"byte_end":34277,"line_start":162,"line_end":162,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":34278,"byte_end":34285,"line_start":163,"line_end":163,"column_start":1,"column_end":8}},{"value":"/ use rand::Rng;","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":34286,"byte_end":34304,"line_start":164,"line_end":164,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":34305,"byte_end":34308,"line_start":165,"line_end":165,"column_start":1,"column_end":4}},{"value":"/ let mut rng = rand::thread_rng();","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":34309,"byte_end":34346,"line_start":166,"line_end":166,"column_start":1,"column_end":38}},{"value":"/ println!(\"{}\", rng.gen_range(0..10));","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":34347,"byte_end":34388,"line_start":167,"line_end":167,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":34389,"byte_end":34396,"line_start":168,"line_end":168,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":34397,"byte_end":34400,"line_start":169,"line_end":169,"column_start":1,"column_end":4}},{"value":"/ [`new`]: Uniform::new","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":34401,"byte_end":34426,"line_start":170,"line_end":170,"column_start":1,"column_end":26}},{"value":"/ [`new_inclusive`]: Uniform::new_inclusive","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":34427,"byte_end":34472,"line_start":171,"line_end":171,"column_start":1,"column_end":46}},{"value":"/ [`Rng::gen_range`]: Rng::gen_range","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":34473,"byte_end":34511,"line_start":172,"line_end":172,"column_start":1,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":64},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":34860,"byte_end":34863,"line_start":180,"line_end":180,"column_start":12,"column_end":15},"name":"new","qualname":"<Uniform<X>>::new","value":"pub fn new<B1, B2>(B1, B2) -> Uniform<X> where B1: SampleBorrow<X> + Sized,\nB2: SampleBorrow<X> + Sized","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Uniform` instance which samples uniformly from the half\n open range `[low, high)` (excluding `high`). Panics if `low >= high`.\n","sig":null,"attributes":[{"value":"/ Create a new `Uniform` instance which samples uniformly from the half","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":34697,"byte_end":34770,"line_start":178,"line_end":178,"column_start":5,"column_end":78}},{"value":"/ open range `[low, high)` (excluding `high`). Panics if `low >= high`.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":34775,"byte_end":34848,"line_start":179,"line_end":179,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":67},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":35202,"byte_end":35215,"line_start":190,"line_end":190,"column_start":12,"column_end":25},"name":"new_inclusive","qualname":"<Uniform<X>>::new_inclusive","value":"pub fn new_inclusive<B1, B2>(B1, B2) -> Uniform<X> where B1: SampleBorrow<X> +\nSized, B2: SampleBorrow<X> + Sized","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Uniform` instance which samples uniformly from the closed\n range `[low, high]` (inclusive). Panics if `low > high`.\n","sig":null,"attributes":[{"value":"/ Create a new `Uniform` instance which samples uniformly from the closed","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":35050,"byte_end":35125,"line_start":188,"line_end":188,"column_start":5,"column_end":80}},{"value":"/ range `[low, high]` (inclusive). Panics if `low > high`.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":35130,"byte_end":35190,"line_start":189,"line_end":189,"column_start":5,"column_end":65}}]},{"kind":"Trait","id":{"krate":0,"index":74},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":35861,"byte_end":35874,"line_start":212,"line_end":212,"column_start":11,"column_end":24},"name":"SampleUniform","qualname":"::distributions::uniform::SampleUniform","value":"SampleUniform: Sized","parent":null,"children":[{"krate":0,"index":75}],"decl_id":null,"docs":" Helper trait for creating objects using the correct implementation of\n [`UniformSampler`] for the sampling type.","sig":null,"attributes":[{"value":"/ Helper trait for creating objects using the correct implementation of","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":35560,"byte_end":35633,"line_start":205,"line_end":205,"column_start":1,"column_end":74}},{"value":"/ [`UniformSampler`] for the sampling type.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":35634,"byte_end":35679,"line_start":206,"line_end":206,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":35680,"byte_end":35683,"line_start":207,"line_end":207,"column_start":1,"column_end":4}},{"value":"/ See the [module documentation] on how to implement [`Uniform`] range","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":35684,"byte_end":35756,"line_start":208,"line_end":208,"column_start":1,"column_end":73}},{"value":"/ sampling for a custom type.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":35757,"byte_end":35788,"line_start":209,"line_end":209,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":35789,"byte_end":35792,"line_start":210,"line_end":210,"column_start":1,"column_end":4}},{"value":"/ [module documentation]: crate::distributions::uniform","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":35793,"byte_end":35850,"line_start":211,"line_end":211,"column_start":1,"column_end":58}}]},{"kind":"Type","id":{"krate":0,"index":75},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":35958,"byte_end":35965,"line_start":214,"line_end":214,"column_start":10,"column_end":17},"name":"Sampler","qualname":"::distributions::uniform::SampleUniform::Sampler","value":"type Sampler: UniformSampler<X = Self>;","parent":{"krate":0,"index":74},"children":[],"decl_id":null,"docs":" The `UniformSampler` implementation supporting type `X`.\n","sig":null,"attributes":[{"value":"/ The `UniformSampler` implementation supporting type `X`.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":35888,"byte_end":35948,"line_start":213,"line_end":213,"column_start":5,"column_end":65}}]},{"kind":"Trait","id":{"krate":0,"index":76},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":36440,"byte_end":36454,"line_start":227,"line_end":227,"column_start":11,"column_end":25},"name":"UniformSampler","qualname":"::distributions::uniform::UniformSampler","value":"UniformSampler: Sized","parent":null,"children":[{"krate":0,"index":77},{"krate":0,"index":78},{"krate":0,"index":81},{"krate":0,"index":84},{"krate":0,"index":86},{"krate":0,"index":90}],"decl_id":null,"docs":" Helper trait handling actual uniform sampling.","sig":null,"attributes":[{"value":"/ Helper trait handling actual uniform sampling.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":35996,"byte_end":36046,"line_start":217,"line_end":217,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":36047,"byte_end":36050,"line_start":218,"line_end":218,"column_start":1,"column_end":4}},{"value":"/ See the [module documentation] on how to implement [`Uniform`] range","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":36051,"byte_end":36123,"line_start":219,"line_end":219,"column_start":1,"column_end":73}},{"value":"/ sampling for a custom type.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":36124,"byte_end":36155,"line_start":220,"line_end":220,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":36156,"byte_end":36159,"line_start":221,"line_end":221,"column_start":1,"column_end":4}},{"value":"/ Implementation of [`sample_single`] is optional, and is only useful when","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":36160,"byte_end":36236,"line_start":222,"line_end":222,"column_start":1,"column_end":77}},{"value":"/ the implementation can be faster than `Self::new(low, high).sample(rng)`.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":36237,"byte_end":36314,"line_start":223,"line_end":223,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":36315,"byte_end":36318,"line_start":224,"line_end":224,"column_start":1,"column_end":4}},{"value":"/ [module documentation]: crate::distributions::uniform","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":36319,"byte_end":36376,"line_start":225,"line_end":225,"column_start":1,"column_end":58}},{"value":"/ [`sample_single`]: UniformSampler::sample_single","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":36377,"byte_end":36429,"line_start":226,"line_end":226,"column_start":1,"column_end":53}}]},{"kind":"Type","id":{"krate":0,"index":77},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":36522,"byte_end":36523,"line_start":229,"line_end":229,"column_start":10,"column_end":11},"name":"X","qualname":"::distributions::uniform::UniformSampler::X","value":"type X;","parent":{"krate":0,"index":76},"children":[],"decl_id":null,"docs":" The type sampled by this implementation.\n","sig":null,"attributes":[{"value":"/ The type sampled by this implementation.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":36468,"byte_end":36512,"line_start":228,"line_end":228,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":78},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":36786,"byte_end":36789,"line_start":236,"line_end":236,"column_start":8,"column_end":11},"name":"new","qualname":"::distributions::uniform::UniformSampler::new","value":"pub fn new<B1, B2>(B1, B2) -> Self where B1: SampleBorrow<Self::X> + Sized,\nB2: SampleBorrow<Self::X> + Sized","parent":{"krate":0,"index":76},"children":[],"decl_id":null,"docs":" Construct self, with inclusive lower bound and exclusive upper bound\n `[low, high)`.","sig":null,"attributes":[{"value":"/ Construct self, with inclusive lower bound and exclusive upper bound","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":36530,"byte_end":36602,"line_start":231,"line_end":231,"column_start":5,"column_end":77}},{"value":"/ `[low, high)`.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":36607,"byte_end":36625,"line_start":232,"line_end":232,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":36630,"byte_end":36633,"line_start":233,"line_end":233,"column_start":5,"column_end":8}},{"value":"/ Usually users should not call this directly but instead use","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":36638,"byte_end":36701,"line_start":234,"line_end":234,"column_start":5,"column_end":68}},{"value":"/ `Uniform::new`, which asserts that `low < high` before calling this.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":36706,"byte_end":36778,"line_start":235,"line_end":235,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":81},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":37162,"byte_end":37175,"line_start":246,"line_end":246,"column_start":8,"column_end":21},"name":"new_inclusive","qualname":"::distributions::uniform::UniformSampler::new_inclusive","value":"pub fn new_inclusive<B1, B2>(B1, B2) -> Self where B1: SampleBorrow<Self::X> +\nSized, B2: SampleBorrow<Self::X> + Sized","parent":{"krate":0,"index":76},"children":[],"decl_id":null,"docs":" Construct self, with inclusive bounds `[low, high]`.","sig":null,"attributes":[{"value":"/ Construct self, with inclusive bounds `[low, high]`.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":36926,"byte_end":36982,"line_start":241,"line_end":241,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":36987,"byte_end":36990,"line_start":242,"line_end":242,"column_start":5,"column_end":8}},{"value":"/ Usually users should not call this directly but instead use","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":36995,"byte_end":37058,"line_start":243,"line_end":243,"column_start":5,"column_end":68}},{"value":"/ `Uniform::new_inclusive`, which asserts that `low <= high` before","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":37063,"byte_end":37132,"line_start":244,"line_end":244,"column_start":5,"column_end":74}},{"value":"/ calling this.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":37137,"byte_end":37154,"line_start":245,"line_end":245,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":84},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":37339,"byte_end":37345,"line_start":252,"line_end":252,"column_start":8,"column_end":14},"name":"sample","qualname":"::distributions::uniform::UniformSampler::sample","value":"pub fn sample<R: Rng + ?Sized>(&Self, &mut R) -> Self::X","parent":{"krate":0,"index":76},"children":[],"decl_id":null,"docs":" Sample a value.\n","sig":null,"attributes":[{"value":"/ Sample a value.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":37312,"byte_end":37331,"line_start":251,"line_end":251,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":86},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":38320,"byte_end":38333,"line_start":273,"line_end":273,"column_start":8,"column_end":21},"name":"sample_single","qualname":"::distributions::uniform::UniformSampler::sample_single","value":"pub fn sample_single<R: Rng + ?Sized, B1, B2>(B1, B2, &mut R) -> Self::X where\nB1: SampleBorrow<Self::X> + Sized, B2: SampleBorrow<Self::X> + Sized","parent":{"krate":0,"index":76},"children":[],"decl_id":null,"docs":" Sample a single value uniformly from a range with inclusive lower bound\n and exclusive upper bound `[low, high)`.","sig":null,"attributes":[{"value":"/ Sample a single value uniformly from a range with inclusive lower bound","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":37400,"byte_end":37475,"line_start":254,"line_end":254,"column_start":5,"column_end":80}},{"value":"/ and exclusive upper bound `[low, high)`.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":37480,"byte_end":37524,"line_start":255,"line_end":255,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":37529,"byte_end":37532,"line_start":256,"line_end":256,"column_start":5,"column_end":8}},{"value":"/ By default this is implemented using","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":37537,"byte_end":37577,"line_start":257,"line_end":257,"column_start":5,"column_end":45}},{"value":"/ `UniformSampler::new(low, high).sample(rng)`. However, for some types","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":37582,"byte_end":37655,"line_start":258,"line_end":258,"column_start":5,"column_end":78}},{"value":"/ more optimal implementations for single usage may be provided via this","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":37660,"byte_end":37734,"line_start":259,"line_end":259,"column_start":5,"column_end":79}},{"value":"/ method (which is the case for integers and floats).","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":37739,"byte_end":37794,"line_start":260,"line_end":260,"column_start":5,"column_end":60}},{"value":"/ Results may not be identical.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":37799,"byte_end":37832,"line_start":261,"line_end":261,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":37837,"byte_end":37840,"line_start":262,"line_end":262,"column_start":5,"column_end":8}},{"value":"/ Note that to use this method in a generic context, the type needs to be","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":37845,"byte_end":37920,"line_start":263,"line_end":263,"column_start":5,"column_end":80}},{"value":"/ retrieved via `SampleUniform::Sampler` as follows:","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":37925,"byte_end":37979,"line_start":264,"line_end":264,"column_start":5,"column_end":59}},{"value":"/ ```","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":37984,"byte_end":37991,"line_start":265,"line_end":265,"column_start":5,"column_end":12}},{"value":"/ use rand::{thread_rng, distributions::uniform::{SampleUniform, UniformSampler}};","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":37996,"byte_end":38080,"line_start":266,"line_end":266,"column_start":5,"column_end":89}},{"value":"/ # #[allow(unused)]","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":38085,"byte_end":38107,"line_start":267,"line_end":267,"column_start":5,"column_end":27}},{"value":"/ fn sample_from_range<T: SampleUniform>(lb: T, ub: T) -> T {","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":38112,"byte_end":38175,"line_start":268,"line_end":268,"column_start":5,"column_end":68}},{"value":"/     let mut rng = thread_rng();","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":38180,"byte_end":38215,"line_start":269,"line_end":269,"column_start":5,"column_end":40}},{"value":"/     <T as SampleUniform>::Sampler::sample_single(lb, ub, &mut rng)","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":38220,"byte_end":38290,"line_start":270,"line_end":270,"column_start":5,"column_end":75}},{"value":"/ }","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":38295,"byte_end":38300,"line_start":271,"line_end":271,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":38305,"byte_end":38312,"line_start":272,"line_end":272,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":90},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":39009,"byte_end":39032,"line_start":290,"line_end":290,"column_start":8,"column_end":31},"name":"sample_single_inclusive","qualname":"::distributions::uniform::UniformSampler::sample_single_inclusive","value":"pub fn sample_single_inclusive<R: Rng + ?Sized, B1, B2>(B1, B2, &mut R)\n-> Self::X where B1: SampleBorrow<Self::X> + Sized,\nB2: SampleBorrow<Self::X> + Sized","parent":{"krate":0,"index":76},"children":[],"decl_id":null,"docs":" Sample a single value uniformly from a range with inclusive lower bound\n and inclusive upper bound `[low, high]`.","sig":null,"attributes":[{"value":"/ Sample a single value uniformly from a range with inclusive lower bound","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":38603,"byte_end":38678,"line_start":282,"line_end":282,"column_start":5,"column_end":80}},{"value":"/ and inclusive upper bound `[low, high]`.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":38683,"byte_end":38727,"line_start":283,"line_end":283,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":38732,"byte_end":38735,"line_start":284,"line_end":284,"column_start":5,"column_end":8}},{"value":"/ By default this is implemented using","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":38740,"byte_end":38780,"line_start":285,"line_end":285,"column_start":5,"column_end":45}},{"value":"/ `UniformSampler::new_inclusive(low, high).sample(rng)`. However, for","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":38785,"byte_end":38857,"line_start":286,"line_end":286,"column_start":5,"column_end":77}},{"value":"/ some types more optimal implementations for single usage may be provided","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":38862,"byte_end":38938,"line_start":287,"line_end":287,"column_start":5,"column_end":81}},{"value":"/ via this method.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":38943,"byte_end":38963,"line_start":288,"line_end":288,"column_start":5,"column_end":25}},{"value":"/ Results may not be identical.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":38968,"byte_end":39001,"line_start":289,"line_end":289,"column_start":5,"column_end":38}}]},{"kind":"Trait","id":{"krate":0,"index":100},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":39868,"byte_end":39880,"line_start":318,"line_end":318,"column_start":11,"column_end":23},"name":"SampleBorrow","qualname":"::distributions::uniform::SampleBorrow","value":"SampleBorrow<Borrowed>","parent":null,"children":[{"krate":0,"index":102}],"decl_id":null,"docs":" Helper trait similar to [`Borrow`] but implemented\n only for SampleUniform and references to SampleUniform in\n order to resolve ambiguity issues.","sig":null,"attributes":[{"value":"/ Helper trait similar to [`Borrow`] but implemented","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":39662,"byte_end":39716,"line_start":313,"line_end":313,"column_start":1,"column_end":55}},{"value":"/ only for SampleUniform and references to SampleUniform in","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":39717,"byte_end":39778,"line_start":314,"line_end":314,"column_start":1,"column_end":62}},{"value":"/ order to resolve ambiguity issues.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":39779,"byte_end":39817,"line_start":315,"line_end":315,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":39818,"byte_end":39821,"line_start":316,"line_end":316,"column_start":1,"column_end":4}},{"value":"/ [`Borrow`]: std::borrow::Borrow","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":39822,"byte_end":39857,"line_start":317,"line_end":317,"column_start":1,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":102},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":40034,"byte_end":40040,"line_start":322,"line_end":322,"column_start":8,"column_end":14},"name":"borrow","qualname":"::distributions::uniform::SampleBorrow::borrow","value":"pub fn borrow(&Self) -> &Borrowed","parent":{"krate":0,"index":100},"children":[],"decl_id":null,"docs":" Immutably borrows from an owned value. See [`Borrow::borrow`]","sig":null,"attributes":[{"value":"/ Immutably borrows from an owned value. See [`Borrow::borrow`]","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":39897,"byte_end":39962,"line_start":319,"line_end":319,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":39967,"byte_end":39970,"line_start":320,"line_end":320,"column_start":5,"column_end":8}},{"value":"/ [`Borrow::borrow`]: std::borrow::Borrow::borrow","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":39975,"byte_end":40026,"line_start":321,"line_end":321,"column_start":5,"column_end":56}}]},{"kind":"Trait","id":{"krate":0,"index":110},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":40580,"byte_end":40591,"line_start":345,"line_end":345,"column_start":11,"column_end":22},"name":"SampleRange","qualname":"::distributions::uniform::SampleRange","value":"SampleRange<T>","parent":null,"children":[{"krate":0,"index":112},{"krate":0,"index":114}],"decl_id":null,"docs":" Range that supports generating a single sample efficiently.","sig":null,"attributes":[{"value":"/ Range that supports generating a single sample efficiently.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":40398,"byte_end":40461,"line_start":341,"line_end":341,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":40462,"byte_end":40465,"line_start":342,"line_end":342,"column_start":1,"column_end":4}},{"value":"/ Any type implementing this trait can be used to specify the sampled range","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":40466,"byte_end":40543,"line_start":343,"line_end":343,"column_start":1,"column_end":78}},{"value":"/ for `Rng::gen_range`.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":40544,"byte_end":40569,"line_start":344,"line_end":344,"column_start":1,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":112},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":40652,"byte_end":40665,"line_start":347,"line_end":347,"column_start":8,"column_end":21},"name":"sample_single","qualname":"::distributions::uniform::SampleRange::sample_single","value":"pub fn sample_single<R: RngCore + ?Sized>(Self, &mut R) -> T","parent":{"krate":0,"index":110},"children":[],"decl_id":null,"docs":" Generate a sample from the given range.\n","sig":null,"attributes":[{"value":"/ Generate a sample from the given range.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":40601,"byte_end":40644,"line_start":346,"line_end":346,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":114},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":40762,"byte_end":40770,"line_start":350,"line_end":350,"column_start":8,"column_end":16},"name":"is_empty","qualname":"::distributions::uniform::SampleRange::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":{"krate":0,"index":110},"children":[],"decl_id":null,"docs":" Check whether the range is empty.\n","sig":null,"attributes":[{"value":"/ Check whether the range is empty.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":40717,"byte_end":40754,"line_start":349,"line_end":349,"column_start":5,"column_end":42}}]},{"kind":"Struct","id":{"krate":0,"index":782},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":43557,"byte_end":43567,"line_start":419,"line_end":419,"column_start":12,"column_end":22},"name":"UniformInt","qualname":"::distributions::uniform::UniformInt","value":"UniformInt {  }","parent":null,"children":[{"krate":0,"index":784},{"krate":0,"index":785},{"krate":0,"index":786}],"decl_id":null,"docs":" The back-end implementing [`UniformSampler`] for integer types.","sig":null,"attributes":[{"value":"/ The back-end implementing [`UniformSampler`] for integer types.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":41548,"byte_end":41615,"line_start":383,"line_end":383,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":41616,"byte_end":41619,"line_start":384,"line_end":384,"column_start":1,"column_end":4}},{"value":"/ Unless you are implementing [`UniformSampler`] for your own type, this type","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":41620,"byte_end":41699,"line_start":385,"line_end":385,"column_start":1,"column_end":80}},{"value":"/ should not be used directly, use [`Uniform`] instead.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":41700,"byte_end":41757,"line_start":386,"line_end":386,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":41758,"byte_end":41761,"line_start":387,"line_end":387,"column_start":1,"column_end":4}},{"value":"/ # Implementation notes","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":41762,"byte_end":41788,"line_start":388,"line_end":388,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":41789,"byte_end":41792,"line_start":389,"line_end":389,"column_start":1,"column_end":4}},{"value":"/ For simplicity, we use the same generic struct `UniformInt<X>` for all","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":41793,"byte_end":41867,"line_start":390,"line_end":390,"column_start":1,"column_end":75}},{"value":"/ integer types `X`. This gives us only one field type, `X`; to store unsigned","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":41868,"byte_end":41948,"line_start":391,"line_end":391,"column_start":1,"column_end":81}},{"value":"/ values of this size, we take use the fact that these conversions are no-ops.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":41949,"byte_end":42029,"line_start":392,"line_end":392,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":42030,"byte_end":42033,"line_start":393,"line_end":393,"column_start":1,"column_end":4}},{"value":"/ For a closed range, the number of possible numbers we should generate is","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":42034,"byte_end":42110,"line_start":394,"line_end":394,"column_start":1,"column_end":77}},{"value":"/ `range = (high - low + 1)`. To avoid bias, we must ensure that the size of","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":42111,"byte_end":42189,"line_start":395,"line_end":395,"column_start":1,"column_end":79}},{"value":"/ our sample space, `zone`, is a multiple of `range`; other values must be","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":42190,"byte_end":42266,"line_start":396,"line_end":396,"column_start":1,"column_end":77}},{"value":"/ rejected (by replacing with a new random sample).","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":42267,"byte_end":42320,"line_start":397,"line_end":397,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":42321,"byte_end":42324,"line_start":398,"line_end":398,"column_start":1,"column_end":4}},{"value":"/ As a special case, we use `range = 0` to represent the full range of the","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":42325,"byte_end":42401,"line_start":399,"line_end":399,"column_start":1,"column_end":77}},{"value":"/ result type (i.e. for `new_inclusive($ty::MIN, $ty::MAX)`).","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":42402,"byte_end":42465,"line_start":400,"line_end":400,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":42466,"byte_end":42469,"line_start":401,"line_end":401,"column_start":1,"column_end":4}},{"value":"/ The optimum `zone` is the largest product of `range` which fits in our","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":42470,"byte_end":42544,"line_start":402,"line_end":402,"column_start":1,"column_end":75}},{"value":"/ (unsigned) target type. We calculate this by calculating how many numbers we","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":42545,"byte_end":42625,"line_start":403,"line_end":403,"column_start":1,"column_end":81}},{"value":"/ must reject: `reject = (MAX + 1) % range = (MAX - range + 1) % range`. Any (large)","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":42626,"byte_end":42712,"line_start":404,"line_end":404,"column_start":1,"column_end":87}},{"value":"/ product of `range` will suffice, thus in `sample_single` we multiply by a","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":42713,"byte_end":42790,"line_start":405,"line_end":405,"column_start":1,"column_end":78}},{"value":"/ power of 2 via bit-shifting (faster but may cause more rejections).","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":42791,"byte_end":42862,"line_start":406,"line_end":406,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":42863,"byte_end":42866,"line_start":407,"line_end":407,"column_start":1,"column_end":4}},{"value":"/ The smallest integer PRNGs generate is `u32`. For 8- and 16-bit outputs we","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":42867,"byte_end":42945,"line_start":408,"line_end":408,"column_start":1,"column_end":79}},{"value":"/ use `u32` for our `zone` and samples (because it's not slower and because","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":42946,"byte_end":43023,"line_start":409,"line_end":409,"column_start":1,"column_end":78}},{"value":"/ it reduces the chance of having to reject a sample). In this case we cannot","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":43024,"byte_end":43103,"line_start":410,"line_end":410,"column_start":1,"column_end":80}},{"value":"/ store `zone` in the target type since it is too large, however we know","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":43104,"byte_end":43178,"line_start":411,"line_end":411,"column_start":1,"column_end":75}},{"value":"/ `ints_to_reject < range <= $unsigned::MAX`.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":43179,"byte_end":43226,"line_start":412,"line_end":412,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":43227,"byte_end":43230,"line_start":413,"line_end":413,"column_start":1,"column_end":4}},{"value":"/ An alternative to using a modulus is widening multiply: After a widening","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":43231,"byte_end":43307,"line_start":414,"line_end":414,"column_start":1,"column_end":77}},{"value":"/ multiply by `range`, the result is in the high word. Then comparing the low","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":43308,"byte_end":43387,"line_start":415,"line_end":415,"column_start":1,"column_end":80}},{"value":"/ word against `zone` makes sure our distribution is uniform.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":43388,"byte_end":43451,"line_start":416,"line_end":416,"column_start":1,"column_end":64}}]},{"kind":"Struct","id":{"krate":0,"index":1035},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":55823,"byte_end":55834,"line_start":730,"line_end":730,"column_start":12,"column_end":23},"name":"UniformChar","qualname":"::distributions::uniform::UniformChar","value":"UniformChar {  }","parent":null,"children":[{"krate":0,"index":1036}],"decl_id":null,"docs":" The back-end implementing [`UniformSampler`] for `char`.","sig":null,"attributes":[{"value":"/ The back-end implementing [`UniformSampler`] for `char`.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":55265,"byte_end":55325,"line_start":719,"line_end":719,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":55326,"byte_end":55329,"line_start":720,"line_end":720,"column_start":1,"column_end":4}},{"value":"/ Unless you are implementing [`UniformSampler`] for your own type, this type","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":55330,"byte_end":55409,"line_start":721,"line_end":721,"column_start":1,"column_end":80}},{"value":"/ should not be used directly, use [`Uniform`] instead.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":55410,"byte_end":55467,"line_start":722,"line_end":722,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":55468,"byte_end":55471,"line_start":723,"line_end":723,"column_start":1,"column_end":4}},{"value":"/ This differs from integer range sampling since the range `0xD800..=0xDFFF`","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":55472,"byte_end":55550,"line_start":724,"line_end":724,"column_start":1,"column_end":79}},{"value":"/ are used for surrogate pairs in UCS and UTF-16, and consequently are not","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":55551,"byte_end":55627,"line_start":725,"line_end":725,"column_start":1,"column_end":77}},{"value":"/ valid Unicode code points. We must therefore avoid sampling values in this","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":55628,"byte_end":55706,"line_start":726,"line_end":726,"column_start":1,"column_end":79}},{"value":"/ range.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":55707,"byte_end":55717,"line_start":727,"line_end":727,"column_start":1,"column_end":11}}]},{"kind":"Struct","id":{"krate":0,"index":1042},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":58706,"byte_end":58718,"line_start":809,"line_end":809,"column_start":12,"column_end":24},"name":"UniformFloat","qualname":"::distributions::uniform::UniformFloat","value":"UniformFloat {  }","parent":null,"children":[{"krate":0,"index":1044},{"krate":0,"index":1045}],"decl_id":null,"docs":" The back-end implementing [`UniformSampler`] for floating-point types.","sig":null,"attributes":[{"value":"/ The back-end implementing [`UniformSampler`] for floating-point types.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":57716,"byte_end":57790,"line_start":788,"line_end":788,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":57791,"byte_end":57794,"line_start":789,"line_end":789,"column_start":1,"column_end":4}},{"value":"/ Unless you are implementing [`UniformSampler`] for your own type, this type","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":57795,"byte_end":57874,"line_start":790,"line_end":790,"column_start":1,"column_end":80}},{"value":"/ should not be used directly, use [`Uniform`] instead.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":57875,"byte_end":57932,"line_start":791,"line_end":791,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":57933,"byte_end":57936,"line_start":792,"line_end":792,"column_start":1,"column_end":4}},{"value":"/ # Implementation notes","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":57937,"byte_end":57963,"line_start":793,"line_end":793,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":57964,"byte_end":57967,"line_start":794,"line_end":794,"column_start":1,"column_end":4}},{"value":"/ Instead of generating a float in the `[0, 1)` range using [`Standard`], the","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":57968,"byte_end":58047,"line_start":795,"line_end":795,"column_start":1,"column_end":80}},{"value":"/ `UniformFloat` implementation converts the output of an PRNG itself. This","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":58048,"byte_end":58125,"line_start":796,"line_end":796,"column_start":1,"column_end":78}},{"value":"/ way one or two steps can be optimized out.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":58126,"byte_end":58172,"line_start":797,"line_end":797,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":58173,"byte_end":58176,"line_start":798,"line_end":798,"column_start":1,"column_end":4}},{"value":"/ The floats are first converted to a value in the `[1, 2)` interval using a","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":58177,"byte_end":58255,"line_start":799,"line_end":799,"column_start":1,"column_end":79}},{"value":"/ transmute-based method, and then mapped to the expected range with a","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":58256,"byte_end":58328,"line_start":800,"line_end":800,"column_start":1,"column_end":73}},{"value":"/ multiply and addition. Values produced this way have what equals 23 bits of","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":58329,"byte_end":58408,"line_start":801,"line_end":801,"column_start":1,"column_end":80}},{"value":"/ random digits for an `f32`, and 52 for an `f64`.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":58409,"byte_end":58461,"line_start":802,"line_end":802,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":58462,"byte_end":58465,"line_start":803,"line_end":803,"column_start":1,"column_end":4}},{"value":"/ [`new`]: UniformSampler::new","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":58466,"byte_end":58498,"line_start":804,"line_end":804,"column_start":1,"column_end":33}},{"value":"/ [`new_inclusive`]: UniformSampler::new_inclusive","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":58499,"byte_end":58551,"line_start":805,"line_end":805,"column_start":1,"column_end":53}},{"value":"/ [`Standard`]: crate::distributions::Standard","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":58552,"byte_end":58600,"line_start":806,"line_end":806,"column_start":1,"column_end":49}}]},{"kind":"Struct","id":{"krate":0,"index":1086},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":66846,"byte_end":66861,"line_start":1003,"line_end":1003,"column_start":12,"column_end":27},"name":"UniformDuration","qualname":"::distributions::uniform::UniformDuration","value":"UniformDuration {  }","parent":null,"children":[{"krate":0,"index":1087},{"krate":0,"index":1088}],"decl_id":null,"docs":" The back-end implementing [`UniformSampler`] for `Duration`.","sig":null,"attributes":[{"value":"/ The back-end implementing [`UniformSampler`] for `Duration`.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":66533,"byte_end":66597,"line_start":997,"line_end":997,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":66598,"byte_end":66601,"line_start":998,"line_end":998,"column_start":1,"column_end":4}},{"value":"/ Unless you are implementing [`UniformSampler`] for your own types, this type","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":66602,"byte_end":66682,"line_start":999,"line_end":999,"column_start":1,"column_end":81}},{"value":"/ should not be used directly, use [`Uniform`] instead.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":66683,"byte_end":66740,"line_start":1000,"line_end":1000,"column_start":1,"column_end":58}}]},{"kind":"Mod","id":{"krate":0,"index":155},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/weighted.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"weighted","qualname":"::distributions::weighted","value":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/weighted.rs","parent":null,"children":[{"krate":0,"index":156},{"krate":0,"index":157},{"krate":0,"index":158},{"krate":0,"index":159}],"decl_id":null,"docs":" Weighted index sampling","sig":null,"attributes":[{"value":"deprecated(since = \"0.8.0\", note =\n             \"use rand::distributions::{WeightedIndex, WeightedError} instead\")","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":11472,"byte_end":11576,"line_start":110,"line_end":110,"column_start":1,"column_end":105}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":11577,"byte_end":11602,"line_start":111,"line_end":111,"column_start":1,"column_end":26}},{"value":"/ Weighted index sampling","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/weighted.rs","byte_start":89845,"byte_end":89872,"line_start":9,"line_end":9,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/weighted.rs","byte_start":89873,"byte_end":89876,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ This module is deprecated. Use [`crate::distributions::WeightedIndex`] and","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/weighted.rs","byte_start":89877,"byte_end":89955,"line_start":11,"line_end":11,"column_start":1,"column_end":79}},{"value":"/ [`crate::distributions::WeightedError`] instead.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/weighted.rs","byte_start":89956,"byte_end":90008,"line_start":12,"line_end":12,"column_start":1,"column_end":53}}]},{"kind":"Mod","id":{"krate":0,"index":159},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/weighted.rs","byte_start":90156,"byte_end":90168,"line_start":18,"line_end":18,"column_start":9,"column_end":21},"name":"alias_method","qualname":"::distributions::weighted::alias_method","value":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/weighted.rs","parent":null,"children":[{"krate":0,"index":160},{"krate":0,"index":2078},{"krate":0,"index":161},{"krate":0,"index":162},{"krate":0,"index":1109},{"krate":0,"index":1112},{"krate":0,"index":163},{"krate":0,"index":166},{"krate":0,"index":1115},{"krate":0,"index":1116},{"krate":0,"index":1117},{"krate":0,"index":1118},{"krate":0,"index":1119},{"krate":0,"index":1120},{"krate":0,"index":1121},{"krate":0,"index":1122},{"krate":0,"index":1123},{"krate":0,"index":1124},{"krate":0,"index":1125},{"krate":0,"index":1126},{"krate":0,"index":1127},{"krate":0,"index":1128}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/weighted.rs","byte_start":90058,"byte_end":90080,"line_start":16,"line_end":16,"column_start":1,"column_end":23}},{"value":"deprecated(since = \"0.8.0\", note = \"moved to rand_distr crate\")","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/weighted.rs","byte_start":90081,"byte_end":90147,"line_start":17,"line_end":17,"column_start":1,"column_end":67}}]},{"kind":"Struct","id":{"krate":0,"index":1109},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/weighted.rs","byte_start":90437,"byte_end":90450,"line_start":26,"line_end":26,"column_start":16,"column_end":29},"name":"WeightedIndex","qualname":"::distributions::weighted::alias_method::WeightedIndex","value":"WeightedIndex {  }","parent":null,"children":[{"krate":0,"index":1111}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":165},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/weighted.rs","byte_start":90558,"byte_end":90561,"line_start":30,"line_end":30,"column_start":16,"column_end":19},"name":"new","qualname":"<WeightedIndex<W>>::new","value":"pub fn new(Vec<W>) -> Result<Self, WeightedError>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":166},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/weighted.rs","byte_start":90683,"byte_end":90689,"line_start":35,"line_end":35,"column_start":15,"column_end":21},"name":"Weight","qualname":"::distributions::weighted::alias_method::Weight","value":"Weight","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1129},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/weighted_index.rs","byte_start":94404,"byte_end":94417,"line_start":81,"line_end":81,"column_start":12,"column_end":25},"name":"WeightedIndex","qualname":"::distributions::weighted_index::WeightedIndex","value":"WeightedIndex {  }","parent":null,"children":[{"krate":0,"index":1131},{"krate":0,"index":1132},{"krate":0,"index":1133}],"decl_id":null,"docs":" A distribution using weighted sampling of discrete items","sig":null,"attributes":[{"value":"/ A distribution using weighted sampling of discrete items","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/weighted_index.rs","byte_start":91800,"byte_end":91860,"line_start":23,"line_end":23,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/weighted_index.rs","byte_start":91861,"byte_end":91864,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ Sampling a `WeightedIndex` distribution returns the index of a randomly","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/weighted_index.rs","byte_start":91865,"byte_end":91940,"line_start":25,"line_end":25,"column_start":1,"column_end":76}},{"value":"/ selected element from the iterator used when the `WeightedIndex` was","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/weighted_index.rs","byte_start":91941,"byte_end":92013,"line_start":26,"line_end":26,"column_start":1,"column_end":73}},{"value":"/ created. The chance of a given element being picked is proportional to the","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/weighted_index.rs","byte_start":92014,"byte_end":92092,"line_start":27,"line_end":27,"column_start":1,"column_end":79}},{"value":"/ value of the element. The weights can use any type `X` for which an","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/weighted_index.rs","byte_start":92093,"byte_end":92164,"line_start":28,"line_end":28,"column_start":1,"column_end":72}},{"value":"/ implementation of [`Uniform<X>`] exists.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/weighted_index.rs","byte_start":92165,"byte_end":92209,"line_start":29,"line_end":29,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/weighted_index.rs","byte_start":92210,"byte_end":92213,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ # Performance","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/weighted_index.rs","byte_start":92214,"byte_end":92231,"line_start":31,"line_end":31,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/weighted_index.rs","byte_start":92232,"byte_end":92235,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ Time complexity of sampling from `WeightedIndex` is `O(log N)` where","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/weighted_index.rs","byte_start":92236,"byte_end":92308,"line_start":33,"line_end":33,"column_start":1,"column_end":73}},{"value":"/ `N` is the number of weights. As an alternative,","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/weighted_index.rs","byte_start":92309,"byte_end":92361,"line_start":34,"line_end":34,"column_start":1,"column_end":53}},{"value":"/ [`rand_distr::weighted_alias`](https://docs.rs/rand_distr/*/rand_distr/weighted_alias/index.html)","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/weighted_index.rs","byte_start":92362,"byte_end":92463,"line_start":35,"line_end":35,"column_start":1,"column_end":102}},{"value":"/ supports `O(1)` sampling, but with much higher initialisation cost.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/weighted_index.rs","byte_start":92464,"byte_end":92535,"line_start":36,"line_end":36,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/weighted_index.rs","byte_start":92536,"byte_end":92539,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ A `WeightedIndex<X>` contains a `Vec<X>` and a [`Uniform<X>`] and so its","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/weighted_index.rs","byte_start":92540,"byte_end":92616,"line_start":38,"line_end":38,"column_start":1,"column_end":77}},{"value":"/ size is the sum of the size of those objects, possibly plus some alignment.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/weighted_index.rs","byte_start":92617,"byte_end":92696,"line_start":39,"line_end":39,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/weighted_index.rs","byte_start":92697,"byte_end":92700,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ Creating a `WeightedIndex<X>` will allocate enough space to hold `N - 1`","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/weighted_index.rs","byte_start":92701,"byte_end":92777,"line_start":41,"line_end":41,"column_start":1,"column_end":77}},{"value":"/ weights of type `X`, where `N` is the number of weights. However, since","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/weighted_index.rs","byte_start":92778,"byte_end":92853,"line_start":42,"line_end":42,"column_start":1,"column_end":76}},{"value":"/ `Vec` doesn't guarantee a particular growth strategy, additional memory","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/weighted_index.rs","byte_start":92854,"byte_end":92929,"line_start":43,"line_end":43,"column_start":1,"column_end":76}},{"value":"/ might be allocated but not used. Since the `WeightedIndex` object also","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/weighted_index.rs","byte_start":92930,"byte_end":93004,"line_start":44,"line_end":44,"column_start":1,"column_end":75}},{"value":"/ contains, this might cause additional allocations, though for primitive","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/weighted_index.rs","byte_start":93005,"byte_end":93080,"line_start":45,"line_end":45,"column_start":1,"column_end":76}},{"value":"/ types, [`Uniform<X>`] doesn't allocate any memory.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/weighted_index.rs","byte_start":93081,"byte_end":93135,"line_start":46,"line_end":46,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/weighted_index.rs","byte_start":93136,"byte_end":93139,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ Sampling from `WeightedIndex` will result in a single call to","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/weighted_index.rs","byte_start":93140,"byte_end":93205,"line_start":48,"line_end":48,"column_start":1,"column_end":66}},{"value":"/ `Uniform<X>::sample` (method of the [`Distribution`] trait), which typically","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/weighted_index.rs","byte_start":93206,"byte_end":93286,"line_start":49,"line_end":49,"column_start":1,"column_end":81}},{"value":"/ will request a single value from the underlying [`RngCore`], though the","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/weighted_index.rs","byte_start":93287,"byte_end":93362,"line_start":50,"line_end":50,"column_start":1,"column_end":76}},{"value":"/ exact number depends on the implementation of `Uniform<X>::sample`.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/weighted_index.rs","byte_start":93363,"byte_end":93434,"line_start":51,"line_end":51,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/weighted_index.rs","byte_start":93435,"byte_end":93438,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/weighted_index.rs","byte_start":93439,"byte_end":93452,"line_start":53,"line_end":53,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/weighted_index.rs","byte_start":93453,"byte_end":93456,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/weighted_index.rs","byte_start":93457,"byte_end":93464,"line_start":55,"line_end":55,"column_start":1,"column_end":8}},{"value":"/ use rand::prelude::*;","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/weighted_index.rs","byte_start":93465,"byte_end":93490,"line_start":56,"line_end":56,"column_start":1,"column_end":26}},{"value":"/ use rand::distributions::WeightedIndex;","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/weighted_index.rs","byte_start":93491,"byte_end":93534,"line_start":57,"line_end":57,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/weighted_index.rs","byte_start":93535,"byte_end":93538,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ let choices = ['a', 'b', 'c'];","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/weighted_index.rs","byte_start":93539,"byte_end":93573,"line_start":59,"line_end":59,"column_start":1,"column_end":35}},{"value":"/ let weights = [2,   1,   1];","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/weighted_index.rs","byte_start":93574,"byte_end":93606,"line_start":60,"line_end":60,"column_start":1,"column_end":33}},{"value":"/ let dist = WeightedIndex::new(&weights).unwrap();","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/weighted_index.rs","byte_start":93607,"byte_end":93660,"line_start":61,"line_end":61,"column_start":1,"column_end":54}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/weighted_index.rs","byte_start":93661,"byte_end":93692,"line_start":62,"line_end":62,"column_start":1,"column_end":32}},{"value":"/ for _ in 0..100 {","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/weighted_index.rs","byte_start":93693,"byte_end":93714,"line_start":63,"line_end":63,"column_start":1,"column_end":22}},{"value":"/     // 50% chance to print 'a', 25% chance to print 'b', 25% chance to print 'c'","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/weighted_index.rs","byte_start":93715,"byte_end":93799,"line_start":64,"line_end":64,"column_start":1,"column_end":85}},{"value":"/     println!(\"{}\", choices[dist.sample(&mut rng)]);","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/weighted_index.rs","byte_start":93800,"byte_end":93855,"line_start":65,"line_end":65,"column_start":1,"column_end":56}},{"value":"/ }","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/weighted_index.rs","byte_start":93856,"byte_end":93861,"line_start":66,"line_end":66,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/weighted_index.rs","byte_start":93862,"byte_end":93865,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ let items = [('a', 0), ('b', 3), ('c', 7)];","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/weighted_index.rs","byte_start":93866,"byte_end":93913,"line_start":68,"line_end":68,"column_start":1,"column_end":48}},{"value":"/ let dist2 = WeightedIndex::new(items.iter().map(|item| item.1)).unwrap();","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/weighted_index.rs","byte_start":93914,"byte_end":93991,"line_start":69,"line_end":69,"column_start":1,"column_end":78}},{"value":"/ for _ in 0..100 {","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/weighted_index.rs","byte_start":93992,"byte_end":94013,"line_start":70,"line_end":70,"column_start":1,"column_end":22}},{"value":"/     // 0% chance to print 'a', 30% chance to print 'b', 70% chance to print 'c'","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/weighted_index.rs","byte_start":94014,"byte_end":94097,"line_start":71,"line_end":71,"column_start":1,"column_end":84}},{"value":"/     println!(\"{}\", items[dist2.sample(&mut rng)].0);","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/weighted_index.rs","byte_start":94098,"byte_end":94154,"line_start":72,"line_end":72,"column_start":1,"column_end":57}},{"value":"/ }","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/weighted_index.rs","byte_start":94155,"byte_end":94160,"line_start":73,"line_end":73,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/weighted_index.rs","byte_start":94161,"byte_end":94168,"line_start":74,"line_end":74,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/weighted_index.rs","byte_start":94169,"byte_end":94172,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ [`Uniform<X>`]: crate::distributions::Uniform","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/weighted_index.rs","byte_start":94173,"byte_end":94222,"line_start":76,"line_end":76,"column_start":1,"column_end":50}},{"value":"/ [`RngCore`]: crate::RngCore","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/weighted_index.rs","byte_start":94223,"byte_end":94254,"line_start":77,"line_end":77,"column_start":1,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":180},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/weighted_index.rs","byte_start":94991,"byte_end":94994,"line_start":96,"line_end":96,"column_start":12,"column_end":15},"name":"new","qualname":"<WeightedIndex<X>>::new","value":"pub fn new<I>(I) -> Result<WeightedIndex<X>, WeightedError> where\nI: IntoIterator, I::Item: SampleBorrow<X>,\nX: for<'a> ::core::ops::AddAssign<&'a X> + Clone + Default","parent":null,"children":[],"decl_id":null,"docs":" Creates a new a `WeightedIndex` [`Distribution`] using the values\n in `weights`. The weights can use any type `X` for which an\n implementation of [`Uniform<X>`] exists.","sig":null,"attributes":[{"value":"/ Creates a new a `WeightedIndex` [`Distribution`] using the values","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/weighted_index.rs","byte_start":94603,"byte_end":94672,"line_start":88,"line_end":88,"column_start":5,"column_end":74}},{"value":"/ in `weights`. The weights can use any type `X` for which an","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/weighted_index.rs","byte_start":94677,"byte_end":94740,"line_start":89,"line_end":89,"column_start":5,"column_end":68}},{"value":"/ implementation of [`Uniform<X>`] exists.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/weighted_index.rs","byte_start":94745,"byte_end":94789,"line_start":90,"line_end":90,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/weighted_index.rs","byte_start":94794,"byte_end":94797,"line_start":91,"line_end":91,"column_start":5,"column_end":8}},{"value":"/ Returns an error if the iterator is empty, if any weight is `< 0`, or","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/weighted_index.rs","byte_start":94802,"byte_end":94875,"line_start":92,"line_end":92,"column_start":5,"column_end":78}},{"value":"/ if its total value is 0.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/weighted_index.rs","byte_start":94880,"byte_end":94908,"line_start":93,"line_end":93,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/weighted_index.rs","byte_start":94913,"byte_end":94916,"line_start":94,"line_end":94,"column_start":5,"column_end":8}},{"value":"/ [`Uniform<X>`]: crate::distributions::uniform::Uniform","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/weighted_index.rs","byte_start":94921,"byte_end":94979,"line_start":95,"line_end":95,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":183},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/weighted_index.rs","byte_start":96682,"byte_end":96696,"line_start":142,"line_end":142,"column_start":12,"column_end":26},"name":"update_weights","qualname":"<WeightedIndex<X>>::update_weights","value":"pub fn update_weights(&mut Self, &[(usize, &X)]) -> Result<(), WeightedError>\nwhere X: for<'a> ::core::ops::AddAssign<&'a X> +\nfor<'a> ::core::ops::SubAssign<&'a X> + Clone + Default","parent":null,"children":[],"decl_id":null,"docs":" Update a subset of weights, without changing the number of weights.","sig":null,"attributes":[{"value":"/ Update a subset of weights, without changing the number of weights.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/weighted_index.rs","byte_start":96259,"byte_end":96330,"line_start":133,"line_end":133,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/weighted_index.rs","byte_start":96335,"byte_end":96338,"line_start":134,"line_end":134,"column_start":5,"column_end":8}},{"value":"/ `new_weights` must be sorted by the index.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/weighted_index.rs","byte_start":96343,"byte_end":96389,"line_start":135,"line_end":135,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/weighted_index.rs","byte_start":96394,"byte_end":96397,"line_start":136,"line_end":136,"column_start":5,"column_end":8}},{"value":"/ Using this method instead of `new` might be more efficient if only a small number of","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/weighted_index.rs","byte_start":96402,"byte_end":96490,"line_start":137,"line_end":137,"column_start":5,"column_end":93}},{"value":"/ weights is modified. No allocations are performed, unless the weight type `X` uses","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/weighted_index.rs","byte_start":96495,"byte_end":96581,"line_start":138,"line_end":138,"column_start":5,"column_end":91}},{"value":"/ allocation internally.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/weighted_index.rs","byte_start":96586,"byte_end":96612,"line_start":139,"line_end":139,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/weighted_index.rs","byte_start":96617,"byte_end":96620,"line_start":140,"line_end":140,"column_start":5,"column_end":8}},{"value":"/ In case of error, `self` is not modified.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/weighted_index.rs","byte_start":96625,"byte_end":96670,"line_start":141,"line_end":141,"column_start":5,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1141},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/weighted_index.rs","byte_start":106307,"byte_end":106313,"line_start":428,"line_end":428,"column_start":5,"column_end":11},"name":"NoItem","qualname":"::distributions::weighted_index::WeightedError::NoItem","value":"WeightedError::NoItem","parent":{"krate":0,"index":1140},"children":[],"decl_id":null,"docs":" The provided weight collection contains no items.\n","sig":null,"attributes":[{"value":"/ The provided weight collection contains no items.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/weighted_index.rs","byte_start":106249,"byte_end":106302,"line_start":427,"line_end":427,"column_start":5,"column_end":58}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1143},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/weighted_index.rs","byte_start":106434,"byte_end":106447,"line_start":432,"line_end":432,"column_start":5,"column_end":18},"name":"InvalidWeight","qualname":"::distributions::weighted_index::WeightedError::InvalidWeight","value":"WeightedError::InvalidWeight","parent":{"krate":0,"index":1140},"children":[],"decl_id":null,"docs":" A weight is either less than zero, greater than the supported maximum,\n NaN, or otherwise invalid.\n","sig":null,"attributes":[{"value":"/ A weight is either less than zero, greater than the supported maximum,","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/weighted_index.rs","byte_start":106320,"byte_end":106394,"line_start":430,"line_end":430,"column_start":5,"column_end":79}},{"value":"/ NaN, or otherwise invalid.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/weighted_index.rs","byte_start":106399,"byte_end":106429,"line_start":431,"line_end":431,"column_start":5,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1145},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/weighted_index.rs","byte_start":106516,"byte_end":106530,"line_start":435,"line_end":435,"column_start":5,"column_end":19},"name":"AllWeightsZero","qualname":"::distributions::weighted_index::WeightedError::AllWeightsZero","value":"WeightedError::AllWeightsZero","parent":{"krate":0,"index":1140},"children":[],"decl_id":null,"docs":" All items in the provided weight collection are zero.\n","sig":null,"attributes":[{"value":"/ All items in the provided weight collection are zero.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/weighted_index.rs","byte_start":106454,"byte_end":106511,"line_start":434,"line_end":434,"column_start":5,"column_end":62}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1147},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/weighted_index.rs","byte_start":106608,"byte_end":106615,"line_start":438,"line_end":438,"column_start":5,"column_end":12},"name":"TooMany","qualname":"::distributions::weighted_index::WeightedError::TooMany","value":"WeightedError::TooMany","parent":{"krate":0,"index":1140},"children":[],"decl_id":null,"docs":" Too many weights are provided (length greater than `u32::MAX`)\n","sig":null,"attributes":[{"value":"/ Too many weights are provided (length greater than `u32::MAX`)","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/weighted_index.rs","byte_start":106537,"byte_end":106603,"line_start":437,"line_end":437,"column_start":5,"column_end":71}}]},{"kind":"Enum","id":{"krate":0,"index":1140},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/weighted_index.rs","byte_start":106229,"byte_end":106242,"line_start":426,"line_end":426,"column_start":10,"column_end":23},"name":"WeightedError","qualname":"::distributions::weighted_index::WeightedError","value":"pub enum WeightedError {\n\n    /// The provided weight collection contains no items.\n    NoItem,\n\n    /// A weight is either less than zero, greater than the supported maximum,\n    /// NaN, or otherwise invalid.\n    InvalidWeight,\n\n    /// All items in the provided weight collection are zero.\n    AllWeightsZero,\n\n    /// Too many weights are provided (length greater than `u32::MAX`)\n    TooMany,\n}","parent":null,"children":[{"krate":0,"index":1141},{"krate":0,"index":1143},{"krate":0,"index":1145},{"krate":0,"index":1147}],"decl_id":null,"docs":" Error type returned from `WeightedIndex::new`.\n","sig":null,"attributes":[{"value":"/ Error type returned from `WeightedIndex::new`.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/weighted_index.rs","byte_start":106074,"byte_end":106124,"line_start":423,"line_end":423,"column_start":1,"column_end":51}}]},{"kind":"Struct","id":{"krate":0,"index":1160},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/float.rs","byte_start":108816,"byte_end":108828,"line_start":46,"line_end":46,"column_start":12,"column_end":24},"name":"OpenClosed01","qualname":"::distributions::float::OpenClosed01","value":"","parent":null,"children":[],"decl_id":null,"docs":" A distribution to sample floating point numbers uniformly in the half-open\n interval `(0, 1]`, i.e. including 1 but not 0.","sig":null,"attributes":[{"value":"/ A distribution to sample floating point numbers uniformly in the half-open","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/float.rs","byte_start":107799,"byte_end":107877,"line_start":20,"line_end":20,"column_start":1,"column_end":79}},{"value":"/ interval `(0, 1]`, i.e. including 1 but not 0.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/float.rs","byte_start":107878,"byte_end":107928,"line_start":21,"line_end":21,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/float.rs","byte_start":107929,"byte_end":107932,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ All values that can be generated are of the form `n * ε/2`. For `f32`","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/float.rs","byte_start":107933,"byte_end":108007,"line_start":23,"line_end":23,"column_start":1,"column_end":74}},{"value":"/ the 24 most significant random bits of a `u32` are used and for `f64` the","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/float.rs","byte_start":108008,"byte_end":108085,"line_start":24,"line_end":24,"column_start":1,"column_end":78}},{"value":"/ 53 most significant bits of a `u64` are used. The conversion uses the","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/float.rs","byte_start":108086,"byte_end":108159,"line_start":25,"line_end":25,"column_start":1,"column_end":74}},{"value":"/ multiplicative method.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/float.rs","byte_start":108160,"byte_end":108186,"line_start":26,"line_end":26,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/float.rs","byte_start":108187,"byte_end":108190,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ See also: [`Standard`] which samples from `[0, 1)`, [`Open01`]","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/float.rs","byte_start":108191,"byte_end":108257,"line_start":28,"line_end":28,"column_start":1,"column_end":67}},{"value":"/ which samples from `(0, 1)` and [`Uniform`] which samples from arbitrary","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/float.rs","byte_start":108258,"byte_end":108334,"line_start":29,"line_end":29,"column_start":1,"column_end":77}},{"value":"/ ranges.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/float.rs","byte_start":108335,"byte_end":108346,"line_start":30,"line_end":30,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/float.rs","byte_start":108347,"byte_end":108350,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/float.rs","byte_start":108351,"byte_end":108364,"line_start":32,"line_end":32,"column_start":1,"column_end":14}},{"value":"/ ```","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/float.rs","byte_start":108365,"byte_end":108372,"line_start":33,"line_end":33,"column_start":1,"column_end":8}},{"value":"/ use rand::{thread_rng, Rng};","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/float.rs","byte_start":108373,"byte_end":108405,"line_start":34,"line_end":34,"column_start":1,"column_end":33}},{"value":"/ use rand::distributions::OpenClosed01;","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/float.rs","byte_start":108406,"byte_end":108448,"line_start":35,"line_end":35,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/float.rs","byte_start":108449,"byte_end":108452,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ let val: f32 = thread_rng().sample(OpenClosed01);","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/float.rs","byte_start":108453,"byte_end":108506,"line_start":37,"line_end":37,"column_start":1,"column_end":54}},{"value":"/ println!(\"f32 from (0, 1): {}\", val);","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/float.rs","byte_start":108507,"byte_end":108548,"line_start":38,"line_end":38,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/float.rs","byte_start":108549,"byte_end":108556,"line_start":39,"line_end":39,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/float.rs","byte_start":108557,"byte_end":108560,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ [`Standard`]: crate::distributions::Standard","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/float.rs","byte_start":108561,"byte_end":108609,"line_start":41,"line_end":41,"column_start":1,"column_end":49}},{"value":"/ [`Open01`]: crate::distributions::Open01","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/float.rs","byte_start":108610,"byte_end":108654,"line_start":42,"line_end":42,"column_start":1,"column_end":45}},{"value":"/ [`Uniform`]: crate::distributions::uniform::Uniform","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/float.rs","byte_start":108655,"byte_end":108710,"line_start":43,"line_end":43,"column_start":1,"column_end":56}}]},{"kind":"Struct","id":{"krate":0,"index":1167},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/float.rs","byte_start":109823,"byte_end":109829,"line_start":73,"line_end":73,"column_start":12,"column_end":18},"name":"Open01","qualname":"::distributions::float::Open01","value":"","parent":null,"children":[],"decl_id":null,"docs":" A distribution to sample floating point numbers uniformly in the open\n interval `(0, 1)`, i.e. not including either endpoint.","sig":null,"attributes":[{"value":"/ A distribution to sample floating point numbers uniformly in the open","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/float.rs","byte_start":108831,"byte_end":108904,"line_start":48,"line_end":48,"column_start":1,"column_end":74}},{"value":"/ interval `(0, 1)`, i.e. not including either endpoint.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/float.rs","byte_start":108905,"byte_end":108963,"line_start":49,"line_end":49,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/float.rs","byte_start":108964,"byte_end":108967,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ All values that can be generated are of the form `n * ε + ε/2`. For `f32`","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/float.rs","byte_start":108968,"byte_end":109047,"line_start":51,"line_end":51,"column_start":1,"column_end":78}},{"value":"/ the 23 most significant random bits of an `u32` are used, for `f64` 52 from","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/float.rs","byte_start":109048,"byte_end":109127,"line_start":52,"line_end":52,"column_start":1,"column_end":80}},{"value":"/ an `u64`. The conversion uses a transmute-based method.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/float.rs","byte_start":109128,"byte_end":109187,"line_start":53,"line_end":53,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/float.rs","byte_start":109188,"byte_end":109191,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ See also: [`Standard`] which samples from `[0, 1)`, [`OpenClosed01`]","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/float.rs","byte_start":109192,"byte_end":109264,"line_start":55,"line_end":55,"column_start":1,"column_end":73}},{"value":"/ which samples from `(0, 1]` and [`Uniform`] which samples from arbitrary","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/float.rs","byte_start":109265,"byte_end":109341,"line_start":56,"line_end":56,"column_start":1,"column_end":77}},{"value":"/ ranges.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/float.rs","byte_start":109342,"byte_end":109353,"line_start":57,"line_end":57,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/float.rs","byte_start":109354,"byte_end":109357,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/float.rs","byte_start":109358,"byte_end":109371,"line_start":59,"line_end":59,"column_start":1,"column_end":14}},{"value":"/ ```","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/float.rs","byte_start":109372,"byte_end":109379,"line_start":60,"line_end":60,"column_start":1,"column_end":8}},{"value":"/ use rand::{thread_rng, Rng};","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/float.rs","byte_start":109380,"byte_end":109412,"line_start":61,"line_end":61,"column_start":1,"column_end":33}},{"value":"/ use rand::distributions::Open01;","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/float.rs","byte_start":109413,"byte_end":109449,"line_start":62,"line_end":62,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/float.rs","byte_start":109450,"byte_end":109453,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ let val: f32 = thread_rng().sample(Open01);","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/float.rs","byte_start":109454,"byte_end":109501,"line_start":64,"line_end":64,"column_start":1,"column_end":48}},{"value":"/ println!(\"f32 from (0, 1): {}\", val);","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/float.rs","byte_start":109502,"byte_end":109543,"line_start":65,"line_end":65,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/float.rs","byte_start":109544,"byte_end":109551,"line_start":66,"line_end":66,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/float.rs","byte_start":109552,"byte_end":109555,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ [`Standard`]: crate::distributions::Standard","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/float.rs","byte_start":109556,"byte_end":109604,"line_start":68,"line_end":68,"column_start":1,"column_end":49}},{"value":"/ [`OpenClosed01`]: crate::distributions::OpenClosed01","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/float.rs","byte_start":109605,"byte_end":109661,"line_start":69,"line_end":69,"column_start":1,"column_end":57}},{"value":"/ [`Uniform`]: crate::distributions::uniform::Uniform","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/float.rs","byte_start":109662,"byte_end":109717,"line_start":70,"line_end":70,"column_start":1,"column_end":56}}]},{"kind":"Trait","id":{"krate":0,"index":202},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/float.rs","byte_start":109939,"byte_end":109948,"line_start":78,"line_end":78,"column_start":11,"column_end":20},"name":"IntoFloat","qualname":"::distributions::float::IntoFloat","value":"IntoFloat","parent":null,"children":[{"krate":0,"index":203},{"krate":0,"index":204}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":203},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/float.rs","byte_start":109960,"byte_end":109961,"line_start":79,"line_end":79,"column_start":10,"column_end":11},"name":"F","qualname":"::distributions::float::IntoFloat::F","value":"type F;","parent":{"krate":0,"index":202},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":204},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/float.rs","byte_start":110363,"byte_end":110387,"line_start":89,"line_end":89,"column_start":8,"column_end":32},"name":"into_float_with_exponent","qualname":"::distributions::float::IntoFloat::into_float_with_exponent","value":"pub fn into_float_with_exponent(Self, i32) -> Self::F","parent":{"krate":0,"index":202},"children":[],"decl_id":null,"docs":" Helper method to combine the fraction and a contant exponent into a\n float.","sig":null,"attributes":[{"value":"/ Helper method to combine the fraction and a contant exponent into a","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/float.rs","byte_start":109968,"byte_end":110039,"line_start":81,"line_end":81,"column_start":5,"column_end":76}},{"value":"/ float.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/float.rs","byte_start":110044,"byte_end":110054,"line_start":82,"line_end":82,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/float.rs","byte_start":110059,"byte_end":110062,"line_start":83,"line_end":83,"column_start":5,"column_end":8}},{"value":"/ Only the least significant bits of `self` may be set, 23 for `f32` and","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/float.rs","byte_start":110067,"byte_end":110141,"line_start":84,"line_end":84,"column_start":5,"column_end":79}},{"value":"/ 52 for `f64`.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/float.rs","byte_start":110146,"byte_end":110163,"line_start":85,"line_end":85,"column_start":5,"column_end":22}},{"value":"/ The resulting value will fall in a range that depends on the exponent.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/float.rs","byte_start":110168,"byte_end":110242,"line_start":86,"line_end":86,"column_start":5,"column_end":79}},{"value":"/ As an example the range with exponent 0 will be","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/float.rs","byte_start":110247,"byte_end":110298,"line_start":87,"line_end":87,"column_start":5,"column_end":56}},{"value":"/ [2<sup>0</sup>..2<sup>1</sup>), which is [1..2).","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/float.rs","byte_start":110303,"byte_end":110355,"line_start":88,"line_end":88,"column_start":5,"column_end":57}}]},{"kind":"Mod","id":{"krate":0,"index":206},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":11817,"byte_end":11830,"line_start":121,"line_end":121,"column_start":9,"column_end":22},"name":"hidden_export","qualname":"::distributions::hidden_export","value":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","parent":null,"children":[{"krate":0,"index":207}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1236},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/other.rs","byte_start":130891,"byte_end":130903,"line_start":59,"line_end":59,"column_start":12,"column_end":24},"name":"Alphanumeric","qualname":"::distributions::other::Alphanumeric","value":"","parent":null,"children":[],"decl_id":null,"docs":" Sample a `u8`, uniformly distributed over ASCII letters and numbers:\n a-z, A-Z and 0-9.","sig":null,"attributes":[{"value":"/ Sample a `u8`, uniformly distributed over ASCII letters and numbers:","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/other.rs","byte_start":129439,"byte_end":129511,"line_start":22,"line_end":22,"column_start":1,"column_end":73}},{"value":"/ a-z, A-Z and 0-9.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/other.rs","byte_start":129512,"byte_end":129533,"line_start":23,"line_end":23,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/other.rs","byte_start":129534,"byte_end":129537,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/other.rs","byte_start":129538,"byte_end":129551,"line_start":25,"line_end":25,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/other.rs","byte_start":129552,"byte_end":129555,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/other.rs","byte_start":129556,"byte_end":129563,"line_start":27,"line_end":27,"column_start":1,"column_end":8}},{"value":"/ use std::iter;","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/other.rs","byte_start":129564,"byte_end":129582,"line_start":28,"line_end":28,"column_start":1,"column_end":19}},{"value":"/ use rand::{Rng, thread_rng};","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/other.rs","byte_start":129583,"byte_end":129615,"line_start":29,"line_end":29,"column_start":1,"column_end":33}},{"value":"/ use rand::distributions::Alphanumeric;","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/other.rs","byte_start":129616,"byte_end":129658,"line_start":30,"line_end":30,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/other.rs","byte_start":129659,"byte_end":129662,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/other.rs","byte_start":129663,"byte_end":129694,"line_start":32,"line_end":32,"column_start":1,"column_end":32}},{"value":"/ let chars: String = iter::repeat(())","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/other.rs","byte_start":129695,"byte_end":129735,"line_start":33,"line_end":33,"column_start":1,"column_end":41}},{"value":"/         .map(|()| rng.sample(Alphanumeric))","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/other.rs","byte_start":129736,"byte_end":129783,"line_start":34,"line_end":34,"column_start":1,"column_end":48}},{"value":"/         .map(char::from)","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/other.rs","byte_start":129784,"byte_end":129812,"line_start":35,"line_end":35,"column_start":1,"column_end":29}},{"value":"/         .take(7)","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/other.rs","byte_start":129813,"byte_end":129833,"line_start":36,"line_end":36,"column_start":1,"column_end":21}},{"value":"/         .collect();","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/other.rs","byte_start":129834,"byte_end":129857,"line_start":37,"line_end":37,"column_start":1,"column_end":24}},{"value":"/ println!(\"Random chars: {}\", chars);","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/other.rs","byte_start":129858,"byte_end":129898,"line_start":38,"line_end":38,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/other.rs","byte_start":129899,"byte_end":129906,"line_start":39,"line_end":39,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/other.rs","byte_start":129907,"byte_end":129910,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ # Passwords","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/other.rs","byte_start":129911,"byte_end":129926,"line_start":41,"line_end":41,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/other.rs","byte_start":129927,"byte_end":129930,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ Users sometimes ask whether it is safe to use a string of random characters","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/other.rs","byte_start":129931,"byte_end":130010,"line_start":43,"line_end":43,"column_start":1,"column_end":80}},{"value":"/ as a password. In principle, all RNGs in Rand implementing `CryptoRng` are","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/other.rs","byte_start":130011,"byte_end":130089,"line_start":44,"line_end":44,"column_start":1,"column_end":79}},{"value":"/ suitable as a source of randomness for generating passwords (if they are","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/other.rs","byte_start":130090,"byte_end":130166,"line_start":45,"line_end":45,"column_start":1,"column_end":77}},{"value":"/ properly seeded), but it is more conservative to only use randomness","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/other.rs","byte_start":130167,"byte_end":130239,"line_start":46,"line_end":46,"column_start":1,"column_end":73}},{"value":"/ directly from the operating system via the `getrandom` crate, or the","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/other.rs","byte_start":130240,"byte_end":130312,"line_start":47,"line_end":47,"column_start":1,"column_end":73}},{"value":"/ corresponding bindings of a crypto library.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/other.rs","byte_start":130313,"byte_end":130360,"line_start":48,"line_end":48,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/other.rs","byte_start":130361,"byte_end":130364,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ When generating passwords or keys, it is important to consider the threat","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/other.rs","byte_start":130365,"byte_end":130442,"line_start":50,"line_end":50,"column_start":1,"column_end":78}},{"value":"/ model and in some cases the memorability of the password. This is out of","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/other.rs","byte_start":130443,"byte_end":130519,"line_start":51,"line_end":51,"column_start":1,"column_end":77}},{"value":"/ scope of the Rand project, and therefore we defer to the following","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/other.rs","byte_start":130520,"byte_end":130590,"line_start":52,"line_end":52,"column_start":1,"column_end":71}},{"value":"/ references:","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/other.rs","byte_start":130591,"byte_end":130606,"line_start":53,"line_end":53,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/other.rs","byte_start":130607,"byte_end":130610,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ - [Wikipedia article on Password Strength](https://en.wikipedia.org/wiki/Password_strength)","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/other.rs","byte_start":130611,"byte_end":130706,"line_start":55,"line_end":55,"column_start":1,"column_end":96}},{"value":"/ - [Diceware for generating memorable passwords](https://en.wikipedia.org/wiki/Diceware)","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/other.rs","byte_start":130707,"byte_end":130798,"line_start":56,"line_end":56,"column_start":1,"column_end":92}}]},{"kind":"Type","id":{"krate":0,"index":276},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/utils.rs","byte_start":139196,"byte_end":139202,"line_start":15,"line_end":15,"column_start":10,"column_end":16},"name":"Output","qualname":"::distributions::utils::WideningMultiply::Output","value":"type Output;","parent":{"krate":0,"index":274},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":285},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/utils.rs","byte_start":146196,"byte_end":146200,"line_start":220,"line_end":220,"column_start":10,"column_end":14},"name":"Mask","qualname":"::distributions::utils::FloatSIMDUtils::Mask","value":"type Mask;","parent":{"krate":0,"index":281},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":290},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/utils.rs","byte_start":146715,"byte_end":146719,"line_start":232,"line_end":232,"column_start":10,"column_end":14},"name":"UInt","qualname":"::distributions::utils::FloatSIMDUtils::UInt","value":"type UInt;","parent":{"krate":0,"index":281},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":310},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":12951,"byte_end":12963,"line_start":146,"line_end":146,"column_start":11,"column_end":23},"name":"Distribution","qualname":"::distributions::Distribution","value":"Distribution<T>","parent":null,"children":[{"krate":0,"index":312},{"krate":0,"index":314}],"decl_id":null,"docs":" Types (distributions) that can be used to create a random instance of `T`.","sig":null,"attributes":[{"value":"/ Types (distributions) that can be used to create a random instance of `T`.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":11930,"byte_end":12008,"line_start":128,"line_end":128,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":12009,"byte_end":12012,"line_start":129,"line_end":129,"column_start":1,"column_end":4}},{"value":"/ It is possible to sample from a distribution through both the","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":12013,"byte_end":12078,"line_start":130,"line_end":130,"column_start":1,"column_end":66}},{"value":"/ `Distribution` and [`Rng`] traits, via `distr.sample(&mut rng)` and","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":12079,"byte_end":12150,"line_start":131,"line_end":131,"column_start":1,"column_end":72}},{"value":"/ `rng.sample(distr)`. They also both offer the [`sample_iter`] method, which","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":12151,"byte_end":12230,"line_start":132,"line_end":132,"column_start":1,"column_end":80}},{"value":"/ produces an iterator that samples from the distribution.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":12231,"byte_end":12291,"line_start":133,"line_end":133,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":12292,"byte_end":12295,"line_start":134,"line_end":134,"column_start":1,"column_end":4}},{"value":"/ All implementations are expected to be immutable; this has the significant","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":12296,"byte_end":12374,"line_start":135,"line_end":135,"column_start":1,"column_end":79}},{"value":"/ advantage of not needing to consider thread safety, and for most","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":12375,"byte_end":12443,"line_start":136,"line_end":136,"column_start":1,"column_end":69}},{"value":"/ distributions efficient state-less sampling algorithms are available.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":12444,"byte_end":12517,"line_start":137,"line_end":137,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":12518,"byte_end":12521,"line_start":138,"line_end":138,"column_start":1,"column_end":4}},{"value":"/ Implementations are typically expected to be portable with reproducible","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":12522,"byte_end":12597,"line_start":139,"line_end":139,"column_start":1,"column_end":76}},{"value":"/ results when used with a PRNG with fixed seed; see the","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":12598,"byte_end":12656,"line_start":140,"line_end":140,"column_start":1,"column_end":59}},{"value":"/ [portability chapter](https://rust-random.github.io/book/portability.html)","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":12657,"byte_end":12735,"line_start":141,"line_end":141,"column_start":1,"column_end":79}},{"value":"/ of The Rust Rand Book. In some cases this does not apply, e.g. the `usize`","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":12736,"byte_end":12814,"line_start":142,"line_end":142,"column_start":1,"column_end":79}},{"value":"/ type requires different sampling on 32-bit and 64-bit machines.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":12815,"byte_end":12882,"line_start":143,"line_end":143,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":12883,"byte_end":12886,"line_start":144,"line_end":144,"column_start":1,"column_end":4}},{"value":"/ [`sample_iter`]: Distribution::method.sample_iter","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":12887,"byte_end":12940,"line_start":145,"line_end":145,"column_start":1,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":312},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":13057,"byte_end":13063,"line_start":148,"line_end":148,"column_start":8,"column_end":14},"name":"sample","qualname":"::distributions::Distribution::sample","value":"pub fn sample<R: Rng + ?Sized>(&Self, &mut R) -> T","parent":{"krate":0,"index":310},"children":[],"decl_id":null,"docs":" Generate a random value of `T`, using `rng` as the source of randomness.\n","sig":null,"attributes":[{"value":"/ Generate a random value of `T`, using `rng` as the source of randomness.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":12973,"byte_end":13049,"line_start":147,"line_end":147,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":314},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":14357,"byte_end":14368,"line_start":184,"line_end":184,"column_start":8,"column_end":19},"name":"sample_iter","qualname":"::distributions::Distribution::sample_iter","value":"pub fn sample_iter<R>(Self, R) -> DistIter<Self, R, T> where R: Rng,\nSelf: Sized","parent":{"krate":0,"index":310},"children":[],"decl_id":null,"docs":" Create an iterator that generates random values of `T`, using `rng` as\n the source of randomness.","sig":null,"attributes":[{"value":"/ Create an iterator that generates random values of `T`, using `rng` as","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":13112,"byte_end":13186,"line_start":150,"line_end":150,"column_start":5,"column_end":79}},{"value":"/ the source of randomness.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":13191,"byte_end":13220,"line_start":151,"line_end":151,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":13225,"byte_end":13228,"line_start":152,"line_end":152,"column_start":5,"column_end":8}},{"value":"/ Note that this function takes `self` by value. This works since","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":13233,"byte_end":13300,"line_start":153,"line_end":153,"column_start":5,"column_end":72}},{"value":"/ `Distribution<T>` is impl'd for `&D` where `D: Distribution<T>`,","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":13305,"byte_end":13373,"line_start":154,"line_end":154,"column_start":5,"column_end":73}},{"value":"/ however borrowing is not automatic hence `distr.sample_iter(...)` may","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":13378,"byte_end":13451,"line_start":155,"line_end":155,"column_start":5,"column_end":78}},{"value":"/ need to be replaced with `(&distr).sample_iter(...)` to borrow or","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":13456,"byte_end":13525,"line_start":156,"line_end":156,"column_start":5,"column_end":74}},{"value":"/ `(&*distr).sample_iter(...)` to reborrow an existing reference.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":13530,"byte_end":13597,"line_start":157,"line_end":157,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":13602,"byte_end":13605,"line_start":158,"line_end":158,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":13610,"byte_end":13623,"line_start":159,"line_end":159,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":13628,"byte_end":13631,"line_start":160,"line_end":160,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":13636,"byte_end":13643,"line_start":161,"line_end":161,"column_start":5,"column_end":12}},{"value":"/ use rand::thread_rng;","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":13648,"byte_end":13673,"line_start":162,"line_end":162,"column_start":5,"column_end":30}},{"value":"/ use rand::distributions::{Distribution, Alphanumeric, Uniform, Standard};","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":13678,"byte_end":13755,"line_start":163,"line_end":163,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":13760,"byte_end":13763,"line_start":164,"line_end":164,"column_start":5,"column_end":8}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":13768,"byte_end":13799,"line_start":165,"line_end":165,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":13804,"byte_end":13807,"line_start":166,"line_end":166,"column_start":5,"column_end":8}},{"value":"/ // Vec of 16 x f32:","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":13812,"byte_end":13835,"line_start":167,"line_end":167,"column_start":5,"column_end":28}},{"value":"/ let v: Vec<f32> = Standard.sample_iter(&mut rng).take(16).collect();","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":13840,"byte_end":13912,"line_start":168,"line_end":168,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":13917,"byte_end":13920,"line_start":169,"line_end":169,"column_start":5,"column_end":8}},{"value":"/ // String:","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":13925,"byte_end":13939,"line_start":170,"line_end":170,"column_start":5,"column_end":19}},{"value":"/ let s: String = Alphanumeric","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":13944,"byte_end":13976,"line_start":171,"line_end":171,"column_start":5,"column_end":37}},{"value":"/     .sample_iter(&mut rng)","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":13981,"byte_end":14011,"line_start":172,"line_end":172,"column_start":5,"column_end":35}},{"value":"/     .take(7)","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":14016,"byte_end":14032,"line_start":173,"line_end":173,"column_start":5,"column_end":21}},{"value":"/     .map(char::from)","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":14037,"byte_end":14061,"line_start":174,"line_end":174,"column_start":5,"column_end":29}},{"value":"/     .collect();","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":14066,"byte_end":14085,"line_start":175,"line_end":175,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":14090,"byte_end":14093,"line_start":176,"line_end":176,"column_start":5,"column_end":8}},{"value":"/ // Dice-rolling:","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":14098,"byte_end":14118,"line_start":177,"line_end":177,"column_start":5,"column_end":25}},{"value":"/ let die_range = Uniform::new_inclusive(1, 6);","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":14123,"byte_end":14172,"line_start":178,"line_end":178,"column_start":5,"column_end":54}},{"value":"/ let mut roll_die = die_range.sample_iter(&mut rng);","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":14177,"byte_end":14232,"line_start":179,"line_end":179,"column_start":5,"column_end":60}},{"value":"/ while roll_die.next().unwrap() != 6 {","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":14237,"byte_end":14278,"line_start":180,"line_end":180,"column_start":5,"column_end":46}},{"value":"/     println!(\"Not a 6; rolling again!\");","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":14283,"byte_end":14327,"line_start":181,"line_end":181,"column_start":5,"column_end":49}},{"value":"/ }","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":14332,"byte_end":14337,"line_start":182,"line_end":182,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":14342,"byte_end":14349,"line_start":183,"line_end":183,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":1603},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":15066,"byte_end":15074,"line_start":212,"line_end":212,"column_start":12,"column_end":20},"name":"DistIter","qualname":"::distributions::DistIter","value":"DistIter {  }","parent":null,"children":[{"krate":0,"index":1607},{"krate":0,"index":1608},{"krate":0,"index":1609}],"decl_id":null,"docs":" An iterator that generates random values of `T` with distribution `D`,\n using `R` as the source of randomness.","sig":null,"attributes":[{"value":"/ An iterator that generates random values of `T` with distribution `D`,","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":14749,"byte_end":14823,"line_start":204,"line_end":204,"column_start":1,"column_end":75}},{"value":"/ using `R` as the source of randomness.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":14824,"byte_end":14866,"line_start":205,"line_end":205,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":14867,"byte_end":14870,"line_start":206,"line_end":206,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`sample_iter`] method on [`Distribution`].","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":14871,"byte_end":14950,"line_start":207,"line_end":207,"column_start":1,"column_end":80}},{"value":"/ See its documentation for more.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":14951,"byte_end":14986,"line_start":208,"line_end":208,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":14987,"byte_end":14990,"line_start":209,"line_end":209,"column_start":1,"column_end":4}},{"value":"/ [`sample_iter`]: Distribution::sample_iter","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":14991,"byte_end":15037,"line_start":210,"line_end":210,"column_start":1,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":1615},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":19259,"byte_end":19267,"line_start":332,"line_end":332,"column_start":12,"column_end":20},"name":"Standard","qualname":"::distributions::Standard","value":"","parent":null,"children":[],"decl_id":null,"docs":" A generic random value distribution, implemented for many primitive types.\n Usually generates values with a numerically uniform distribution, and with a\n range appropriate to the type.","sig":null,"attributes":[{"value":"/ A generic random value distribution, implemented for many primitive types.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":15958,"byte_end":16036,"line_start":254,"line_end":254,"column_start":1,"column_end":79}},{"value":"/ Usually generates values with a numerically uniform distribution, and with a","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":16037,"byte_end":16117,"line_start":255,"line_end":255,"column_start":1,"column_end":81}},{"value":"/ range appropriate to the type.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":16118,"byte_end":16152,"line_start":256,"line_end":256,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":16153,"byte_end":16156,"line_start":257,"line_end":257,"column_start":1,"column_end":4}},{"value":"/ ## Provided implementations","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":16157,"byte_end":16188,"line_start":258,"line_end":258,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":16189,"byte_end":16192,"line_start":259,"line_end":259,"column_start":1,"column_end":4}},{"value":"/ Assuming the provided `Rng` is well-behaved, these implementations","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":16193,"byte_end":16263,"line_start":260,"line_end":260,"column_start":1,"column_end":71}},{"value":"/ generate values with the following ranges and distributions:","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":16264,"byte_end":16328,"line_start":261,"line_end":261,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":16329,"byte_end":16332,"line_start":262,"line_end":262,"column_start":1,"column_end":4}},{"value":"/ * Integers (`i32`, `u32`, `isize`, `usize`, etc.): Uniformly distributed","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":16333,"byte_end":16409,"line_start":263,"line_end":263,"column_start":1,"column_end":77}},{"value":"/   over all values of the type.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":16410,"byte_end":16444,"line_start":264,"line_end":264,"column_start":1,"column_end":35}},{"value":"/ * `char`: Uniformly distributed over all Unicode scalar values, i.e. all","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":16445,"byte_end":16521,"line_start":265,"line_end":265,"column_start":1,"column_end":77}},{"value":"/   code points in the range `0...0x10_FFFF`, except for the range","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":16522,"byte_end":16590,"line_start":266,"line_end":266,"column_start":1,"column_end":69}},{"value":"/   `0xD800...0xDFFF` (the surrogate code points). This includes","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":16591,"byte_end":16657,"line_start":267,"line_end":267,"column_start":1,"column_end":67}},{"value":"/   unassigned/reserved code points.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":16658,"byte_end":16696,"line_start":268,"line_end":268,"column_start":1,"column_end":39}},{"value":"/ * `bool`: Generates `false` or `true`, each with probability 0.5.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":16697,"byte_end":16766,"line_start":269,"line_end":269,"column_start":1,"column_end":70}},{"value":"/ * Floating point types (`f32` and `f64`): Uniformly distributed in the","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":16767,"byte_end":16841,"line_start":270,"line_end":270,"column_start":1,"column_end":75}},{"value":"/   half-open range `[0, 1)`. See notes below.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":16842,"byte_end":16890,"line_start":271,"line_end":271,"column_start":1,"column_end":49}},{"value":"/ * Wrapping integers (`Wrapping<T>`), besides the type identical to their","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":16891,"byte_end":16967,"line_start":272,"line_end":272,"column_start":1,"column_end":77}},{"value":"/   normal integer variants.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":16968,"byte_end":16998,"line_start":273,"line_end":273,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":16999,"byte_end":17002,"line_start":274,"line_end":274,"column_start":1,"column_end":4}},{"value":"/ The `Standard` distribution also supports generation of the following","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":17003,"byte_end":17076,"line_start":275,"line_end":275,"column_start":1,"column_end":74}},{"value":"/ compound types where all component types are supported:","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":17077,"byte_end":17136,"line_start":276,"line_end":276,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":17137,"byte_end":17140,"line_start":277,"line_end":277,"column_start":1,"column_end":4}},{"value":"/ *   Tuples (up to 12 elements): each element is generated sequentially.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":17141,"byte_end":17216,"line_start":278,"line_end":278,"column_start":1,"column_end":76}},{"value":"/ *   Arrays (up to 32 elements): each element is generated sequentially;","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":17217,"byte_end":17292,"line_start":279,"line_end":279,"column_start":1,"column_end":76}},{"value":"/     see also [`Rng::fill`] which supports arbitrary array length for integer","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":17293,"byte_end":17373,"line_start":280,"line_end":280,"column_start":1,"column_end":81}},{"value":"/     types and tends to be faster for `u32` and smaller types.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":17374,"byte_end":17439,"line_start":281,"line_end":281,"column_start":1,"column_end":66}},{"value":"/ *   `Option<T>` first generates a `bool`, and if true generates and returns","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":17440,"byte_end":17519,"line_start":282,"line_end":282,"column_start":1,"column_end":80}},{"value":"/     `Some(value)` where `value: T`, otherwise returning `None`.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":17520,"byte_end":17587,"line_start":283,"line_end":283,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":17588,"byte_end":17591,"line_start":284,"line_end":284,"column_start":1,"column_end":4}},{"value":"/ ## Custom implementations","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":17592,"byte_end":17621,"line_start":285,"line_end":285,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":17622,"byte_end":17625,"line_start":286,"line_end":286,"column_start":1,"column_end":4}},{"value":"/ The [`Standard`] distribution may be implemented for user types as follows:","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":17626,"byte_end":17705,"line_start":287,"line_end":287,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":17706,"byte_end":17709,"line_start":288,"line_end":288,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":17710,"byte_end":17717,"line_start":289,"line_end":289,"column_start":1,"column_end":8}},{"value":"/ # #![allow(dead_code)]","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":17718,"byte_end":17744,"line_start":290,"line_end":290,"column_start":1,"column_end":27}},{"value":"/ use rand::Rng;","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":17745,"byte_end":17763,"line_start":291,"line_end":291,"column_start":1,"column_end":19}},{"value":"/ use rand::distributions::{Distribution, Standard};","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":17764,"byte_end":17818,"line_start":292,"line_end":292,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":17819,"byte_end":17822,"line_start":293,"line_end":293,"column_start":1,"column_end":4}},{"value":"/ struct MyF32 {","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":17823,"byte_end":17841,"line_start":294,"line_end":294,"column_start":1,"column_end":19}},{"value":"/     x: f32,","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":17842,"byte_end":17857,"line_start":295,"line_end":295,"column_start":1,"column_end":16}},{"value":"/ }","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":17858,"byte_end":17863,"line_start":296,"line_end":296,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":17864,"byte_end":17867,"line_start":297,"line_end":297,"column_start":1,"column_end":4}},{"value":"/ impl Distribution<MyF32> for Standard {","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":17868,"byte_end":17911,"line_start":298,"line_end":298,"column_start":1,"column_end":44}},{"value":"/     fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> MyF32 {","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":17912,"byte_end":17977,"line_start":299,"line_end":299,"column_start":1,"column_end":66}},{"value":"/         MyF32 { x: rng.gen() }","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":17978,"byte_end":18012,"line_start":300,"line_end":300,"column_start":1,"column_end":35}},{"value":"/     }","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":18013,"byte_end":18022,"line_start":301,"line_end":301,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":18023,"byte_end":18028,"line_start":302,"line_end":302,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":18029,"byte_end":18036,"line_start":303,"line_end":303,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":18037,"byte_end":18040,"line_start":304,"line_end":304,"column_start":1,"column_end":4}},{"value":"/ ## Example usage","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":18041,"byte_end":18061,"line_start":305,"line_end":305,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":18062,"byte_end":18069,"line_start":306,"line_end":306,"column_start":1,"column_end":8}},{"value":"/ use rand::prelude::*;","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":18070,"byte_end":18095,"line_start":307,"line_end":307,"column_start":1,"column_end":26}},{"value":"/ use rand::distributions::Standard;","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":18096,"byte_end":18134,"line_start":308,"line_end":308,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":18135,"byte_end":18138,"line_start":309,"line_end":309,"column_start":1,"column_end":4}},{"value":"/ let val: f32 = StdRng::from_entropy().sample(Standard);","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":18139,"byte_end":18198,"line_start":310,"line_end":310,"column_start":1,"column_end":60}},{"value":"/ println!(\"f32 from [0, 1): {}\", val);","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":18199,"byte_end":18240,"line_start":311,"line_end":311,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":18241,"byte_end":18248,"line_start":312,"line_end":312,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":18249,"byte_end":18252,"line_start":313,"line_end":313,"column_start":1,"column_end":4}},{"value":"/ # Floating point implementation","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":18253,"byte_end":18288,"line_start":314,"line_end":314,"column_start":1,"column_end":36}},{"value":"/ The floating point implementations for `Standard` generate a random value in","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":18289,"byte_end":18369,"line_start":315,"line_end":315,"column_start":1,"column_end":81}},{"value":"/ the half-open interval `[0, 1)`, i.e. including 0 but not 1.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":18370,"byte_end":18434,"line_start":316,"line_end":316,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":18435,"byte_end":18438,"line_start":317,"line_end":317,"column_start":1,"column_end":4}},{"value":"/ All values that can be generated are of the form `n * ε/2`. For `f32`","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":18439,"byte_end":18513,"line_start":318,"line_end":318,"column_start":1,"column_end":74}},{"value":"/ the 24 most significant random bits of a `u32` are used and for `f64` the","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":18514,"byte_end":18591,"line_start":319,"line_end":319,"column_start":1,"column_end":78}},{"value":"/ 53 most significant bits of a `u64` are used. The conversion uses the","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":18592,"byte_end":18665,"line_start":320,"line_end":320,"column_start":1,"column_end":74}},{"value":"/ multiplicative method: `(rng.gen::<$uty>() >> N) as $ty * (ε/2)`.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":18666,"byte_end":18736,"line_start":321,"line_end":321,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":18737,"byte_end":18740,"line_start":322,"line_end":322,"column_start":1,"column_end":4}},{"value":"/ See also: [`Open01`] which samples from `(0, 1)`, [`OpenClosed01`] which","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":18741,"byte_end":18817,"line_start":323,"line_end":323,"column_start":1,"column_end":77}},{"value":"/ samples from `(0, 1]` and `Rng::gen_range(0..1)` which also samples from","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":18818,"byte_end":18894,"line_start":324,"line_end":324,"column_start":1,"column_end":77}},{"value":"/ `[0, 1)`. Note that `Open01` uses transmute-based methods which yield 1 bit","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":18895,"byte_end":18974,"line_start":325,"line_end":325,"column_start":1,"column_end":80}},{"value":"/ less precision but may perform faster on some architectures (on modern Intel","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":18975,"byte_end":19055,"line_start":326,"line_end":326,"column_start":1,"column_end":81}},{"value":"/ CPUs all methods have approximately equal performance).","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":19056,"byte_end":19115,"line_start":327,"line_end":327,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":19116,"byte_end":19119,"line_start":328,"line_end":328,"column_start":1,"column_end":4}},{"value":"/ [`Uniform`]: uniform::Uniform","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":19120,"byte_end":19153,"line_start":329,"line_end":329,"column_start":1,"column_end":34}}]},{"kind":"Mod","id":{"krate":0,"index":333},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/prelude.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"prelude","qualname":"::prelude","value":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/prelude.rs","parent":null,"children":[{"krate":0,"index":334},{"krate":0,"index":335},{"krate":0,"index":336},{"krate":0,"index":337},{"krate":0,"index":338},{"krate":0,"index":339},{"krate":0,"index":340},{"krate":0,"index":341},{"krate":0,"index":342},{"krate":0,"index":343},{"krate":0,"index":344},{"krate":0,"index":345},{"krate":0,"index":346},{"krate":0,"index":347}],"decl_id":null,"docs":" Convenience re-export of common members","sig":null,"attributes":[{"value":"/ Convenience re-export of common members","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/prelude.rs","byte_start":152657,"byte_end":152700,"line_start":9,"line_end":9,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/prelude.rs","byte_start":152701,"byte_end":152704,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ Like the standard library's prelude, this module simplifies importing of","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/prelude.rs","byte_start":152705,"byte_end":152781,"line_start":11,"line_end":11,"column_start":1,"column_end":77}},{"value":"/ common items. Unlike the standard prelude, the contents of this module must","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/prelude.rs","byte_start":152782,"byte_end":152861,"line_start":12,"line_end":12,"column_start":1,"column_end":80}},{"value":"/ be imported manually:","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/prelude.rs","byte_start":152862,"byte_end":152887,"line_start":13,"line_end":13,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/prelude.rs","byte_start":152888,"byte_end":152891,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/prelude.rs","byte_start":152892,"byte_end":152899,"line_start":15,"line_end":15,"column_start":1,"column_end":8}},{"value":"/ use rand::prelude::*;","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/prelude.rs","byte_start":152900,"byte_end":152925,"line_start":16,"line_end":16,"column_start":1,"column_end":26}},{"value":"/ # let mut r = StdRng::from_rng(thread_rng()).unwrap();","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/prelude.rs","byte_start":152926,"byte_end":152984,"line_start":17,"line_end":17,"column_start":1,"column_end":59}},{"value":"/ # let _: f32 = r.gen();","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/prelude.rs","byte_start":152985,"byte_end":153012,"line_start":18,"line_end":18,"column_start":1,"column_end":28}},{"value":"/ ```","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/prelude.rs","byte_start":153013,"byte_end":153020,"line_start":19,"line_end":19,"column_start":1,"column_end":8}}]},{"kind":"Trait","id":{"krate":0,"index":363},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":155746,"byte_end":155749,"line_start":55,"line_end":55,"column_start":11,"column_end":14},"name":"Rng","qualname":"::rng::Rng","value":"Rng: RngCore","parent":null,"children":[{"krate":0,"index":364},{"krate":0,"index":366},{"krate":0,"index":369},{"krate":0,"index":372},{"krate":0,"index":375},{"krate":0,"index":378},{"krate":0,"index":380},{"krate":0,"index":381}],"decl_id":null,"docs":" An automatically-implemented extension trait on [`RngCore`] providing high-level\n generic methods for sampling values and other convenience methods.","sig":null,"attributes":[{"value":"/ An automatically-implemented extension trait on [`RngCore`] providing high-level","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":154219,"byte_end":154303,"line_start":18,"line_end":18,"column_start":1,"column_end":85}},{"value":"/ generic methods for sampling values and other convenience methods.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":154304,"byte_end":154374,"line_start":19,"line_end":19,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":154375,"byte_end":154378,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ This is the primary trait to use when generating random values.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":154379,"byte_end":154446,"line_start":21,"line_end":21,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":154447,"byte_end":154450,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ # Generic usage","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":154451,"byte_end":154470,"line_start":23,"line_end":23,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":154471,"byte_end":154474,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ The basic pattern is `fn foo<R: Rng + ?Sized>(rng: &mut R)`. Some","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":154475,"byte_end":154544,"line_start":25,"line_end":25,"column_start":1,"column_end":70}},{"value":"/ things are worth noting here:","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":154545,"byte_end":154578,"line_start":26,"line_end":26,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":154579,"byte_end":154582,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ - Since `Rng: RngCore` and every `RngCore` implements `Rng`, it makes no","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":154583,"byte_end":154659,"line_start":28,"line_end":28,"column_start":1,"column_end":77}},{"value":"/   difference whether we use `R: Rng` or `R: RngCore`.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":154660,"byte_end":154717,"line_start":29,"line_end":29,"column_start":1,"column_end":58}},{"value":"/ - The `+ ?Sized` un-bounding allows functions to be called directly on","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":154718,"byte_end":154792,"line_start":30,"line_end":30,"column_start":1,"column_end":75}},{"value":"/   type-erased references; i.e. `foo(r)` where `r: &mut RngCore`. Without","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":154793,"byte_end":154869,"line_start":31,"line_end":31,"column_start":1,"column_end":77}},{"value":"/   this it would be necessary to write `foo(&mut r)`.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":154870,"byte_end":154926,"line_start":32,"line_end":32,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":154927,"byte_end":154930,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ An alternative pattern is possible: `fn foo<R: Rng>(rng: R)`. This has some","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":154931,"byte_end":155010,"line_start":34,"line_end":34,"column_start":1,"column_end":80}},{"value":"/ trade-offs. It allows the argument to be consumed directly without a `&mut`","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":155011,"byte_end":155090,"line_start":35,"line_end":35,"column_start":1,"column_end":80}},{"value":"/ (which is how `from_rng(thread_rng())` works); also it still works directly","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":155091,"byte_end":155170,"line_start":36,"line_end":36,"column_start":1,"column_end":80}},{"value":"/ on references (including type-erased references). Unfortunately within the","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":155171,"byte_end":155249,"line_start":37,"line_end":37,"column_start":1,"column_end":79}},{"value":"/ function `foo` it is not known whether `rng` is a reference type or not,","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":155250,"byte_end":155326,"line_start":38,"line_end":38,"column_start":1,"column_end":77}},{"value":"/ hence many uses of `rng` require an extra reference, either explicitly","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":155327,"byte_end":155401,"line_start":39,"line_end":39,"column_start":1,"column_end":75}},{"value":"/ (`distr.sample(&mut rng)`) or implicitly (`rng.gen()`); one may hope the","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":155402,"byte_end":155478,"line_start":40,"line_end":40,"column_start":1,"column_end":77}},{"value":"/ optimiser can remove redundant references later.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":155479,"byte_end":155531,"line_start":41,"line_end":41,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":155532,"byte_end":155535,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ Example:","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":155536,"byte_end":155548,"line_start":43,"line_end":43,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":155549,"byte_end":155552,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":155553,"byte_end":155560,"line_start":45,"line_end":45,"column_start":1,"column_end":8}},{"value":"/ # use rand::thread_rng;","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":155561,"byte_end":155588,"line_start":46,"line_end":46,"column_start":1,"column_end":28}},{"value":"/ use rand::Rng;","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":155589,"byte_end":155607,"line_start":47,"line_end":47,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":155608,"byte_end":155611,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ fn foo<R: Rng + ?Sized>(rng: &mut R) -> f32 {","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":155612,"byte_end":155661,"line_start":49,"line_end":49,"column_start":1,"column_end":50}},{"value":"/     rng.gen()","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":155662,"byte_end":155679,"line_start":50,"line_end":50,"column_start":1,"column_end":18}},{"value":"/ }","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":155680,"byte_end":155685,"line_start":51,"line_end":51,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":155686,"byte_end":155689,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ # let v = foo(&mut thread_rng());","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":155690,"byte_end":155727,"line_start":53,"line_end":53,"column_start":1,"column_end":38}},{"value":"/ ```","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":155728,"byte_end":155735,"line_start":54,"line_end":54,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":364},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":156899,"byte_end":156902,"line_start":91,"line_end":91,"column_start":8,"column_end":11},"name":"gen","qualname":"::rng::Rng::gen","value":"pub fn gen<T>(&mut Self) -> T where Standard: Distribution<T>","parent":{"krate":0,"index":363},"children":[],"decl_id":null,"docs":" Return a random value supporting the [`Standard`] distribution.","sig":null,"attributes":[{"value":"/ Return a random value supporting the [`Standard`] distribution.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":155765,"byte_end":155832,"line_start":56,"line_end":56,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":155837,"byte_end":155840,"line_start":57,"line_end":57,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":155845,"byte_end":155858,"line_start":58,"line_end":58,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":155863,"byte_end":155866,"line_start":59,"line_end":59,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":155871,"byte_end":155878,"line_start":60,"line_end":60,"column_start":5,"column_end":12}},{"value":"/ use rand::{thread_rng, Rng};","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":155883,"byte_end":155915,"line_start":61,"line_end":61,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":155920,"byte_end":155923,"line_start":62,"line_end":62,"column_start":5,"column_end":8}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":155928,"byte_end":155959,"line_start":63,"line_end":63,"column_start":5,"column_end":36}},{"value":"/ let x: u32 = rng.gen();","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":155964,"byte_end":155991,"line_start":64,"line_end":64,"column_start":5,"column_end":32}},{"value":"/ println!(\"{}\", x);","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":155996,"byte_end":156018,"line_start":65,"line_end":65,"column_start":5,"column_end":27}},{"value":"/ println!(\"{:?}\", rng.gen::<(f64, bool)>());","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":156023,"byte_end":156070,"line_start":66,"line_end":66,"column_start":5,"column_end":52}},{"value":"/ ```","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":156075,"byte_end":156082,"line_start":67,"line_end":67,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":156087,"byte_end":156090,"line_start":68,"line_end":68,"column_start":5,"column_end":8}},{"value":"/ # Arrays and tuples","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":156095,"byte_end":156118,"line_start":69,"line_end":69,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":156123,"byte_end":156126,"line_start":70,"line_end":70,"column_start":5,"column_end":8}},{"value":"/ The `rng.gen()` method is able to generate arrays (up to 32 elements)","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":156131,"byte_end":156204,"line_start":71,"line_end":71,"column_start":5,"column_end":78}},{"value":"/ and tuples (up to 12 elements), so long as all element types can be","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":156209,"byte_end":156280,"line_start":72,"line_end":72,"column_start":5,"column_end":76}},{"value":"/ generated.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":156285,"byte_end":156299,"line_start":73,"line_end":73,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":156304,"byte_end":156307,"line_start":74,"line_end":74,"column_start":5,"column_end":8}},{"value":"/ For arrays of integers, especially for those with small element types","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":156312,"byte_end":156385,"line_start":75,"line_end":75,"column_start":5,"column_end":78}},{"value":"/ (< 64 bit), it will likely be faster to instead use [`Rng::fill`].","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":156390,"byte_end":156460,"line_start":76,"line_end":76,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":156465,"byte_end":156468,"line_start":77,"line_end":77,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":156473,"byte_end":156480,"line_start":78,"line_end":78,"column_start":5,"column_end":12}},{"value":"/ use rand::{thread_rng, Rng};","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":156485,"byte_end":156517,"line_start":79,"line_end":79,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":156522,"byte_end":156525,"line_start":80,"line_end":80,"column_start":5,"column_end":8}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":156530,"byte_end":156561,"line_start":81,"line_end":81,"column_start":5,"column_end":36}},{"value":"/ let tuple: (u8, i32, char) = rng.gen(); // arbitrary tuple support","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":156566,"byte_end":156636,"line_start":82,"line_end":82,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":156641,"byte_end":156644,"line_start":83,"line_end":83,"column_start":5,"column_end":8}},{"value":"/ let arr1: [f32; 32] = rng.gen();        // array construction","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":156649,"byte_end":156714,"line_start":84,"line_end":84,"column_start":5,"column_end":70}},{"value":"/ let mut arr2 = [0u8; 128];","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":156719,"byte_end":156749,"line_start":85,"line_end":85,"column_start":5,"column_end":35}},{"value":"/ rng.fill(&mut arr2);                    // array fill","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":156754,"byte_end":156811,"line_start":86,"line_end":86,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":156816,"byte_end":156823,"line_start":87,"line_end":87,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":156828,"byte_end":156831,"line_start":88,"line_end":88,"column_start":5,"column_end":8}},{"value":"/ [`Standard`]: distributions::Standard","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":156836,"byte_end":156877,"line_start":89,"line_end":89,"column_start":5,"column_end":46}},{"value":"inline","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":156882,"byte_end":156891,"line_start":90,"line_end":90,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":366},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":157937,"byte_end":157946,"line_start":127,"line_end":127,"column_start":8,"column_end":17},"name":"gen_range","qualname":"::rng::Rng::gen_range","value":"pub fn gen_range<T, R>(&mut Self, R) -> T where T: SampleUniform,\nR: SampleRange<T>","parent":{"krate":0,"index":363},"children":[],"decl_id":null,"docs":" Generate a random value in the given range.","sig":null,"attributes":[{"value":"/ Generate a random value in the given range.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":157001,"byte_end":157048,"line_start":96,"line_end":96,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":157053,"byte_end":157056,"line_start":97,"line_end":97,"column_start":5,"column_end":8}},{"value":"/ This function is optimised for the case that only a single sample is","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":157061,"byte_end":157133,"line_start":98,"line_end":98,"column_start":5,"column_end":77}},{"value":"/ made from the given range. See also the [`Uniform`] distribution","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":157138,"byte_end":157206,"line_start":99,"line_end":99,"column_start":5,"column_end":73}},{"value":"/ type which may be faster if sampling from the same range repeatedly.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":157211,"byte_end":157283,"line_start":100,"line_end":100,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":157288,"byte_end":157291,"line_start":101,"line_end":101,"column_start":5,"column_end":8}},{"value":"/ Only `gen_range(low..high)` and `gen_range(low..=high)` are supported.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":157296,"byte_end":157370,"line_start":102,"line_end":102,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":157375,"byte_end":157378,"line_start":103,"line_end":103,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":157383,"byte_end":157395,"line_start":104,"line_end":104,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":157400,"byte_end":157403,"line_start":105,"line_end":105,"column_start":5,"column_end":8}},{"value":"/ Panics if the range is empty.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":157408,"byte_end":157441,"line_start":106,"line_end":106,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":157446,"byte_end":157449,"line_start":107,"line_end":107,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":157454,"byte_end":157467,"line_start":108,"line_end":108,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":157472,"byte_end":157475,"line_start":109,"line_end":109,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":157480,"byte_end":157487,"line_start":110,"line_end":110,"column_start":5,"column_end":12}},{"value":"/ use rand::{thread_rng, Rng};","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":157492,"byte_end":157524,"line_start":111,"line_end":111,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":157529,"byte_end":157532,"line_start":112,"line_end":112,"column_start":5,"column_end":8}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":157537,"byte_end":157568,"line_start":113,"line_end":113,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":157573,"byte_end":157576,"line_start":114,"line_end":114,"column_start":5,"column_end":8}},{"value":"/ // Exclusive range","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":157581,"byte_end":157603,"line_start":115,"line_end":115,"column_start":5,"column_end":27}},{"value":"/ let n: u32 = rng.gen_range(0..10);","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":157608,"byte_end":157646,"line_start":116,"line_end":116,"column_start":5,"column_end":43}},{"value":"/ println!(\"{}\", n);","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":157651,"byte_end":157673,"line_start":117,"line_end":117,"column_start":5,"column_end":27}},{"value":"/ let m: f64 = rng.gen_range(-40.0..1.3e5);","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":157678,"byte_end":157723,"line_start":118,"line_end":118,"column_start":5,"column_end":50}},{"value":"/ println!(\"{}\", m);","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":157728,"byte_end":157750,"line_start":119,"line_end":119,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":157755,"byte_end":157758,"line_start":120,"line_end":120,"column_start":5,"column_end":8}},{"value":"/ // Inclusive range","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":157763,"byte_end":157785,"line_start":121,"line_end":121,"column_start":5,"column_end":27}},{"value":"/ let n: u32 = rng.gen_range(0..=10);","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":157790,"byte_end":157829,"line_start":122,"line_end":122,"column_start":5,"column_end":44}},{"value":"/ println!(\"{}\", n);","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":157834,"byte_end":157856,"line_start":123,"line_end":123,"column_start":5,"column_end":27}},{"value":"/ ```","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":157861,"byte_end":157868,"line_start":124,"line_end":124,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":157873,"byte_end":157876,"line_start":125,"line_end":125,"column_start":5,"column_end":8}},{"value":"/ [`Uniform`]: distributions::uniform::Uniform","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":157881,"byte_end":157929,"line_start":126,"line_end":126,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":369},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":158633,"byte_end":158639,"line_start":150,"line_end":150,"column_start":8,"column_end":14},"name":"sample","qualname":"::rng::Rng::sample","value":"pub fn sample<T, D: Distribution<T>>(&mut Self, D) -> T","parent":{"krate":0,"index":363},"children":[],"decl_id":null,"docs":" Sample a new value, using the given distribution.","sig":null,"attributes":[{"value":"/ Sample a new value, using the given distribution.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":158157,"byte_end":158210,"line_start":136,"line_end":136,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":158215,"byte_end":158218,"line_start":137,"line_end":137,"column_start":5,"column_end":8}},{"value":"/ ### Example","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":158223,"byte_end":158238,"line_start":138,"line_end":138,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":158243,"byte_end":158246,"line_start":139,"line_end":139,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":158251,"byte_end":158258,"line_start":140,"line_end":140,"column_start":5,"column_end":12}},{"value":"/ use rand::{thread_rng, Rng};","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":158263,"byte_end":158295,"line_start":141,"line_end":141,"column_start":5,"column_end":37}},{"value":"/ use rand::distributions::Uniform;","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":158300,"byte_end":158337,"line_start":142,"line_end":142,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":158342,"byte_end":158345,"line_start":143,"line_end":143,"column_start":5,"column_end":8}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":158350,"byte_end":158381,"line_start":144,"line_end":144,"column_start":5,"column_end":36}},{"value":"/ let x = rng.sample(Uniform::new(10u32, 15));","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":158386,"byte_end":158434,"line_start":145,"line_end":145,"column_start":5,"column_end":53}},{"value":"/ // Type annotation requires two types, the type and distribution; the","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":158439,"byte_end":158512,"line_start":146,"line_end":146,"column_start":5,"column_end":78}},{"value":"/ // distribution can be inferred.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":158517,"byte_end":158553,"line_start":147,"line_end":147,"column_start":5,"column_end":41}},{"value":"/ let y = rng.sample::<u16, _>(Uniform::new(10, 15));","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":158558,"byte_end":158613,"line_start":148,"line_end":148,"column_start":5,"column_end":60}},{"value":"/ ```","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":158618,"byte_end":158625,"line_start":149,"line_end":149,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":372},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":160040,"byte_end":160051,"line_start":190,"line_end":190,"column_start":8,"column_end":19},"name":"sample_iter","qualname":"::rng::Rng::sample_iter","value":"pub fn sample_iter<T, D>(Self, D) -> distributions::DistIter<D, Self, T> where\nD: Distribution<T>, Self: Sized","parent":{"krate":0,"index":363},"children":[],"decl_id":null,"docs":" Create an iterator that generates values using the given distribution.","sig":null,"attributes":[{"value":"/ Create an iterator that generates values using the given distribution.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":158729,"byte_end":158803,"line_start":154,"line_end":154,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":158808,"byte_end":158811,"line_start":155,"line_end":155,"column_start":5,"column_end":8}},{"value":"/ Note that this function takes its arguments by value. This works since","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":158816,"byte_end":158890,"line_start":156,"line_end":156,"column_start":5,"column_end":79}},{"value":"/ `(&mut R): Rng where R: Rng` and","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":158895,"byte_end":158931,"line_start":157,"line_end":157,"column_start":5,"column_end":41}},{"value":"/ `(&D): Distribution where D: Distribution`,","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":158936,"byte_end":158983,"line_start":158,"line_end":158,"column_start":5,"column_end":52}},{"value":"/ however borrowing is not automatic hence `rng.sample_iter(...)` may","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":158988,"byte_end":159059,"line_start":159,"line_end":159,"column_start":5,"column_end":76}},{"value":"/ need to be replaced with `(&mut rng).sample_iter(...)`.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":159064,"byte_end":159123,"line_start":160,"line_end":160,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":159128,"byte_end":159131,"line_start":161,"line_end":161,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":159136,"byte_end":159149,"line_start":162,"line_end":162,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":159154,"byte_end":159157,"line_start":163,"line_end":163,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":159162,"byte_end":159169,"line_start":164,"line_end":164,"column_start":5,"column_end":12}},{"value":"/ use rand::{thread_rng, Rng};","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":159174,"byte_end":159206,"line_start":165,"line_end":165,"column_start":5,"column_end":37}},{"value":"/ use rand::distributions::{Alphanumeric, Uniform, Standard};","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":159211,"byte_end":159274,"line_start":166,"line_end":166,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":159279,"byte_end":159282,"line_start":167,"line_end":167,"column_start":5,"column_end":8}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":159287,"byte_end":159318,"line_start":168,"line_end":168,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":159323,"byte_end":159326,"line_start":169,"line_end":169,"column_start":5,"column_end":8}},{"value":"/ // Vec of 16 x f32:","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":159331,"byte_end":159354,"line_start":170,"line_end":170,"column_start":5,"column_end":28}},{"value":"/ let v: Vec<f32> = (&mut rng).sample_iter(Standard).take(16).collect();","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":159359,"byte_end":159433,"line_start":171,"line_end":171,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":159438,"byte_end":159441,"line_start":172,"line_end":172,"column_start":5,"column_end":8}},{"value":"/ // String:","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":159446,"byte_end":159460,"line_start":173,"line_end":173,"column_start":5,"column_end":19}},{"value":"/ let s: String = (&mut rng).sample_iter(Alphanumeric)","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":159465,"byte_end":159521,"line_start":174,"line_end":174,"column_start":5,"column_end":61}},{"value":"/     .take(7)","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":159526,"byte_end":159542,"line_start":175,"line_end":175,"column_start":5,"column_end":21}},{"value":"/     .map(char::from)","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":159547,"byte_end":159571,"line_start":176,"line_end":176,"column_start":5,"column_end":29}},{"value":"/     .collect();","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":159576,"byte_end":159595,"line_start":177,"line_end":177,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":159600,"byte_end":159603,"line_start":178,"line_end":178,"column_start":5,"column_end":8}},{"value":"/ // Combined values","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":159608,"byte_end":159630,"line_start":179,"line_end":179,"column_start":5,"column_end":27}},{"value":"/ println!(\"{:?}\", (&mut rng).sample_iter(Standard).take(5)","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":159635,"byte_end":159696,"line_start":180,"line_end":180,"column_start":5,"column_end":66}},{"value":"/                              .collect::<Vec<(f64, bool)>>());","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":159701,"byte_end":159766,"line_start":181,"line_end":181,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":159771,"byte_end":159774,"line_start":182,"line_end":182,"column_start":5,"column_end":8}},{"value":"/ // Dice-rolling:","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":159779,"byte_end":159799,"line_start":183,"line_end":183,"column_start":5,"column_end":25}},{"value":"/ let die_range = Uniform::new_inclusive(1, 6);","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":159804,"byte_end":159853,"line_start":184,"line_end":184,"column_start":5,"column_end":54}},{"value":"/ let mut roll_die = (&mut rng).sample_iter(die_range);","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":159858,"byte_end":159915,"line_start":185,"line_end":185,"column_start":5,"column_end":62}},{"value":"/ while roll_die.next().unwrap() != 6 {","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":159920,"byte_end":159961,"line_start":186,"line_end":186,"column_start":5,"column_end":46}},{"value":"/     println!(\"Not a 6; rolling again!\");","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":159966,"byte_end":160010,"line_start":187,"line_end":187,"column_start":5,"column_end":49}},{"value":"/ }","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":160015,"byte_end":160020,"line_start":188,"line_end":188,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":160025,"byte_end":160032,"line_start":189,"line_end":189,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":375},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":160785,"byte_end":160789,"line_start":216,"line_end":216,"column_start":8,"column_end":12},"name":"fill","qualname":"::rng::Rng::fill","value":"pub fn fill<T: Fill + ?Sized>(&mut Self, &mut T)","parent":{"krate":0,"index":363},"children":[],"decl_id":null,"docs":" Fill any type implementing [`Fill`] with random data","sig":null,"attributes":[{"value":"/ Fill any type implementing [`Fill`] with random data","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":160221,"byte_end":160277,"line_start":198,"line_end":198,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":160282,"byte_end":160285,"line_start":199,"line_end":199,"column_start":5,"column_end":8}},{"value":"/ The distribution is expected to be uniform with portable results, but","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":160290,"byte_end":160363,"line_start":200,"line_end":200,"column_start":5,"column_end":78}},{"value":"/ this cannot be guaranteed for third-party implementations.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":160368,"byte_end":160430,"line_start":201,"line_end":201,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":160435,"byte_end":160438,"line_start":202,"line_end":202,"column_start":5,"column_end":8}},{"value":"/ This is identical to [`try_fill`] except that it panics on error.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":160443,"byte_end":160512,"line_start":203,"line_end":203,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":160517,"byte_end":160520,"line_start":204,"line_end":204,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":160525,"byte_end":160538,"line_start":205,"line_end":205,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":160543,"byte_end":160546,"line_start":206,"line_end":206,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":160551,"byte_end":160558,"line_start":207,"line_end":207,"column_start":5,"column_end":12}},{"value":"/ use rand::{thread_rng, Rng};","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":160563,"byte_end":160595,"line_start":208,"line_end":208,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":160600,"byte_end":160603,"line_start":209,"line_end":209,"column_start":5,"column_end":8}},{"value":"/ let mut arr = [0i8; 20];","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":160608,"byte_end":160636,"line_start":210,"line_end":210,"column_start":5,"column_end":33}},{"value":"/ thread_rng().fill(&mut arr[..]);","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":160641,"byte_end":160677,"line_start":211,"line_end":211,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":160682,"byte_end":160689,"line_start":212,"line_end":212,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":160694,"byte_end":160697,"line_start":213,"line_end":213,"column_start":5,"column_end":8}},{"value":"/ [`fill_bytes`]: RngCore::fill_bytes","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":160702,"byte_end":160741,"line_start":214,"line_end":214,"column_start":5,"column_end":44}},{"value":"/ [`try_fill`]: Rng::try_fill","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":160746,"byte_end":160777,"line_start":215,"line_end":215,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":378},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":161629,"byte_end":161637,"line_start":244,"line_end":244,"column_start":8,"column_end":16},"name":"try_fill","qualname":"::rng::Rng::try_fill","value":"pub fn try_fill<T: Fill + ?Sized>(&mut Self, &mut T) -> Result<(), Error>","parent":{"krate":0,"index":363},"children":[],"decl_id":null,"docs":" Fill any type implementing [`Fill`] with random data","sig":null,"attributes":[{"value":"/ Fill any type implementing [`Fill`] with random data","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":160921,"byte_end":160977,"line_start":220,"line_end":220,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":160982,"byte_end":160985,"line_start":221,"line_end":221,"column_start":5,"column_end":8}},{"value":"/ The distribution is expected to be uniform with portable results, but","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":160990,"byte_end":161063,"line_start":222,"line_end":222,"column_start":5,"column_end":78}},{"value":"/ this cannot be guaranteed for third-party implementations.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":161068,"byte_end":161130,"line_start":223,"line_end":223,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":161135,"byte_end":161138,"line_start":224,"line_end":224,"column_start":5,"column_end":8}},{"value":"/ This is identical to [`fill`] except that it forwards errors.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":161143,"byte_end":161208,"line_start":225,"line_end":225,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":161213,"byte_end":161216,"line_start":226,"line_end":226,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":161221,"byte_end":161234,"line_start":227,"line_end":227,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":161239,"byte_end":161242,"line_start":228,"line_end":228,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":161247,"byte_end":161254,"line_start":229,"line_end":229,"column_start":5,"column_end":12}},{"value":"/ # use rand::Error;","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":161259,"byte_end":161281,"line_start":230,"line_end":230,"column_start":5,"column_end":27}},{"value":"/ use rand::{thread_rng, Rng};","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":161286,"byte_end":161318,"line_start":231,"line_end":231,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":161323,"byte_end":161326,"line_start":232,"line_end":232,"column_start":5,"column_end":8}},{"value":"/ # fn try_inner() -> Result<(), Error> {","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":161331,"byte_end":161374,"line_start":233,"line_end":233,"column_start":5,"column_end":48}},{"value":"/ let mut arr = [0u64; 4];","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":161379,"byte_end":161407,"line_start":234,"line_end":234,"column_start":5,"column_end":33}},{"value":"/ thread_rng().try_fill(&mut arr[..])?;","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":161412,"byte_end":161453,"line_start":235,"line_end":235,"column_start":5,"column_end":46}},{"value":"/ # Ok(())","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":161458,"byte_end":161470,"line_start":236,"line_end":236,"column_start":5,"column_end":17}},{"value":"/ # }","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":161475,"byte_end":161482,"line_start":237,"line_end":237,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":161487,"byte_end":161490,"line_start":238,"line_end":238,"column_start":5,"column_end":8}},{"value":"/ # try_inner().unwrap()","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":161495,"byte_end":161521,"line_start":239,"line_end":239,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":161526,"byte_end":161533,"line_start":240,"line_end":240,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":161538,"byte_end":161541,"line_start":241,"line_end":241,"column_start":5,"column_end":8}},{"value":"/ [`try_fill_bytes`]: RngCore::try_fill_bytes","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":161546,"byte_end":161593,"line_start":242,"line_end":242,"column_start":5,"column_end":52}},{"value":"/ [`fill`]: Rng::fill","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":161598,"byte_end":161621,"line_start":243,"line_end":243,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":380},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":162263,"byte_end":162271,"line_start":268,"line_end":268,"column_start":8,"column_end":16},"name":"gen_bool","qualname":"::rng::Rng::gen_bool","value":"pub fn gen_bool(&mut Self, f64) -> bool","parent":{"krate":0,"index":363},"children":[],"decl_id":null,"docs":" Return a bool with a probability `p` of being true.","sig":null,"attributes":[{"value":"/ Return a bool with a probability `p` of being true.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":161743,"byte_end":161798,"line_start":248,"line_end":248,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":161803,"byte_end":161806,"line_start":249,"line_end":249,"column_start":5,"column_end":8}},{"value":"/ See also the [`Bernoulli`] distribution, which may be faster if","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":161811,"byte_end":161878,"line_start":250,"line_end":250,"column_start":5,"column_end":72}},{"value":"/ sampling from the same probability repeatedly.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":161883,"byte_end":161933,"line_start":251,"line_end":251,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":161938,"byte_end":161941,"line_start":252,"line_end":252,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":161946,"byte_end":161959,"line_start":253,"line_end":253,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":161964,"byte_end":161967,"line_start":254,"line_end":254,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":161972,"byte_end":161979,"line_start":255,"line_end":255,"column_start":5,"column_end":12}},{"value":"/ use rand::{thread_rng, Rng};","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":161984,"byte_end":162016,"line_start":256,"line_end":256,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":162021,"byte_end":162024,"line_start":257,"line_end":257,"column_start":5,"column_end":8}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":162029,"byte_end":162060,"line_start":258,"line_end":258,"column_start":5,"column_end":36}},{"value":"/ println!(\"{}\", rng.gen_bool(1.0 / 3.0));","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":162065,"byte_end":162109,"line_start":259,"line_end":259,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":162114,"byte_end":162121,"line_start":260,"line_end":260,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":162126,"byte_end":162129,"line_start":261,"line_end":261,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":162134,"byte_end":162146,"line_start":262,"line_end":262,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":162151,"byte_end":162154,"line_start":263,"line_end":263,"column_start":5,"column_end":8}},{"value":"/ If `p < 0` or `p > 1`.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":162159,"byte_end":162185,"line_start":264,"line_end":264,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":162190,"byte_end":162193,"line_start":265,"line_end":265,"column_start":5,"column_end":8}},{"value":"/ [`Bernoulli`]: distributions::Bernoulli","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":162198,"byte_end":162241,"line_start":266,"line_end":266,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":162246,"byte_end":162255,"line_start":267,"line_end":267,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":381},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":163247,"byte_end":163256,"line_start":297,"line_end":297,"column_start":8,"column_end":17},"name":"gen_ratio","qualname":"::rng::Rng::gen_ratio","value":"pub fn gen_ratio(&mut Self, u32, u32) -> bool","parent":{"krate":0,"index":363},"children":[],"decl_id":null,"docs":" Return a bool with a probability of `numerator/denominator` of being\n true. I.e. `gen_ratio(2, 3)` has chance of 2 in 3, or about 67%, of\n returning true. If `numerator == denominator`, then the returned value\n is guaranteed to be `true`. If `numerator == 0`, then the returned\n value is guaranteed to be `false`.","sig":null,"attributes":[{"value":"/ Return a bool with a probability of `numerator/denominator` of being","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":162394,"byte_end":162466,"line_start":273,"line_end":273,"column_start":5,"column_end":77}},{"value":"/ true. I.e. `gen_ratio(2, 3)` has chance of 2 in 3, or about 67%, of","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":162471,"byte_end":162542,"line_start":274,"line_end":274,"column_start":5,"column_end":76}},{"value":"/ returning true. If `numerator == denominator`, then the returned value","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":162547,"byte_end":162621,"line_start":275,"line_end":275,"column_start":5,"column_end":79}},{"value":"/ is guaranteed to be `true`. If `numerator == 0`, then the returned","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":162626,"byte_end":162696,"line_start":276,"line_end":276,"column_start":5,"column_end":75}},{"value":"/ value is guaranteed to be `false`.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":162701,"byte_end":162739,"line_start":277,"line_end":277,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":162744,"byte_end":162747,"line_start":278,"line_end":278,"column_start":5,"column_end":8}},{"value":"/ See also the [`Bernoulli`] distribution, which may be faster if","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":162752,"byte_end":162819,"line_start":279,"line_end":279,"column_start":5,"column_end":72}},{"value":"/ sampling from the same `numerator` and `denominator` repeatedly.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":162824,"byte_end":162892,"line_start":280,"line_end":280,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":162897,"byte_end":162900,"line_start":281,"line_end":281,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":162905,"byte_end":162917,"line_start":282,"line_end":282,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":162922,"byte_end":162925,"line_start":283,"line_end":283,"column_start":5,"column_end":8}},{"value":"/ If `denominator == 0` or `numerator > denominator`.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":162930,"byte_end":162985,"line_start":284,"line_end":284,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":162990,"byte_end":162993,"line_start":285,"line_end":285,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":162998,"byte_end":163011,"line_start":286,"line_end":286,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":163016,"byte_end":163019,"line_start":287,"line_end":287,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":163024,"byte_end":163031,"line_start":288,"line_end":288,"column_start":5,"column_end":12}},{"value":"/ use rand::{thread_rng, Rng};","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":163036,"byte_end":163068,"line_start":289,"line_end":289,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":163073,"byte_end":163076,"line_start":290,"line_end":290,"column_start":5,"column_end":8}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":163081,"byte_end":163112,"line_start":291,"line_end":291,"column_start":5,"column_end":36}},{"value":"/ println!(\"{}\", rng.gen_ratio(2, 3));","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":163117,"byte_end":163157,"line_start":292,"line_end":292,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":163162,"byte_end":163169,"line_start":293,"line_end":293,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":163174,"byte_end":163177,"line_start":294,"line_end":294,"column_start":5,"column_end":8}},{"value":"/ [`Bernoulli`]: distributions::Bernoulli","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":163182,"byte_end":163225,"line_start":295,"line_end":295,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":163230,"byte_end":163239,"line_start":296,"line_end":296,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":384},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":163805,"byte_end":163809,"line_start":312,"line_end":312,"column_start":11,"column_end":15},"name":"Fill","qualname":"::rng::Fill","value":"Fill","parent":null,"children":[{"krate":0,"index":385}],"decl_id":null,"docs":" Types which may be filled with random data","sig":null,"attributes":[{"value":"/ Types which may be filled with random data","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":163471,"byte_end":163517,"line_start":305,"line_end":305,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":163518,"byte_end":163521,"line_start":306,"line_end":306,"column_start":1,"column_end":4}},{"value":"/ This trait allows arrays to be efficiently filled with random data.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":163522,"byte_end":163593,"line_start":307,"line_end":307,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":163594,"byte_end":163597,"line_start":308,"line_end":308,"column_start":1,"column_end":4}},{"value":"/ Implementations are expected to be portable across machines unless","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":163598,"byte_end":163668,"line_start":309,"line_end":309,"column_start":1,"column_end":71}},{"value":"/ clearly documented otherwise (see the","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":163669,"byte_end":163710,"line_start":310,"line_end":310,"column_start":1,"column_end":42}},{"value":"/ [Chapter on Portability](https://rust-random.github.io/book/portability.html)).","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":163711,"byte_end":163794,"line_start":311,"line_end":311,"column_start":1,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":385},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":163854,"byte_end":163862,"line_start":314,"line_end":314,"column_start":8,"column_end":16},"name":"try_fill","qualname":"::rng::Fill::try_fill","value":"pub fn try_fill<R: Rng + ?Sized>(&mut Self, &mut R) -> Result<(), Error>","parent":{"krate":0,"index":384},"children":[],"decl_id":null,"docs":" Fill self with random data\n","sig":null,"attributes":[{"value":"/ Fill self with random data","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":163816,"byte_end":163846,"line_start":313,"line_end":313,"column_start":5,"column_end":35}}]},{"kind":"Mod","id":{"krate":0,"index":393},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"rngs","qualname":"::rngs","value":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","parent":null,"children":[{"krate":0,"index":394},{"krate":0,"index":483},{"krate":0,"index":495},{"krate":0,"index":514},{"krate":0,"index":537},{"krate":0,"index":538},{"krate":0,"index":539},{"krate":0,"index":2270}],"decl_id":null,"docs":" Random number generators and adapters","sig":null,"attributes":[{"value":"/ Random number generators and adapters","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":172324,"byte_end":172365,"line_start":9,"line_end":9,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":172366,"byte_end":172369,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ ## Background: Random number generators (RNGs)","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":172370,"byte_end":172420,"line_start":11,"line_end":11,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":172421,"byte_end":172424,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ Computers cannot produce random numbers from nowhere. We classify","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":172425,"byte_end":172494,"line_start":13,"line_end":13,"column_start":1,"column_end":70}},{"value":"/ random number generators as follows:","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":172495,"byte_end":172535,"line_start":14,"line_end":14,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":172536,"byte_end":172539,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ -   \"True\" random number generators (TRNGs) use hard-to-predict data sources","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":172540,"byte_end":172620,"line_start":16,"line_end":16,"column_start":1,"column_end":81}},{"value":"/     (e.g. the high-resolution parts of event timings and sensor jitter) to","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":172621,"byte_end":172699,"line_start":17,"line_end":17,"column_start":1,"column_end":79}},{"value":"/     harvest random bit-sequences, apply algorithms to remove bias and","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":172700,"byte_end":172773,"line_start":18,"line_end":18,"column_start":1,"column_end":74}},{"value":"/     estimate available entropy, then combine these bits into a byte-sequence","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":172774,"byte_end":172854,"line_start":19,"line_end":19,"column_start":1,"column_end":81}},{"value":"/     or an entropy pool. This job is usually done by the operating system or","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":172855,"byte_end":172934,"line_start":20,"line_end":20,"column_start":1,"column_end":80}},{"value":"/     a hardware generator (HRNG).","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":172935,"byte_end":172971,"line_start":21,"line_end":21,"column_start":1,"column_end":37}},{"value":"/ -   \"Pseudo\"-random number generators (PRNGs) use algorithms to transform a","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":172972,"byte_end":173051,"line_start":22,"line_end":22,"column_start":1,"column_end":80}},{"value":"/     seed into a sequence of pseudo-random numbers. These generators can be","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":173052,"byte_end":173130,"line_start":23,"line_end":23,"column_start":1,"column_end":79}},{"value":"/     fast and produce well-distributed unpredictable random numbers (or not).","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":173131,"byte_end":173211,"line_start":24,"line_end":24,"column_start":1,"column_end":81}},{"value":"/     They are usually deterministic: given algorithm and seed, the output","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":173212,"byte_end":173288,"line_start":25,"line_end":25,"column_start":1,"column_end":77}},{"value":"/     sequence can be reproduced. They have finite period and eventually loop;","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":173289,"byte_end":173369,"line_start":26,"line_end":26,"column_start":1,"column_end":81}},{"value":"/     with many algorithms this period is fixed and can be proven sufficiently","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":173370,"byte_end":173450,"line_start":27,"line_end":27,"column_start":1,"column_end":81}},{"value":"/     long, while others are chaotic and the period depends on the seed.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":173451,"byte_end":173525,"line_start":28,"line_end":28,"column_start":1,"column_end":75}},{"value":"/ -   \"Cryptographically secure\" pseudo-random number generators (CSPRNGs)","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":173526,"byte_end":173602,"line_start":29,"line_end":29,"column_start":1,"column_end":77}},{"value":"/     are the sub-set of PRNGs which are secure. Security of the generator","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":173603,"byte_end":173679,"line_start":30,"line_end":30,"column_start":1,"column_end":77}},{"value":"/     relies both on hiding the internal state and using a strong algorithm.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":173680,"byte_end":173758,"line_start":31,"line_end":31,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":173759,"byte_end":173762,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ ## Traits and functionality","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":173763,"byte_end":173794,"line_start":33,"line_end":33,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":173795,"byte_end":173798,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ All RNGs implement the [`RngCore`] trait, as a consequence of which the","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":173799,"byte_end":173874,"line_start":35,"line_end":35,"column_start":1,"column_end":76}},{"value":"/ [`Rng`] extension trait is automatically implemented. Secure RNGs may","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":173875,"byte_end":173948,"line_start":36,"line_end":36,"column_start":1,"column_end":74}},{"value":"/ additionally implement the [`CryptoRng`] trait.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":173949,"byte_end":174000,"line_start":37,"line_end":37,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":174001,"byte_end":174004,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ All PRNGs require a seed to produce their random number sequence. The","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":174005,"byte_end":174078,"line_start":39,"line_end":39,"column_start":1,"column_end":74}},{"value":"/ [`SeedableRng`] trait provides three ways of constructing PRNGs:","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":174079,"byte_end":174147,"line_start":40,"line_end":40,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":174148,"byte_end":174151,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ -   `from_seed` accepts a type specific to the PRNG","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":174152,"byte_end":174207,"line_start":42,"line_end":42,"column_start":1,"column_end":56}},{"value":"/ -   `from_rng` allows a PRNG to be seeded from any other RNG","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":174208,"byte_end":174272,"line_start":43,"line_end":43,"column_start":1,"column_end":65}},{"value":"/ -   `seed_from_u64` allows any PRNG to be seeded from a `u64` insecurely","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":174273,"byte_end":174349,"line_start":44,"line_end":44,"column_start":1,"column_end":77}},{"value":"/ -   `from_entropy` securely seeds a PRNG from fresh entropy","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":174350,"byte_end":174413,"line_start":45,"line_end":45,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":174414,"byte_end":174417,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ Use the [`rand_core`] crate when implementing your own RNGs.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":174418,"byte_end":174482,"line_start":47,"line_end":47,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":174483,"byte_end":174486,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ ## Our generators","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":174487,"byte_end":174508,"line_start":49,"line_end":49,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":174509,"byte_end":174512,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ This crate provides several random number generators:","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":174513,"byte_end":174570,"line_start":51,"line_end":51,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":174571,"byte_end":174574,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ -   [`OsRng`] is an interface to the operating system's random number","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":174575,"byte_end":174648,"line_start":53,"line_end":53,"column_start":1,"column_end":74}},{"value":"/     source. Typically the operating system uses a CSPRNG with entropy","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":174649,"byte_end":174722,"line_start":54,"line_end":54,"column_start":1,"column_end":74}},{"value":"/     provided by a TRNG and some type of on-going re-seeding.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":174723,"byte_end":174787,"line_start":55,"line_end":55,"column_start":1,"column_end":65}},{"value":"/ -   [`ThreadRng`], provided by the [`thread_rng`] function, is a handle to a","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":174788,"byte_end":174868,"line_start":56,"line_end":56,"column_start":1,"column_end":81}},{"value":"/     thread-local CSPRNG with periodic seeding from [`OsRng`]. Because this","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":174869,"byte_end":174947,"line_start":57,"line_end":57,"column_start":1,"column_end":79}},{"value":"/     is local, it is typically much faster than [`OsRng`]. It should be","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":174948,"byte_end":175022,"line_start":58,"line_end":58,"column_start":1,"column_end":75}},{"value":"/     secure, though the paranoid may prefer [`OsRng`].","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":175023,"byte_end":175080,"line_start":59,"line_end":59,"column_start":1,"column_end":58}},{"value":"/ -   [`StdRng`] is a CSPRNG chosen for good performance and trust of security","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":175081,"byte_end":175161,"line_start":60,"line_end":60,"column_start":1,"column_end":81}},{"value":"/     (based on reviews, maturity and usage). The current algorithm is ChaCha12,","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":175162,"byte_end":175244,"line_start":61,"line_end":61,"column_start":1,"column_end":83}},{"value":"/     which is well established and rigorously analysed.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":175245,"byte_end":175303,"line_start":62,"line_end":62,"column_start":1,"column_end":59}},{"value":"/     [`StdRng`] provides the algorithm used by [`ThreadRng`] but without","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":175304,"byte_end":175379,"line_start":63,"line_end":63,"column_start":1,"column_end":76}},{"value":"/     periodic reseeding.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":175380,"byte_end":175407,"line_start":64,"line_end":64,"column_start":1,"column_end":28}},{"value":"/ -   [`SmallRng`] is an **insecure** PRNG designed to be fast, simple, require","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":175408,"byte_end":175489,"line_start":65,"line_end":65,"column_start":1,"column_end":82}},{"value":"/     little memory, and have good output quality.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":175490,"byte_end":175542,"line_start":66,"line_end":66,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":175543,"byte_end":175546,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ The algorithms selected for [`StdRng`] and [`SmallRng`] may change in any","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":175547,"byte_end":175624,"line_start":68,"line_end":68,"column_start":1,"column_end":78}},{"value":"/ release and may be platform-dependent, therefore they should be considered","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":175625,"byte_end":175703,"line_start":69,"line_end":69,"column_start":1,"column_end":79}},{"value":"/ **not reproducible**.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":175704,"byte_end":175729,"line_start":70,"line_end":70,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":175730,"byte_end":175733,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ ## Additional generators","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":175734,"byte_end":175762,"line_start":72,"line_end":72,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":175763,"byte_end":175766,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"/ **TRNGs**: The [`rdrand`] crate provides an interface to the RDRAND and","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":175767,"byte_end":175842,"line_start":74,"line_end":74,"column_start":1,"column_end":76}},{"value":"/ RDSEED instructions available in modern Intel and AMD CPUs.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":175843,"byte_end":175906,"line_start":75,"line_end":75,"column_start":1,"column_end":64}},{"value":"/ The [`rand_jitter`] crate provides a user-space implementation of","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":175907,"byte_end":175976,"line_start":76,"line_end":76,"column_start":1,"column_end":70}},{"value":"/ entropy harvesting from CPU timer jitter, but is very slow and has","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":175977,"byte_end":176047,"line_start":77,"line_end":77,"column_start":1,"column_end":71}},{"value":"/ [security issues](https://github.com/rust-random/rand/issues/699).","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":176048,"byte_end":176118,"line_start":78,"line_end":78,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":176119,"byte_end":176122,"line_start":79,"line_end":79,"column_start":1,"column_end":4}},{"value":"/ **PRNGs**: Several companion crates are available, providing individual or","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":176123,"byte_end":176201,"line_start":80,"line_end":80,"column_start":1,"column_end":79}},{"value":"/ families of PRNG algorithms. These provide the implementations behind","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":176202,"byte_end":176275,"line_start":81,"line_end":81,"column_start":1,"column_end":74}},{"value":"/ [`StdRng`] and [`SmallRng`] but can also be used directly, indeed *should*","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":176276,"byte_end":176354,"line_start":82,"line_end":82,"column_start":1,"column_end":79}},{"value":"/ be used directly when **reproducibility** matters.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":176355,"byte_end":176409,"line_start":83,"line_end":83,"column_start":1,"column_end":55}},{"value":"/ Some suggestions are: [`rand_chacha`], [`rand_pcg`], [`rand_xoshiro`].","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":176410,"byte_end":176484,"line_start":84,"line_end":84,"column_start":1,"column_end":75}},{"value":"/ A full list can be found by searching for crates with the [`rng` tag].","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":176485,"byte_end":176559,"line_start":85,"line_end":85,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":176560,"byte_end":176563,"line_start":86,"line_end":86,"column_start":1,"column_end":4}},{"value":"/ [`Rng`]: crate::Rng","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":176564,"byte_end":176587,"line_start":87,"line_end":87,"column_start":1,"column_end":24}},{"value":"/ [`RngCore`]: crate::RngCore","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":176588,"byte_end":176619,"line_start":88,"line_end":88,"column_start":1,"column_end":32}},{"value":"/ [`CryptoRng`]: crate::CryptoRng","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":176620,"byte_end":176655,"line_start":89,"line_end":89,"column_start":1,"column_end":36}},{"value":"/ [`SeedableRng`]: crate::SeedableRng","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":176656,"byte_end":176695,"line_start":90,"line_end":90,"column_start":1,"column_end":40}},{"value":"/ [`thread_rng`]: crate::thread_rng","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":176696,"byte_end":176733,"line_start":91,"line_end":91,"column_start":1,"column_end":38}},{"value":"/ [`rdrand`]: https://crates.io/crates/rdrand","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":176734,"byte_end":176781,"line_start":92,"line_end":92,"column_start":1,"column_end":48}},{"value":"/ [`rand_jitter`]: https://crates.io/crates/rand_jitter","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":176782,"byte_end":176839,"line_start":93,"line_end":93,"column_start":1,"column_end":58}},{"value":"/ [`rand_chacha`]: https://crates.io/crates/rand_chacha","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":176840,"byte_end":176897,"line_start":94,"line_end":94,"column_start":1,"column_end":58}},{"value":"/ [`rand_pcg`]: https://crates.io/crates/rand_pcg","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":176898,"byte_end":176949,"line_start":95,"line_end":95,"column_start":1,"column_end":52}},{"value":"/ [`rand_xoshiro`]: https://crates.io/crates/rand_xoshiro","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":176950,"byte_end":177009,"line_start":96,"line_end":96,"column_start":1,"column_end":60}},{"value":"/ [`rng` tag]: https://crates.io/keywords/rng","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":177010,"byte_end":177057,"line_start":97,"line_end":97,"column_start":1,"column_end":48}}]},{"kind":"Mod","id":{"krate":0,"index":394},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/adapter/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"adapter","qualname":"::rngs::adapter","value":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/adapter/mod.rs","parent":null,"children":[{"krate":0,"index":395},{"krate":0,"index":417},{"krate":0,"index":479},{"krate":0,"index":480},{"krate":0,"index":481},{"krate":0,"index":482}],"decl_id":null,"docs":" Wrappers / adapters forming RNGs\n","sig":null,"attributes":[{"value":"cfg(feature = \"std\")","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":177107,"byte_end":177130,"line_start":100,"line_end":100,"column_start":1,"column_end":24}},{"value":"/ Wrappers / adapters forming RNGs","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/adapter/mod.rs","byte_start":178286,"byte_end":178322,"line_start":9,"line_end":9,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":1900},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/adapter/read.rs","byte_start":179915,"byte_end":179922,"line_start":47,"line_end":47,"column_start":12,"column_end":19},"name":"ReadRng","qualname":"::rngs::adapter::read::ReadRng","value":"ReadRng {  }","parent":null,"children":[{"krate":0,"index":1902}],"decl_id":null,"docs":" An RNG that reads random bytes straight from any type supporting\n [`std::io::Read`], for example files.","sig":null,"attributes":[{"value":"/ An RNG that reads random bytes straight from any type supporting","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/adapter/read.rs","byte_start":178965,"byte_end":179033,"line_start":18,"line_end":18,"column_start":1,"column_end":69}},{"value":"/ [`std::io::Read`], for example files.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/adapter/read.rs","byte_start":179034,"byte_end":179075,"line_start":19,"line_end":19,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/adapter/read.rs","byte_start":179076,"byte_end":179079,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ This will work best with an infinite reader, but that is not required.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/adapter/read.rs","byte_start":179080,"byte_end":179154,"line_start":21,"line_end":21,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/adapter/read.rs","byte_start":179155,"byte_end":179158,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ This can be used with `/dev/urandom` on Unix but it is recommended to use","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/adapter/read.rs","byte_start":179159,"byte_end":179236,"line_start":23,"line_end":23,"column_start":1,"column_end":78}},{"value":"/ [`OsRng`] instead.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/adapter/read.rs","byte_start":179237,"byte_end":179259,"line_start":24,"line_end":24,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/adapter/read.rs","byte_start":179260,"byte_end":179263,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ # Panics","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/adapter/read.rs","byte_start":179264,"byte_end":179276,"line_start":26,"line_end":26,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/adapter/read.rs","byte_start":179277,"byte_end":179280,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ `ReadRng` uses [`std::io::Read::read_exact`], which retries on interrupts.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/adapter/read.rs","byte_start":179281,"byte_end":179359,"line_start":28,"line_end":28,"column_start":1,"column_end":79}},{"value":"/ All other errors from the underlying reader, including when it does not","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/adapter/read.rs","byte_start":179360,"byte_end":179435,"line_start":29,"line_end":29,"column_start":1,"column_end":76}},{"value":"/ have enough data, will only be reported through [`try_fill_bytes`].","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/adapter/read.rs","byte_start":179436,"byte_end":179507,"line_start":30,"line_end":30,"column_start":1,"column_end":72}},{"value":"/ The other [`RngCore`] methods will panic in case of an error.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/adapter/read.rs","byte_start":179508,"byte_end":179573,"line_start":31,"line_end":31,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/adapter/read.rs","byte_start":179574,"byte_end":179577,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/adapter/read.rs","byte_start":179578,"byte_end":179591,"line_start":33,"line_end":33,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/adapter/read.rs","byte_start":179592,"byte_end":179595,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/adapter/read.rs","byte_start":179596,"byte_end":179603,"line_start":35,"line_end":35,"column_start":1,"column_end":8}},{"value":"/ use rand::Rng;","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/adapter/read.rs","byte_start":179604,"byte_end":179622,"line_start":36,"line_end":36,"column_start":1,"column_end":19}},{"value":"/ use rand::rngs::adapter::ReadRng;","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/adapter/read.rs","byte_start":179623,"byte_end":179660,"line_start":37,"line_end":37,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/adapter/read.rs","byte_start":179661,"byte_end":179664,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ let data = vec![1, 2, 3, 4, 5, 6, 7, 8];","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/adapter/read.rs","byte_start":179665,"byte_end":179709,"line_start":39,"line_end":39,"column_start":1,"column_end":45}},{"value":"/ let mut rng = ReadRng::new(&data[..]);","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/adapter/read.rs","byte_start":179710,"byte_end":179752,"line_start":40,"line_end":40,"column_start":1,"column_end":43}},{"value":"/ println!(\"{:x}\", rng.gen::<u32>());","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/adapter/read.rs","byte_start":179753,"byte_end":179792,"line_start":41,"line_end":41,"column_start":1,"column_end":40}},{"value":"/ ```","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/adapter/read.rs","byte_start":179793,"byte_end":179800,"line_start":42,"line_end":42,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/adapter/read.rs","byte_start":179801,"byte_end":179804,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ [`OsRng`]: crate::rngs::OsRng","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/adapter/read.rs","byte_start":179805,"byte_end":179838,"line_start":44,"line_end":44,"column_start":1,"column_end":34}},{"value":"/ [`try_fill_bytes`]: RngCore::try_fill_bytes","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/adapter/read.rs","byte_start":179839,"byte_end":179886,"line_start":45,"line_end":45,"column_start":1,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":404},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/adapter/read.rs","byte_start":180030,"byte_end":180033,"line_start":53,"line_end":53,"column_start":12,"column_end":15},"name":"new","qualname":"<ReadRng<R>>::new","value":"pub fn new(R) -> ReadRng<R>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `ReadRng` from a `Read`.\n","sig":null,"attributes":[{"value":"/ Create a new `ReadRng` from a `Read`.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/adapter/read.rs","byte_start":179977,"byte_end":180018,"line_start":52,"line_end":52,"column_start":5,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":1906},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/adapter/read.rs","byte_start":180942,"byte_end":180951,"line_start":89,"line_end":89,"column_start":12,"column_end":21},"name":"ReadError","qualname":"::rngs::adapter::read::ReadError","value":"","parent":null,"children":[],"decl_id":null,"docs":" `ReadRng` error type\n","sig":null,"attributes":[{"value":"/ `ReadRng` error type","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/adapter/read.rs","byte_start":180889,"byte_end":180913,"line_start":87,"line_end":87,"column_start":1,"column_end":25}}]},{"kind":"Struct","id":{"krate":0,"index":1911},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/adapter/reseeding.rs","byte_start":185901,"byte_end":185913,"line_start":79,"line_end":79,"column_start":12,"column_end":24},"name":"ReseedingRng","qualname":"::rngs::adapter::reseeding::ReseedingRng","value":"","parent":null,"children":[],"decl_id":null,"docs":" A wrapper around any PRNG that implements [`BlockRngCore`], that adds the\n ability to reseed it.","sig":null,"attributes":[{"value":"/ A wrapper around any PRNG that implements [`BlockRngCore`], that adds the","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/adapter/reseeding.rs","byte_start":183300,"byte_end":183377,"line_start":18,"line_end":18,"column_start":1,"column_end":78}},{"value":"/ ability to reseed it.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/adapter/reseeding.rs","byte_start":183378,"byte_end":183403,"line_start":19,"line_end":19,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/adapter/reseeding.rs","byte_start":183404,"byte_end":183407,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ `ReseedingRng` reseeds the underlying PRNG in the following cases:","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/adapter/reseeding.rs","byte_start":183408,"byte_end":183478,"line_start":21,"line_end":21,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/adapter/reseeding.rs","byte_start":183479,"byte_end":183482,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ - On a manual call to [`reseed()`].","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/adapter/reseeding.rs","byte_start":183483,"byte_end":183522,"line_start":23,"line_end":23,"column_start":1,"column_end":40}},{"value":"/ - After `clone()`, the clone will be reseeded on first use.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/adapter/reseeding.rs","byte_start":183523,"byte_end":183586,"line_start":24,"line_end":24,"column_start":1,"column_end":64}},{"value":"/ - After a process is forked, the RNG in the child process is reseeded within","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/adapter/reseeding.rs","byte_start":183587,"byte_end":183667,"line_start":25,"line_end":25,"column_start":1,"column_end":81}},{"value":"/   the next few generated values, depending on the block size of the","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/adapter/reseeding.rs","byte_start":183668,"byte_end":183739,"line_start":26,"line_end":26,"column_start":1,"column_end":72}},{"value":"/   underlying PRNG. For ChaCha and Hc128 this is a maximum of","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/adapter/reseeding.rs","byte_start":183740,"byte_end":183804,"line_start":27,"line_end":27,"column_start":1,"column_end":65}},{"value":"/   15 `u32` values before reseeding.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/adapter/reseeding.rs","byte_start":183805,"byte_end":183844,"line_start":28,"line_end":28,"column_start":1,"column_end":40}},{"value":"/ - After the PRNG has generated a configurable number of random bytes.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/adapter/reseeding.rs","byte_start":183845,"byte_end":183918,"line_start":29,"line_end":29,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/adapter/reseeding.rs","byte_start":183919,"byte_end":183922,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ # When should reseeding after a fixed number of generated bytes be used?","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/adapter/reseeding.rs","byte_start":183923,"byte_end":183999,"line_start":31,"line_end":31,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/adapter/reseeding.rs","byte_start":184000,"byte_end":184003,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ Reseeding after a fixed number of generated bytes is never strictly","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/adapter/reseeding.rs","byte_start":184004,"byte_end":184075,"line_start":33,"line_end":33,"column_start":1,"column_end":72}},{"value":"/ *necessary*. Cryptographic PRNGs don't have a limited number of bytes they","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/adapter/reseeding.rs","byte_start":184076,"byte_end":184154,"line_start":34,"line_end":34,"column_start":1,"column_end":79}},{"value":"/ can output, or at least not a limit reachable in any practical way. There is","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/adapter/reseeding.rs","byte_start":184155,"byte_end":184235,"line_start":35,"line_end":35,"column_start":1,"column_end":81}},{"value":"/ no such thing as 'running out of entropy'.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/adapter/reseeding.rs","byte_start":184236,"byte_end":184282,"line_start":36,"line_end":36,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/adapter/reseeding.rs","byte_start":184283,"byte_end":184286,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ Occasionally reseeding can be seen as some form of 'security in depth'. Even","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/adapter/reseeding.rs","byte_start":184287,"byte_end":184367,"line_start":38,"line_end":38,"column_start":1,"column_end":81}},{"value":"/ if in the future a cryptographic weakness is found in the CSPRNG being used,","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/adapter/reseeding.rs","byte_start":184368,"byte_end":184448,"line_start":39,"line_end":39,"column_start":1,"column_end":81}},{"value":"/ or a flaw in the implementation, occasionally reseeding should make","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/adapter/reseeding.rs","byte_start":184449,"byte_end":184520,"line_start":40,"line_end":40,"column_start":1,"column_end":72}},{"value":"/ exploiting it much more difficult or even impossible.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/adapter/reseeding.rs","byte_start":184521,"byte_end":184578,"line_start":41,"line_end":41,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/adapter/reseeding.rs","byte_start":184579,"byte_end":184582,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ Use [`ReseedingRng::new`] with a `threshold` of `0` to disable reseeding","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/adapter/reseeding.rs","byte_start":184583,"byte_end":184659,"line_start":43,"line_end":43,"column_start":1,"column_end":77}},{"value":"/ after a fixed number of generated bytes.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/adapter/reseeding.rs","byte_start":184660,"byte_end":184704,"line_start":44,"line_end":44,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/adapter/reseeding.rs","byte_start":184705,"byte_end":184708,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ # Error handling","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/adapter/reseeding.rs","byte_start":184709,"byte_end":184729,"line_start":46,"line_end":46,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/adapter/reseeding.rs","byte_start":184730,"byte_end":184733,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ Although unlikely, reseeding the wrapped PRNG can fail. `ReseedingRng` will","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/adapter/reseeding.rs","byte_start":184734,"byte_end":184813,"line_start":48,"line_end":48,"column_start":1,"column_end":80}},{"value":"/ never panic but try to handle the error intelligently through some","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/adapter/reseeding.rs","byte_start":184814,"byte_end":184884,"line_start":49,"line_end":49,"column_start":1,"column_end":71}},{"value":"/ combination of retrying and delaying reseeding until later.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/adapter/reseeding.rs","byte_start":184885,"byte_end":184948,"line_start":50,"line_end":50,"column_start":1,"column_end":64}},{"value":"/ If handling the source error fails `ReseedingRng` will continue generating","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/adapter/reseeding.rs","byte_start":184949,"byte_end":185027,"line_start":51,"line_end":51,"column_start":1,"column_end":79}},{"value":"/ data from the wrapped PRNG without reseeding.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/adapter/reseeding.rs","byte_start":185028,"byte_end":185077,"line_start":52,"line_end":52,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/adapter/reseeding.rs","byte_start":185078,"byte_end":185081,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ Manually calling [`reseed()`] will not have this retry or delay logic, but","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/adapter/reseeding.rs","byte_start":185082,"byte_end":185160,"line_start":54,"line_end":54,"column_start":1,"column_end":79}},{"value":"/ reports the error.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/adapter/reseeding.rs","byte_start":185161,"byte_end":185183,"line_start":55,"line_end":55,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/adapter/reseeding.rs","byte_start":185184,"byte_end":185187,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/adapter/reseeding.rs","byte_start":185188,"byte_end":185201,"line_start":57,"line_end":57,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/adapter/reseeding.rs","byte_start":185202,"byte_end":185205,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/adapter/reseeding.rs","byte_start":185206,"byte_end":185213,"line_start":59,"line_end":59,"column_start":1,"column_end":8}},{"value":"/ use rand::prelude::*;","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/adapter/reseeding.rs","byte_start":185214,"byte_end":185239,"line_start":60,"line_end":60,"column_start":1,"column_end":26}},{"value":"/ use rand_chacha::ChaCha20Core; // Internal part of ChaChaRng that","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/adapter/reseeding.rs","byte_start":185240,"byte_end":185309,"line_start":61,"line_end":61,"column_start":1,"column_end":70}},{"value":"/                              // implements BlockRngCore","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/adapter/reseeding.rs","byte_start":185310,"byte_end":185369,"line_start":62,"line_end":62,"column_start":1,"column_end":60}},{"value":"/ use rand::rngs::OsRng;","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/adapter/reseeding.rs","byte_start":185370,"byte_end":185396,"line_start":63,"line_end":63,"column_start":1,"column_end":27}},{"value":"/ use rand::rngs::adapter::ReseedingRng;","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/adapter/reseeding.rs","byte_start":185397,"byte_end":185439,"line_start":64,"line_end":64,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/adapter/reseeding.rs","byte_start":185440,"byte_end":185443,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/ let prng = ChaCha20Core::from_entropy();","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/adapter/reseeding.rs","byte_start":185444,"byte_end":185488,"line_start":66,"line_end":66,"column_start":1,"column_end":45}},{"value":"/ let mut reseeding_rng = ReseedingRng::new(prng, 0, OsRng);","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/adapter/reseeding.rs","byte_start":185489,"byte_end":185551,"line_start":67,"line_end":67,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/adapter/reseeding.rs","byte_start":185552,"byte_end":185555,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ println!(\"{}\", reseeding_rng.gen::<u64>());","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/adapter/reseeding.rs","byte_start":185556,"byte_end":185603,"line_start":69,"line_end":69,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/adapter/reseeding.rs","byte_start":185604,"byte_end":185607,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ let mut cloned_rng = reseeding_rng.clone();","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/adapter/reseeding.rs","byte_start":185608,"byte_end":185655,"line_start":71,"line_end":71,"column_start":1,"column_end":48}},{"value":"/ assert!(reseeding_rng.gen::<u64>() != cloned_rng.gen::<u64>());","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/adapter/reseeding.rs","byte_start":185656,"byte_end":185723,"line_start":72,"line_end":72,"column_start":1,"column_end":68}},{"value":"/ ```","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/adapter/reseeding.rs","byte_start":185724,"byte_end":185731,"line_start":73,"line_end":73,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/adapter/reseeding.rs","byte_start":185732,"byte_end":185735,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"/ [`BlockRngCore`]: rand_core::block::BlockRngCore","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/adapter/reseeding.rs","byte_start":185736,"byte_end":185788,"line_start":75,"line_end":75,"column_start":1,"column_end":53}},{"value":"/ [`ReseedingRng::new`]: ReseedingRng::new","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/adapter/reseeding.rs","byte_start":185789,"byte_end":185833,"line_start":76,"line_end":76,"column_start":1,"column_end":45}},{"value":"/ [`reseed()`]: ReseedingRng::reseed","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/adapter/reseeding.rs","byte_start":185834,"byte_end":185872,"line_start":77,"line_end":77,"column_start":1,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":430},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/adapter/reseeding.rs","byte_start":186417,"byte_end":186420,"line_start":95,"line_end":95,"column_start":12,"column_end":15},"name":"new","qualname":"<ReseedingRng<R, Rsdr>>::new","value":"pub fn new(R, u64, Rsdr) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `ReseedingRng` from an existing PRNG, combined with a RNG\n to use as reseeder.","sig":null,"attributes":[{"value":"/ Create a new `ReseedingRng` from an existing PRNG, combined with a RNG","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/adapter/reseeding.rs","byte_start":186120,"byte_end":186194,"line_start":89,"line_end":89,"column_start":5,"column_end":79}},{"value":"/ to use as reseeder.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/adapter/reseeding.rs","byte_start":186199,"byte_end":186222,"line_start":90,"line_end":90,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/adapter/reseeding.rs","byte_start":186227,"byte_end":186230,"line_start":91,"line_end":91,"column_start":5,"column_end":8}},{"value":"/ `threshold` sets the number of generated bytes after which to reseed the","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/adapter/reseeding.rs","byte_start":186235,"byte_end":186311,"line_start":92,"line_end":92,"column_start":5,"column_end":81}},{"value":"/ PRNG. Set it to zero to never reseed based on the number of generated","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/adapter/reseeding.rs","byte_start":186316,"byte_end":186389,"line_start":93,"line_end":93,"column_start":5,"column_end":78}},{"value":"/ values.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/adapter/reseeding.rs","byte_start":186394,"byte_end":186405,"line_start":94,"line_end":94,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":431},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/adapter/reseeding.rs","byte_start":186605,"byte_end":186611,"line_start":100,"line_end":100,"column_start":12,"column_end":18},"name":"reseed","qualname":"<ReseedingRng<R, Rsdr>>::reseed","value":"pub fn reseed(&mut Self) -> Result<(), Error>","parent":null,"children":[],"decl_id":null,"docs":" Reseed the internal PRNG.\n","sig":null,"attributes":[{"value":"/ Reseed the internal PRNG.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/adapter/reseeding.rs","byte_start":186564,"byte_end":186593,"line_start":99,"line_end":99,"column_start":5,"column_end":34}}]},{"kind":"Mod","id":{"krate":0,"index":483},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mock.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"mock","qualname":"::rngs::mock","value":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mock.rs","parent":null,"children":[{"krate":0,"index":484},{"krate":0,"index":485},{"krate":0,"index":486},{"krate":0,"index":487},{"krate":0,"index":1932},{"krate":0,"index":1944},{"krate":0,"index":1942},{"krate":0,"index":1938},{"krate":0,"index":1939},{"krate":0,"index":1935},{"krate":0,"index":1936},{"krate":0,"index":488},{"krate":0,"index":490}],"decl_id":null,"docs":" Mock random number generator\n","sig":null,"attributes":[{"value":"/ Mock random number generator","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mock.rs","byte_start":195158,"byte_end":195190,"line_start":9,"line_end":9,"column_start":1,"column_end":33}}]},{"kind":"Struct","id":{"krate":0,"index":1932},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mock.rs","byte_start":195860,"byte_end":195867,"line_start":32,"line_end":32,"column_start":12,"column_end":19},"name":"StepRng","qualname":"::rngs::mock::StepRng","value":"StepRng {  }","parent":null,"children":[{"krate":0,"index":1933},{"krate":0,"index":1934}],"decl_id":null,"docs":" A simple implementation of `RngCore` for testing purposes.","sig":null,"attributes":[{"value":"/ A simple implementation of `RngCore` for testing purposes.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mock.rs","byte_start":195298,"byte_end":195360,"line_start":16,"line_end":16,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mock.rs","byte_start":195361,"byte_end":195364,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ This generates an arithmetic sequence (i.e. adds a constant each step)","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mock.rs","byte_start":195365,"byte_end":195439,"line_start":18,"line_end":18,"column_start":1,"column_end":75}},{"value":"/ over a `u64` number, using wrapping arithmetic. If the increment is 0","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mock.rs","byte_start":195440,"byte_end":195513,"line_start":19,"line_end":19,"column_start":1,"column_end":74}},{"value":"/ the generator yields a constant.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mock.rs","byte_start":195514,"byte_end":195550,"line_start":20,"line_end":20,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mock.rs","byte_start":195551,"byte_end":195554,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mock.rs","byte_start":195555,"byte_end":195562,"line_start":22,"line_end":22,"column_start":1,"column_end":8}},{"value":"/ use rand::Rng;","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mock.rs","byte_start":195563,"byte_end":195581,"line_start":23,"line_end":23,"column_start":1,"column_end":19}},{"value":"/ use rand::rngs::mock::StepRng;","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mock.rs","byte_start":195582,"byte_end":195616,"line_start":24,"line_end":24,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mock.rs","byte_start":195617,"byte_end":195620,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ let mut my_rng = StepRng::new(2, 1);","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mock.rs","byte_start":195621,"byte_end":195661,"line_start":26,"line_end":26,"column_start":1,"column_end":41}},{"value":"/ let sample: [u64; 3] = my_rng.gen();","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mock.rs","byte_start":195662,"byte_end":195702,"line_start":27,"line_end":27,"column_start":1,"column_end":41}},{"value":"/ assert_eq!(sample, [2, 3, 4]);","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mock.rs","byte_start":195703,"byte_end":195737,"line_start":28,"line_end":28,"column_start":1,"column_end":35}},{"value":"/ ```","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mock.rs","byte_start":195738,"byte_end":195745,"line_start":29,"line_end":29,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":489},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mock.rs","byte_start":196057,"byte_end":196060,"line_start":40,"line_end":40,"column_start":12,"column_end":15},"name":"new","qualname":"<StepRng>::new","value":"pub fn new(u64, u64) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a `StepRng`, yielding an arithmetic sequence starting with\n `initial` and incremented by `increment` each time.\n","sig":null,"attributes":[{"value":"/ Create a `StepRng`, yielding an arithmetic sequence starting with","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mock.rs","byte_start":195916,"byte_end":195985,"line_start":38,"line_end":38,"column_start":5,"column_end":74}},{"value":"/ `initial` and incremented by `increment` each time.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mock.rs","byte_start":195990,"byte_end":196045,"line_start":39,"line_end":39,"column_start":5,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":1946},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/std.rs","byte_start":198844,"byte_end":198850,"line_start":38,"line_end":38,"column_start":12,"column_end":18},"name":"StdRng","qualname":"::rngs::std::StdRng","value":"","parent":null,"children":[],"decl_id":null,"docs":" The standard RNG. The PRNG algorithm in `StdRng` is chosen to be efficient\n on the current platform, to be statistically strong and unpredictable\n (meaning a cryptographically secure PRNG).","sig":null,"attributes":[{"value":"/ The standard RNG. The PRNG algorithm in `StdRng` is chosen to be efficient","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/std.rs","byte_start":197914,"byte_end":197992,"line_start":21,"line_end":21,"column_start":1,"column_end":79}},{"value":"/ on the current platform, to be statistically strong and unpredictable","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/std.rs","byte_start":197993,"byte_end":198066,"line_start":22,"line_end":22,"column_start":1,"column_end":74}},{"value":"/ (meaning a cryptographically secure PRNG).","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/std.rs","byte_start":198067,"byte_end":198113,"line_start":23,"line_end":23,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/std.rs","byte_start":198114,"byte_end":198117,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ The current algorithm used is the ChaCha block cipher with 12 rounds. Please","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/std.rs","byte_start":198118,"byte_end":198198,"line_start":25,"line_end":25,"column_start":1,"column_end":81}},{"value":"/ see this relevant [rand issue] for the discussion. This may change as new ","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/std.rs","byte_start":198199,"byte_end":198277,"line_start":26,"line_end":26,"column_start":1,"column_end":79}},{"value":"/ evidence of cipher security and performance becomes available.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/std.rs","byte_start":198278,"byte_end":198344,"line_start":27,"line_end":27,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/std.rs","byte_start":198345,"byte_end":198348,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ The algorithm is deterministic but should not be considered reproducible","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/std.rs","byte_start":198349,"byte_end":198425,"line_start":29,"line_end":29,"column_start":1,"column_end":77}},{"value":"/ due to dependence on configuration and possible replacement in future","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/std.rs","byte_start":198426,"byte_end":198499,"line_start":30,"line_end":30,"column_start":1,"column_end":74}},{"value":"/ library versions. For a secure reproducible generator, we recommend use of","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/std.rs","byte_start":198500,"byte_end":198578,"line_start":31,"line_end":31,"column_start":1,"column_end":79}},{"value":"/ the [rand_chacha] crate directly.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/std.rs","byte_start":198579,"byte_end":198616,"line_start":32,"line_end":32,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/std.rs","byte_start":198617,"byte_end":198620,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ [rand_chacha]: https://crates.io/crates/rand_chacha","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/std.rs","byte_start":198621,"byte_end":198676,"line_start":34,"line_end":34,"column_start":1,"column_end":56}},{"value":"/ [rand issue]: https://github.com/rust-random/rand/issues/932","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/std.rs","byte_start":198677,"byte_end":198741,"line_start":35,"line_end":35,"column_start":1,"column_end":65}}]},{"kind":"Struct","id":{"krate":0,"index":1960},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/thread.rs","byte_start":203112,"byte_end":203121,"line_start":61,"line_end":61,"column_start":12,"column_end":21},"name":"ThreadRng","qualname":"::rngs::thread::ThreadRng","value":"ThreadRng {  }","parent":null,"children":[{"krate":0,"index":1961}],"decl_id":null,"docs":" A reference to the thread-local generator","sig":null,"attributes":[{"value":"/ A reference to the thread-local generator","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/thread.rs","byte_start":202029,"byte_end":202074,"line_start":40,"line_end":40,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/thread.rs","byte_start":202075,"byte_end":202078,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ An instance can be obtained via [`thread_rng`] or via `ThreadRng::default()`.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/thread.rs","byte_start":202079,"byte_end":202160,"line_start":42,"line_end":42,"column_start":1,"column_end":82}},{"value":"/ This handle is safe to use everywhere (including thread-local destructors)","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/thread.rs","byte_start":202161,"byte_end":202239,"line_start":43,"line_end":43,"column_start":1,"column_end":79}},{"value":"/ but cannot be passed between threads (is not `Send` or `Sync`).","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/thread.rs","byte_start":202240,"byte_end":202307,"line_start":44,"line_end":44,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/thread.rs","byte_start":202308,"byte_end":202311,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ `ThreadRng` uses the same PRNG as [`StdRng`] for security and performance","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/thread.rs","byte_start":202312,"byte_end":202389,"line_start":46,"line_end":46,"column_start":1,"column_end":78}},{"value":"/ and is automatically seeded from [`OsRng`].","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/thread.rs","byte_start":202390,"byte_end":202437,"line_start":47,"line_end":47,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/thread.rs","byte_start":202438,"byte_end":202441,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ Unlike `StdRng`, `ThreadRng` uses the  [`ReseedingRng`] wrapper to reseed","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/thread.rs","byte_start":202442,"byte_end":202519,"line_start":49,"line_end":49,"column_start":1,"column_end":78}},{"value":"/ the PRNG from fresh entropy every 64 kiB of random data as well as after a","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/thread.rs","byte_start":202520,"byte_end":202598,"line_start":50,"line_end":50,"column_start":1,"column_end":79}},{"value":"/ fork on Unix (though not quite immediately; see documentation of","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/thread.rs","byte_start":202599,"byte_end":202667,"line_start":51,"line_end":51,"column_start":1,"column_end":69}},{"value":"/ [`ReseedingRng`]).","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/thread.rs","byte_start":202668,"byte_end":202690,"line_start":52,"line_end":52,"column_start":1,"column_end":23}},{"value":"/ Note that the reseeding is done as an extra precaution against side-channel","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/thread.rs","byte_start":202691,"byte_end":202770,"line_start":53,"line_end":53,"column_start":1,"column_end":80}},{"value":"/ attacks and mis-use (e.g. if somehow weak entropy were supplied initially).","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/thread.rs","byte_start":202771,"byte_end":202850,"line_start":54,"line_end":54,"column_start":1,"column_end":80}},{"value":"/ The PRNG algorithms used are assumed to be secure.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/thread.rs","byte_start":202851,"byte_end":202905,"line_start":55,"line_end":55,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/thread.rs","byte_start":202906,"byte_end":202909,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ [`ReseedingRng`]: crate::rngs::adapter::ReseedingRng","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/thread.rs","byte_start":202910,"byte_end":202966,"line_start":57,"line_end":57,"column_start":1,"column_end":57}},{"value":"/ [`StdRng`]: crate::rngs::StdRng","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/thread.rs","byte_start":202967,"byte_end":203002,"line_start":58,"line_end":58,"column_start":1,"column_end":36}}]},{"kind":"Function","id":{"krate":0,"index":527},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/thread.rs","byte_start":204207,"byte_end":204217,"line_start":87,"line_end":87,"column_start":8,"column_end":18},"name":"thread_rng","qualname":"::rngs::thread::thread_rng","value":"pub fn thread_rng() -> ThreadRng","parent":null,"children":[],"decl_id":null,"docs":" Retrieve the lazily-initialized thread-local random number generator,\n seeded by the system. Intended to be used in method chaining style,\n e.g. `thread_rng().gen::<i32>()`, or cached locally, e.g.\n `let mut rng = thread_rng();`.  Invoked by the `Default` trait, making\n `ThreadRng::default()` equivalent.","sig":null,"attributes":[{"value":"/ Retrieve the lazily-initialized thread-local random number generator,","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/thread.rs","byte_start":203756,"byte_end":203829,"line_start":79,"line_end":79,"column_start":1,"column_end":74}},{"value":"/ seeded by the system. Intended to be used in method chaining style,","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/thread.rs","byte_start":203830,"byte_end":203901,"line_start":80,"line_end":80,"column_start":1,"column_end":72}},{"value":"/ e.g. `thread_rng().gen::<i32>()`, or cached locally, e.g.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/thread.rs","byte_start":203902,"byte_end":203963,"line_start":81,"line_end":81,"column_start":1,"column_end":62}},{"value":"/ `let mut rng = thread_rng();`.  Invoked by the `Default` trait, making","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/thread.rs","byte_start":203964,"byte_end":204038,"line_start":82,"line_end":82,"column_start":1,"column_end":75}},{"value":"/ `ThreadRng::default()` equivalent.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/thread.rs","byte_start":204039,"byte_end":204077,"line_start":83,"line_end":83,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/thread.rs","byte_start":204078,"byte_end":204081,"line_start":84,"line_end":84,"column_start":1,"column_end":4}},{"value":"/ For more information see [`ThreadRng`].","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/thread.rs","byte_start":204082,"byte_end":204125,"line_start":85,"line_end":85,"column_start":1,"column_end":44}}]},{"kind":"Mod","id":{"krate":0,"index":540},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"seq","qualname":"::seq","value":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","parent":null,"children":[{"krate":0,"index":541},{"krate":0,"index":642},{"krate":0,"index":643},{"krate":0,"index":644},{"krate":0,"index":645},{"krate":0,"index":646},{"krate":0,"index":647},{"krate":0,"index":648},{"krate":0,"index":649},{"krate":0,"index":677},{"krate":0,"index":687},{"krate":0,"index":723},{"krate":0,"index":2004},{"krate":0,"index":2011},{"krate":0,"index":725},{"krate":0,"index":733},{"krate":0,"index":738}],"decl_id":null,"docs":" Sequence-related functionality","sig":null,"attributes":[{"value":"/ Sequence-related functionality","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":206102,"byte_end":206136,"line_start":9,"line_end":9,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":206137,"byte_end":206140,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ This module provides:","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":206141,"byte_end":206166,"line_start":11,"line_end":11,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":206167,"byte_end":206170,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ *   [`SliceRandom`] slice sampling and mutation","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":206171,"byte_end":206222,"line_start":13,"line_end":13,"column_start":1,"column_end":52}},{"value":"/ *   [`IteratorRandom`] iterator sampling","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":206223,"byte_end":206267,"line_start":14,"line_end":14,"column_start":1,"column_end":45}},{"value":"/ *   [`index::sample`] low-level API to choose multiple indices from","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":206268,"byte_end":206339,"line_start":15,"line_end":15,"column_start":1,"column_end":72}},{"value":"/     `0..length`","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":206340,"byte_end":206359,"line_start":16,"line_end":16,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":206360,"byte_end":206363,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ Also see:","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":206364,"byte_end":206377,"line_start":18,"line_end":18,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":206378,"byte_end":206381,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ *   [`crate::distributions::WeightedIndex`] distribution which provides","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":206382,"byte_end":206457,"line_start":20,"line_end":20,"column_start":1,"column_end":76}},{"value":"/     weighted index sampling.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":206458,"byte_end":206490,"line_start":21,"line_end":21,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":206491,"byte_end":206494,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ In order to make results reproducible across 32-64 bit architectures, all","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":206495,"byte_end":206572,"line_start":23,"line_end":23,"column_start":1,"column_end":78}},{"value":"/ `usize` indices are sampled as a `u32` where possible (also providing a","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":206573,"byte_end":206648,"line_start":24,"line_end":24,"column_start":1,"column_end":76}},{"value":"/ small performance boost in some cases).","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":206649,"byte_end":206692,"line_start":25,"line_end":25,"column_start":1,"column_end":44}}]},{"kind":"Mod","id":{"krate":0,"index":541},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/index.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"index","qualname":"::seq::index","value":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/index.rs","parent":null,"children":[{"krate":0,"index":542},{"krate":0,"index":543},{"krate":0,"index":544},{"krate":0,"index":545},{"krate":0,"index":546},{"krate":0,"index":547},{"krate":0,"index":548},{"krate":0,"index":549},{"krate":0,"index":550},{"krate":0,"index":551},{"krate":0,"index":552},{"krate":0,"index":1971},{"krate":0,"index":1980},{"krate":0,"index":1978},{"krate":0,"index":553},{"krate":0,"index":560},{"krate":0,"index":564},{"krate":0,"index":569},{"krate":0,"index":571},{"krate":0,"index":1982},{"krate":0,"index":1990},{"krate":0,"index":573},{"krate":0,"index":580},{"krate":0,"index":1993},{"krate":0,"index":2002},{"krate":0,"index":2000},{"krate":0,"index":582},{"krate":0,"index":589},{"krate":0,"index":590},{"krate":0,"index":597},{"krate":0,"index":601},{"krate":0,"index":622},{"krate":0,"index":625},{"krate":0,"index":627},{"krate":0,"index":631},{"krate":0,"index":635},{"krate":0,"index":639}],"decl_id":null,"docs":" Low-level API for sampling indices\n","sig":null,"attributes":[{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":206695,"byte_end":206720,"line_start":28,"line_end":28,"column_start":1,"column_end":26}},{"value":"/ Low-level API for sampling indices","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/index.rs","byte_start":252503,"byte_end":252541,"line_start":9,"line_end":9,"column_start":1,"column_end":39}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1972},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/index.rs","byte_start":253307,"byte_end":253310,"line_start":35,"line_end":35,"column_start":5,"column_end":8},"name":"U32","qualname":"::seq::index::IndexVec::U32","value":"IndexVec::U32(Vec<u32>)","parent":{"krate":0,"index":1971},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1975},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/index.rs","byte_start":253345,"byte_end":253350,"line_start":37,"line_end":37,"column_start":5,"column_end":10},"name":"USize","qualname":"::seq::index::IndexVec::USize","value":"IndexVec::USize(Vec<usize>)","parent":{"krate":0,"index":1971},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1971},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/index.rs","byte_start":253273,"byte_end":253281,"line_start":33,"line_end":33,"column_start":10,"column_end":18},"name":"IndexVec","qualname":"::seq::index::IndexVec","value":"pub enum IndexVec {\n\n    #[doc(hidden)]\n    U32(Vec<u32>),\n\n    #[doc(hidden)]\n    USize(Vec<usize>),\n}","parent":null,"children":[{"krate":0,"index":1972},{"krate":0,"index":1975}],"decl_id":null,"docs":" A vector of indices.","sig":null,"attributes":[{"value":"/ A vector of indices.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/index.rs","byte_start":253095,"byte_end":253119,"line_start":28,"line_end":28,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/index.rs","byte_start":253120,"byte_end":253123,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ Multiple internal representations are possible.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/index.rs","byte_start":253124,"byte_end":253175,"line_start":30,"line_end":30,"column_start":1,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":554},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/index.rs","byte_start":253446,"byte_end":253449,"line_start":43,"line_end":43,"column_start":12,"column_end":15},"name":"len","qualname":"<IndexVec>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of indices\n","sig":null,"attributes":[{"value":"/ Returns the number of indices","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/index.rs","byte_start":253387,"byte_end":253420,"line_start":41,"line_end":41,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/index.rs","byte_start":253425,"byte_end":253434,"line_start":42,"line_end":42,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":555},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/index.rs","byte_start":253667,"byte_end":253675,"line_start":52,"line_end":52,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<IndexVec>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the length is 0.\n","sig":null,"attributes":[{"value":"/ Returns `true` if the length is 0.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/index.rs","byte_start":253603,"byte_end":253641,"line_start":50,"line_end":50,"column_start":5,"column_end":43}},{"value":"inline","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/index.rs","byte_start":253646,"byte_end":253655,"line_start":51,"line_end":51,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":556},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/index.rs","byte_start":254012,"byte_end":254017,"line_start":64,"line_end":64,"column_start":12,"column_end":17},"name":"index","qualname":"<IndexVec>::index","value":"pub fn index(&Self, usize) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the value at the given `index`.","sig":null,"attributes":[{"value":"/ Return the value at the given `index`.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/index.rs","byte_start":253838,"byte_end":253880,"line_start":59,"line_end":59,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/index.rs","byte_start":253885,"byte_end":253888,"line_start":60,"line_end":60,"column_start":5,"column_end":8}},{"value":"/ (Note: we cannot implement [`std::ops::Index`] because of lifetime","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/index.rs","byte_start":253893,"byte_end":253963,"line_start":61,"line_end":61,"column_start":5,"column_end":75}},{"value":"/ restrictions.)","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/index.rs","byte_start":253968,"byte_end":253986,"line_start":62,"line_end":62,"column_start":5,"column_end":23}},{"value":"inline","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/index.rs","byte_start":253991,"byte_end":254000,"line_start":63,"line_end":63,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":557},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/index.rs","byte_start":254296,"byte_end":254304,"line_start":73,"line_end":73,"column_start":12,"column_end":20},"name":"into_vec","qualname":"<IndexVec>::into_vec","value":"pub fn into_vec(Self) -> Vec<usize>","parent":null,"children":[],"decl_id":null,"docs":" Return result as a `Vec<usize>`. Conversion may or may not be trivial.\n","sig":null,"attributes":[{"value":"/ Return result as a `Vec<usize>`. Conversion may or may not be trivial.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/index.rs","byte_start":254196,"byte_end":254270,"line_start":71,"line_end":71,"column_start":5,"column_end":79}},{"value":"inline","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/index.rs","byte_start":254275,"byte_end":254284,"line_start":72,"line_end":72,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":559},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/index.rs","byte_start":254569,"byte_end":254573,"line_start":82,"line_end":82,"column_start":12,"column_end":16},"name":"iter","qualname":"<IndexVec>::iter","value":"pub fn iter(&Self) -> IndexVecIter","parent":null,"children":[],"decl_id":null,"docs":" Iterate over the indices as a sequence of `usize` values\n","sig":null,"attributes":[{"value":"/ Iterate over the indices as a sequence of `usize` values","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/index.rs","byte_start":254483,"byte_end":254543,"line_start":80,"line_end":80,"column_start":5,"column_end":65}},{"value":"inline","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/index.rs","byte_start":254548,"byte_end":254557,"line_start":81,"line_end":81,"column_start":5,"column_end":14}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1984},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/index.rs","byte_start":256138,"byte_end":256141,"line_start":138,"line_end":138,"column_start":5,"column_end":8},"name":"U32","qualname":"::seq::index::IndexVecIter::U32","value":"IndexVecIter::U32(slice::Iter)","parent":{"krate":0,"index":1982},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1987},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/index.rs","byte_start":256188,"byte_end":256193,"line_start":140,"line_end":140,"column_start":5,"column_end":10},"name":"USize","qualname":"::seq::index::IndexVecIter::USize","value":"IndexVecIter::USize(slice::Iter)","parent":{"krate":0,"index":1982},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1982},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/index.rs","byte_start":256096,"byte_end":256108,"line_start":136,"line_end":136,"column_start":10,"column_end":22},"name":"IndexVecIter","qualname":"::seq::index::IndexVecIter","value":"pub enum IndexVecIter<'a> {\n\n    #[doc(hidden)]\n    U32(slice::Iter),\n\n    #[doc(hidden)]\n    USize(slice::Iter),\n}","parent":null,"children":[{"krate":0,"index":1984},{"krate":0,"index":1987}],"decl_id":null,"docs":" Return type of `IndexVec::iter`.\n","sig":null,"attributes":[{"value":"/ Return type of `IndexVec::iter`.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/index.rs","byte_start":256033,"byte_end":256069,"line_start":134,"line_end":134,"column_start":1,"column_end":37}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1994},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/index.rs","byte_start":256929,"byte_end":256932,"line_start":170,"line_end":170,"column_start":5,"column_end":8},"name":"U32","qualname":"::seq::index::IndexVecIntoIter::U32","value":"IndexVecIntoIter::U32(vec::IntoIter<u32>)","parent":{"krate":0,"index":1993},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1997},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/index.rs","byte_start":256977,"byte_end":256982,"line_start":172,"line_end":172,"column_start":5,"column_end":10},"name":"USize","qualname":"::seq::index::IndexVecIntoIter::USize","value":"IndexVecIntoIter::USize(vec::IntoIter<usize>)","parent":{"krate":0,"index":1993},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1993},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/index.rs","byte_start":256887,"byte_end":256903,"line_start":168,"line_end":168,"column_start":10,"column_end":26},"name":"IndexVecIntoIter","qualname":"::seq::index::IndexVecIntoIter","value":"pub enum IndexVecIntoIter {\n\n    #[doc(hidden)]\n    U32(vec::IntoIter<u32>),\n\n    #[doc(hidden)]\n    USize(vec::IntoIter<usize>),\n}","parent":null,"children":[{"krate":0,"index":1994},{"krate":0,"index":1997}],"decl_id":null,"docs":" Return type of `IndexVec::into_iter`.\n","sig":null,"attributes":[{"value":"/ Return type of `IndexVec::into_iter`.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/index.rs","byte_start":256812,"byte_end":256853,"line_start":166,"line_end":166,"column_start":1,"column_end":42}}]},{"kind":"Function","id":{"krate":0,"index":590},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/index.rs","byte_start":258658,"byte_end":258664,"line_start":222,"line_end":222,"column_start":8,"column_end":14},"name":"sample","qualname":"::seq::index::sample","value":"pub fn sample<R: ?Sized>(&mut R, usize, usize) -> IndexVec where R: Rng","parent":null,"children":[],"decl_id":null,"docs":" Randomly sample exactly `amount` distinct indices from `0..length`, and\n return them in random order (fully shuffled).","sig":null,"attributes":[{"value":"/ Randomly sample exactly `amount` distinct indices from `0..length`, and","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/index.rs","byte_start":257590,"byte_end":257665,"line_start":200,"line_end":200,"column_start":1,"column_end":76}},{"value":"/ return them in random order (fully shuffled).","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/index.rs","byte_start":257666,"byte_end":257715,"line_start":201,"line_end":201,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/index.rs","byte_start":257716,"byte_end":257719,"line_start":202,"line_end":202,"column_start":1,"column_end":4}},{"value":"/ This method is used internally by the slice sampling methods, but it can","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/index.rs","byte_start":257720,"byte_end":257796,"line_start":203,"line_end":203,"column_start":1,"column_end":77}},{"value":"/ sometimes be useful to have the indices themselves so this is provided as","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/index.rs","byte_start":257797,"byte_end":257874,"line_start":204,"line_end":204,"column_start":1,"column_end":78}},{"value":"/ an alternative.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/index.rs","byte_start":257875,"byte_end":257894,"line_start":205,"line_end":205,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/index.rs","byte_start":257895,"byte_end":257898,"line_start":206,"line_end":206,"column_start":1,"column_end":4}},{"value":"/ The implementation used is not specified; we automatically select the","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/index.rs","byte_start":257899,"byte_end":257972,"line_start":207,"line_end":207,"column_start":1,"column_end":74}},{"value":"/ fastest available algorithm for the `length` and `amount` parameters","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/index.rs","byte_start":257973,"byte_end":258045,"line_start":208,"line_end":208,"column_start":1,"column_end":73}},{"value":"/ (based on detailed profiling on an Intel Haswell CPU). Roughly speaking,","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/index.rs","byte_start":258046,"byte_end":258122,"line_start":209,"line_end":209,"column_start":1,"column_end":77}},{"value":"/ complexity is `O(amount)`, except that when `amount` is small, performance","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/index.rs","byte_start":258123,"byte_end":258201,"line_start":210,"line_end":210,"column_start":1,"column_end":79}},{"value":"/ is closer to `O(amount^2)`, and when `length` is close to `amount` then","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/index.rs","byte_start":258202,"byte_end":258277,"line_start":211,"line_end":211,"column_start":1,"column_end":76}},{"value":"/ `O(length)`.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/index.rs","byte_start":258278,"byte_end":258294,"line_start":212,"line_end":212,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/index.rs","byte_start":258295,"byte_end":258298,"line_start":213,"line_end":213,"column_start":1,"column_end":4}},{"value":"/ Note that performance is significantly better over `u32` indices than over","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/index.rs","byte_start":258299,"byte_end":258377,"line_start":214,"line_end":214,"column_start":1,"column_end":79}},{"value":"/ `u64` indices. Because of this we hide the underlying type behind an","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/index.rs","byte_start":258378,"byte_end":258450,"line_start":215,"line_end":215,"column_start":1,"column_end":73}},{"value":"/ abstraction, `IndexVec`.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/index.rs","byte_start":258451,"byte_end":258479,"line_start":216,"line_end":216,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/index.rs","byte_start":258480,"byte_end":258483,"line_start":217,"line_end":217,"column_start":1,"column_end":4}},{"value":"/ If an allocation-free `no_std` function is required, it is suggested","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/index.rs","byte_start":258484,"byte_end":258556,"line_start":218,"line_end":218,"column_start":1,"column_end":73}},{"value":"/ to adapt the internal `sample_floyd` implementation.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/index.rs","byte_start":258557,"byte_end":258613,"line_start":219,"line_end":219,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/index.rs","byte_start":258614,"byte_end":258617,"line_start":220,"line_end":220,"column_start":1,"column_end":4}},{"value":"/ Panics if `amount > length`.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/index.rs","byte_start":258618,"byte_end":258650,"line_start":221,"line_end":221,"column_start":1,"column_end":33}}]},{"kind":"Function","id":{"krate":0,"index":597},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/index.rs","byte_start":260913,"byte_end":260928,"line_start":277,"line_end":277,"column_start":8,"column_end":23},"name":"sample_weighted","qualname":"::seq::index::sample_weighted","value":"pub fn sample_weighted<R: ?Sized, F, X>(&mut R, usize, F, usize)\n-> Result<IndexVec, WeightedError> where R: Rng, F: Fn(usize) -> X,\nX: Into<f64>","parent":null,"children":[],"decl_id":null,"docs":" Randomly sample exactly `amount` distinct indices from `0..length`, and\n return them in an arbitrary order (there is no guarantee of shuffling or\n ordering). The weights are to be provided by the input function `weights`,\n which will be called once for each index.","sig":null,"attributes":[{"value":"/ Randomly sample exactly `amount` distinct indices from `0..length`, and","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/index.rs","byte_start":260139,"byte_end":260214,"line_start":261,"line_end":261,"column_start":1,"column_end":76}},{"value":"/ return them in an arbitrary order (there is no guarantee of shuffling or","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/index.rs","byte_start":260215,"byte_end":260291,"line_start":262,"line_end":262,"column_start":1,"column_end":77}},{"value":"/ ordering). The weights are to be provided by the input function `weights`,","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/index.rs","byte_start":260292,"byte_end":260370,"line_start":263,"line_end":263,"column_start":1,"column_end":79}},{"value":"/ which will be called once for each index.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/index.rs","byte_start":260371,"byte_end":260416,"line_start":264,"line_end":264,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/index.rs","byte_start":260417,"byte_end":260420,"line_start":265,"line_end":265,"column_start":1,"column_end":4}},{"value":"/ This method is used internally by the slice sampling methods, but it can","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/index.rs","byte_start":260421,"byte_end":260497,"line_start":266,"line_end":266,"column_start":1,"column_end":77}},{"value":"/ sometimes be useful to have the indices themselves so this is provided as","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/index.rs","byte_start":260498,"byte_end":260575,"line_start":267,"line_end":267,"column_start":1,"column_end":78}},{"value":"/ an alternative.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/index.rs","byte_start":260576,"byte_end":260595,"line_start":268,"line_end":268,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/index.rs","byte_start":260596,"byte_end":260599,"line_start":269,"line_end":269,"column_start":1,"column_end":4}},{"value":"/ This implementation uses `O(length + amount)` space and `O(length)` time","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/index.rs","byte_start":260600,"byte_end":260676,"line_start":270,"line_end":270,"column_start":1,"column_end":77}},{"value":"/ if the \"nightly\" feature is enabled, or `O(length)` space and","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/index.rs","byte_start":260677,"byte_end":260742,"line_start":271,"line_end":271,"column_start":1,"column_end":66}},{"value":"/ `O(length + amount * log length)` time otherwise.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/index.rs","byte_start":260743,"byte_end":260796,"line_start":272,"line_end":272,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/index.rs","byte_start":260797,"byte_end":260800,"line_start":273,"line_end":273,"column_start":1,"column_end":4}},{"value":"/ Panics if `amount > length`.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/index.rs","byte_start":260801,"byte_end":260833,"line_start":274,"line_end":274,"column_start":1,"column_end":33}},{"value":"cfg(feature = \"std\")","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/index.rs","byte_start":260834,"byte_end":260857,"line_start":275,"line_end":275,"column_start":1,"column_end":24}}]},{"kind":"Trait","id":{"krate":0,"index":649},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":207642,"byte_end":207653,"line_start":59,"line_end":59,"column_start":11,"column_end":22},"name":"SliceRandom","qualname":"::seq::SliceRandom","value":"SliceRandom","parent":null,"children":[{"krate":0,"index":650},{"krate":0,"index":651},{"krate":0,"index":653},{"krate":0,"index":655},{"krate":0,"index":657},{"krate":0,"index":663},{"krate":0,"index":669},{"krate":0,"index":673},{"krate":0,"index":675}],"decl_id":null,"docs":" Extension trait on slices, providing random mutation and sampling methods.","sig":null,"attributes":[{"value":"/ Extension trait on slices, providing random mutation and sampling methods.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":207060,"byte_end":207138,"line_start":41,"line_end":41,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":207139,"byte_end":207142,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ This trait is implemented on all `[T]` slice types, providing several","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":207143,"byte_end":207216,"line_start":43,"line_end":43,"column_start":1,"column_end":74}},{"value":"/ methods for choosing and shuffling elements. You must `use` this trait:","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":207217,"byte_end":207292,"line_start":44,"line_end":44,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":207293,"byte_end":207296,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":207297,"byte_end":207304,"line_start":46,"line_end":46,"column_start":1,"column_end":8}},{"value":"/ use rand::seq::SliceRandom;","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":207305,"byte_end":207336,"line_start":47,"line_end":47,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":207337,"byte_end":207340,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ let mut rng = rand::thread_rng();","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":207341,"byte_end":207378,"line_start":49,"line_end":49,"column_start":1,"column_end":38}},{"value":"/ let mut bytes = \"Hello, random!\".to_string().into_bytes();","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":207379,"byte_end":207441,"line_start":50,"line_end":50,"column_start":1,"column_end":63}},{"value":"/ bytes.shuffle(&mut rng);","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":207442,"byte_end":207470,"line_start":51,"line_end":51,"column_start":1,"column_end":29}},{"value":"/ let str = String::from_utf8(bytes).unwrap();","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":207471,"byte_end":207519,"line_start":52,"line_end":52,"column_start":1,"column_end":49}},{"value":"/ println!(\"{}\", str);","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":207520,"byte_end":207544,"line_start":53,"line_end":53,"column_start":1,"column_end":25}},{"value":"/ ```","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":207545,"byte_end":207552,"line_start":54,"line_end":54,"column_start":1,"column_end":8}},{"value":"/ Example output (non-deterministic):","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":207553,"byte_end":207592,"line_start":55,"line_end":55,"column_start":1,"column_end":40}},{"value":"/ ```none","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":207593,"byte_end":207604,"line_start":56,"line_end":56,"column_start":1,"column_end":12}},{"value":"/ l,nmroHado !le","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":207605,"byte_end":207623,"line_start":57,"line_end":57,"column_start":1,"column_end":19}},{"value":"/ ```","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":207624,"byte_end":207631,"line_start":58,"line_end":58,"column_start":1,"column_end":8}}]},{"kind":"Type","id":{"krate":0,"index":650},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":207691,"byte_end":207695,"line_start":61,"line_end":61,"column_start":10,"column_end":14},"name":"Item","qualname":"::seq::SliceRandom::Item","value":"type Item;","parent":{"krate":0,"index":649},"children":[],"decl_id":null,"docs":" The element type.\n","sig":null,"attributes":[{"value":"/ The element type.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":207660,"byte_end":207681,"line_start":60,"line_end":60,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":651},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":208181,"byte_end":208187,"line_start":79,"line_end":79,"column_start":8,"column_end":14},"name":"choose","qualname":"::seq::SliceRandom::choose","value":"pub fn choose<R: ?Sized>(&Self, &mut R) -> Option<&Self::Item> where R: Rng","parent":{"krate":0,"index":649},"children":[],"decl_id":null,"docs":" Returns a reference to one random element of the slice, or `None` if the\n slice is empty.","sig":null,"attributes":[{"value":"/ Returns a reference to one random element of the slice, or `None` if the","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":207702,"byte_end":207778,"line_start":63,"line_end":63,"column_start":5,"column_end":81}},{"value":"/ slice is empty.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":207783,"byte_end":207802,"line_start":64,"line_end":64,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":207807,"byte_end":207810,"line_start":65,"line_end":65,"column_start":5,"column_end":8}},{"value":"/ For slices, complexity is `O(1)`.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":207815,"byte_end":207852,"line_start":66,"line_end":66,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":207857,"byte_end":207860,"line_start":67,"line_end":67,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":207865,"byte_end":207878,"line_start":68,"line_end":68,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":207883,"byte_end":207886,"line_start":69,"line_end":69,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":207891,"byte_end":207898,"line_start":70,"line_end":70,"column_start":5,"column_end":12}},{"value":"/ use rand::thread_rng;","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":207903,"byte_end":207928,"line_start":71,"line_end":71,"column_start":5,"column_end":30}},{"value":"/ use rand::seq::SliceRandom;","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":207933,"byte_end":207964,"line_start":72,"line_end":72,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":207969,"byte_end":207972,"line_start":73,"line_end":73,"column_start":5,"column_end":8}},{"value":"/ let choices = [1, 2, 4, 8, 16, 32];","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":207977,"byte_end":208016,"line_start":74,"line_end":74,"column_start":5,"column_end":44}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":208021,"byte_end":208052,"line_start":75,"line_end":75,"column_start":5,"column_end":36}},{"value":"/ println!(\"{:?}\", choices.choose(&mut rng));","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":208057,"byte_end":208104,"line_start":76,"line_end":76,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(choices[..0].choose(&mut rng), None);","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":208109,"byte_end":208161,"line_start":77,"line_end":77,"column_start":5,"column_end":57}},{"value":"/ ```","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":208166,"byte_end":208173,"line_start":78,"line_end":78,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":653},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":208432,"byte_end":208442,"line_start":86,"line_end":86,"column_start":8,"column_end":18},"name":"choose_mut","qualname":"::seq::SliceRandom::choose_mut","value":"pub fn choose_mut<R: ?Sized>(&mut Self, &mut R) -> Option<&mut Self::Item>\nwhere R: Rng","parent":{"krate":0,"index":649},"children":[],"decl_id":null,"docs":" Returns a mutable reference to one random element of the slice, or\n `None` if the slice is empty.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to one random element of the slice, or","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":208266,"byte_end":208336,"line_start":82,"line_end":82,"column_start":5,"column_end":75}},{"value":"/ `None` if the slice is empty.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":208341,"byte_end":208374,"line_start":83,"line_end":83,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":208379,"byte_end":208382,"line_start":84,"line_end":84,"column_start":5,"column_end":8}},{"value":"/ For slices, complexity is `O(1)`.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":208387,"byte_end":208424,"line_start":85,"line_end":85,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":655},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":209531,"byte_end":209546,"line_start":115,"line_end":115,"column_start":8,"column_end":23},"name":"choose_multiple","qualname":"::seq::SliceRandom::choose_multiple","value":"pub fn choose_multiple<R: ?Sized>(&Self, &mut R, usize)\n-> SliceChooseIter<, Self, Self::Item> where R: Rng","parent":{"krate":0,"index":649},"children":[],"decl_id":null,"docs":" Chooses `amount` elements from the slice at random, without repetition,\n and in random order. The returned iterator is appropriate both for\n collection into a `Vec` and filling an existing buffer (see example).","sig":null,"attributes":[{"value":"/ Chooses `amount` elements from the slice at random, without repetition,","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":208529,"byte_end":208604,"line_start":89,"line_end":89,"column_start":5,"column_end":80}},{"value":"/ and in random order. The returned iterator is appropriate both for","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":208609,"byte_end":208679,"line_start":90,"line_end":90,"column_start":5,"column_end":75}},{"value":"/ collection into a `Vec` and filling an existing buffer (see example).","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":208684,"byte_end":208757,"line_start":91,"line_end":91,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":208762,"byte_end":208765,"line_start":92,"line_end":92,"column_start":5,"column_end":8}},{"value":"/ In case this API is not sufficiently flexible, use [`index::sample`].","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":208770,"byte_end":208843,"line_start":93,"line_end":93,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":208848,"byte_end":208851,"line_start":94,"line_end":94,"column_start":5,"column_end":8}},{"value":"/ For slices, complexity is the same as [`index::sample`].","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":208856,"byte_end":208916,"line_start":95,"line_end":95,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":208921,"byte_end":208924,"line_start":96,"line_end":96,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":208929,"byte_end":208942,"line_start":97,"line_end":97,"column_start":5,"column_end":18}},{"value":"/ ```","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":208947,"byte_end":208954,"line_start":98,"line_end":98,"column_start":5,"column_end":12}},{"value":"/ use rand::seq::SliceRandom;","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":208959,"byte_end":208990,"line_start":99,"line_end":99,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":208995,"byte_end":208998,"line_start":100,"line_end":100,"column_start":5,"column_end":8}},{"value":"/ let mut rng = &mut rand::thread_rng();","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":209003,"byte_end":209045,"line_start":101,"line_end":101,"column_start":5,"column_end":47}},{"value":"/ let sample = \"Hello, audience!\".as_bytes();","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":209050,"byte_end":209097,"line_start":102,"line_end":102,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":209102,"byte_end":209105,"line_start":103,"line_end":103,"column_start":5,"column_end":8}},{"value":"/ // collect the results into a vector:","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":209110,"byte_end":209151,"line_start":104,"line_end":104,"column_start":5,"column_end":46}},{"value":"/ let v: Vec<u8> = sample.choose_multiple(&mut rng, 3).cloned().collect();","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":209156,"byte_end":209232,"line_start":105,"line_end":105,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":209237,"byte_end":209240,"line_start":106,"line_end":106,"column_start":5,"column_end":8}},{"value":"/ // store in a buffer:","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":209245,"byte_end":209270,"line_start":107,"line_end":107,"column_start":5,"column_end":30}},{"value":"/ let mut buf = [0u8; 5];","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":209275,"byte_end":209302,"line_start":108,"line_end":108,"column_start":5,"column_end":32}},{"value":"/ for (b, slot) in sample.choose_multiple(&mut rng, buf.len()).zip(buf.iter_mut()) {","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":209307,"byte_end":209393,"line_start":109,"line_end":109,"column_start":5,"column_end":91}},{"value":"/     *slot = *b;","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":209398,"byte_end":209417,"line_start":110,"line_end":110,"column_start":5,"column_end":24}},{"value":"/ }","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":209422,"byte_end":209427,"line_start":111,"line_end":111,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":209432,"byte_end":209439,"line_start":112,"line_end":112,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":209444,"byte_end":209469,"line_start":113,"line_end":113,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":657},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":210742,"byte_end":210757,"line_start":143,"line_end":143,"column_start":8,"column_end":23},"name":"choose_weighted","qualname":"::seq::SliceRandom::choose_weighted","value":"pub fn choose_weighted<R: ?Sized, F, B, X>(&Self, &mut R, F)\n-> Result<&Self::Item, WeightedError> where R: Rng, F: Fn(&Self::Item) -> B,\nB: SampleBorrow<X>, X: SampleUniform + for<'a> ::core::ops::AddAssign<&'a X> +\n::core::cmp::PartialOrd<X> + Clone + Default","parent":{"krate":0,"index":649},"children":[],"decl_id":null,"docs":" Similar to [`choose`], but where the likelihood of each outcome may be\n specified.","sig":null,"attributes":[{"value":"/ Similar to [`choose`], but where the likelihood of each outcome may be","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":209654,"byte_end":209728,"line_start":118,"line_end":118,"column_start":5,"column_end":79}},{"value":"/ specified.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":209733,"byte_end":209747,"line_start":119,"line_end":119,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":209752,"byte_end":209755,"line_start":120,"line_end":120,"column_start":5,"column_end":8}},{"value":"/ The specified function `weight` maps each item `x` to a relative","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":209760,"byte_end":209828,"line_start":121,"line_end":121,"column_start":5,"column_end":73}},{"value":"/ likelihood `weight(x)`. The probability of each item being selected is","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":209833,"byte_end":209907,"line_start":122,"line_end":122,"column_start":5,"column_end":79}},{"value":"/ therefore `weight(x) / s`, where `s` is the sum of all `weight(x)`.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":209912,"byte_end":209983,"line_start":123,"line_end":123,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":209988,"byte_end":209991,"line_start":124,"line_end":124,"column_start":5,"column_end":8}},{"value":"/ For slices of length `n`, complexity is `O(n)`.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":209996,"byte_end":210047,"line_start":125,"line_end":125,"column_start":5,"column_end":56}},{"value":"/ See also [`choose_weighted_mut`], [`distributions::weighted`].","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":210052,"byte_end":210118,"line_start":126,"line_end":126,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":210123,"byte_end":210126,"line_start":127,"line_end":127,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":210131,"byte_end":210144,"line_start":128,"line_end":128,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":210149,"byte_end":210152,"line_start":129,"line_end":129,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":210157,"byte_end":210164,"line_start":130,"line_end":130,"column_start":5,"column_end":12}},{"value":"/ use rand::prelude::*;","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":210169,"byte_end":210194,"line_start":131,"line_end":131,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":210199,"byte_end":210202,"line_start":132,"line_end":132,"column_start":5,"column_end":8}},{"value":"/ let choices = [('a', 2), ('b', 1), ('c', 1)];","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":210207,"byte_end":210256,"line_start":133,"line_end":133,"column_start":5,"column_end":54}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":210261,"byte_end":210292,"line_start":134,"line_end":134,"column_start":5,"column_end":36}},{"value":"/ // 50% chance to print 'a', 25% chance to print 'b', 25% chance to print 'c'","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":210297,"byte_end":210377,"line_start":135,"line_end":135,"column_start":5,"column_end":85}},{"value":"/ println!(\"{:?}\", choices.choose_weighted(&mut rng, |item| item.1).unwrap().0);","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":210382,"byte_end":210464,"line_start":136,"line_end":136,"column_start":5,"column_end":87}},{"value":"/ ```","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":210469,"byte_end":210476,"line_start":137,"line_end":137,"column_start":5,"column_end":12}},{"value":"/ [`choose`]: SliceRandom::choose","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":210481,"byte_end":210516,"line_start":138,"line_end":138,"column_start":5,"column_end":40}},{"value":"/ [`choose_weighted_mut`]: SliceRandom::choose_weighted_mut","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":210521,"byte_end":210582,"line_start":139,"line_end":139,"column_start":5,"column_end":66}},{"value":"/ [`distributions::weighted`]: crate::distributions::weighted","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":210587,"byte_end":210650,"line_start":140,"line_end":140,"column_start":5,"column_end":68}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":210655,"byte_end":210680,"line_start":141,"line_end":141,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":663},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":211854,"byte_end":211873,"line_start":171,"line_end":171,"column_start":8,"column_end":27},"name":"choose_weighted_mut","qualname":"::seq::SliceRandom::choose_weighted_mut","value":"pub fn choose_weighted_mut<R: ?Sized, F, B, X>(&mut Self, &mut R, F)\n-> Result<&mut Self::Item, WeightedError> where R: Rng, F: Fn(&Self::Item) ->\nB, B: SampleBorrow<X>, X: SampleUniform +\nfor<'a> ::core::ops::AddAssign<&'a X> + ::core::cmp::PartialOrd<X> + Clone +\nDefault","parent":{"krate":0,"index":649},"children":[],"decl_id":null,"docs":" Similar to [`choose_mut`], but where the likelihood of each outcome may\n be specified.","sig":null,"attributes":[{"value":"/ Similar to [`choose_mut`], but where the likelihood of each outcome may","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":211116,"byte_end":211191,"line_start":156,"line_end":156,"column_start":5,"column_end":80}},{"value":"/ be specified.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":211196,"byte_end":211213,"line_start":157,"line_end":157,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":211218,"byte_end":211221,"line_start":158,"line_end":158,"column_start":5,"column_end":8}},{"value":"/ The specified function `weight` maps each item `x` to a relative","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":211226,"byte_end":211294,"line_start":159,"line_end":159,"column_start":5,"column_end":73}},{"value":"/ likelihood `weight(x)`. The probability of each item being selected is","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":211299,"byte_end":211373,"line_start":160,"line_end":160,"column_start":5,"column_end":79}},{"value":"/ therefore `weight(x) / s`, where `s` is the sum of all `weight(x)`.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":211378,"byte_end":211449,"line_start":161,"line_end":161,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":211454,"byte_end":211457,"line_start":162,"line_end":162,"column_start":5,"column_end":8}},{"value":"/ For slices of length `n`, complexity is `O(n)`.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":211462,"byte_end":211513,"line_start":163,"line_end":163,"column_start":5,"column_end":56}},{"value":"/ See also [`choose_weighted`], [`distributions::weighted`].","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":211518,"byte_end":211580,"line_start":164,"line_end":164,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":211585,"byte_end":211588,"line_start":165,"line_end":165,"column_start":5,"column_end":8}},{"value":"/ [`choose_mut`]: SliceRandom::choose_mut","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":211593,"byte_end":211636,"line_start":166,"line_end":166,"column_start":5,"column_end":48}},{"value":"/ [`choose_weighted`]: SliceRandom::choose_weighted","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":211641,"byte_end":211694,"line_start":167,"line_end":167,"column_start":5,"column_end":58}},{"value":"/ [`distributions::weighted`]: crate::distributions::weighted","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":211699,"byte_end":211762,"line_start":168,"line_end":168,"column_start":5,"column_end":68}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":211767,"byte_end":211792,"line_start":169,"line_end":169,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":669},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":214090,"byte_end":214114,"line_start":220,"line_end":220,"column_start":8,"column_end":32},"name":"choose_multiple_weighted","qualname":"::seq::SliceRandom::choose_multiple_weighted","value":"pub fn choose_multiple_weighted<R: ?Sized, F, X>(&Self, &mut R, usize, F)\n-> Result<SliceChooseIter<, Self, Self::Item>, WeightedError> where R: Rng,\nF: Fn(&Self::Item) -> X, X: Into<f64>","parent":{"krate":0,"index":649},"children":[],"decl_id":null,"docs":" Similar to [`choose_multiple`], but where the likelihood of each element's\n inclusion in the output may be specified. The elements are returned in an\n arbitrary, unspecified order.","sig":null,"attributes":[{"value":"/ Similar to [`choose_multiple`], but where the likelihood of each element's","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":212240,"byte_end":212318,"line_start":184,"line_end":184,"column_start":5,"column_end":83}},{"value":"/ inclusion in the output may be specified. The elements are returned in an","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":212323,"byte_end":212400,"line_start":185,"line_end":185,"column_start":5,"column_end":82}},{"value":"/ arbitrary, unspecified order.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":212405,"byte_end":212438,"line_start":186,"line_end":186,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":212443,"byte_end":212446,"line_start":187,"line_end":187,"column_start":5,"column_end":8}},{"value":"/ The specified function `weight` maps each item `x` to a relative","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":212451,"byte_end":212519,"line_start":188,"line_end":188,"column_start":5,"column_end":73}},{"value":"/ likelihood `weight(x)`. The probability of each item being selected is","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":212524,"byte_end":212598,"line_start":189,"line_end":189,"column_start":5,"column_end":79}},{"value":"/ therefore `weight(x) / s`, where `s` is the sum of all `weight(x)`.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":212603,"byte_end":212674,"line_start":190,"line_end":190,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":212679,"byte_end":212682,"line_start":191,"line_end":191,"column_start":5,"column_end":8}},{"value":"/ If all of the weights are equal, even if they are all zero, each element has","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":212687,"byte_end":212767,"line_start":192,"line_end":192,"column_start":5,"column_end":85}},{"value":"/ an equal likelihood of being selected.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":212772,"byte_end":212814,"line_start":193,"line_end":193,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":212819,"byte_end":212822,"line_start":194,"line_end":194,"column_start":5,"column_end":8}},{"value":"/ The complexity of this method depends on the feature `partition_at_index`.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":212827,"byte_end":212905,"line_start":195,"line_end":195,"column_start":5,"column_end":83}},{"value":"/ If the feature is enabled, then for slices of length `n`, the complexity","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":212910,"byte_end":212986,"line_start":196,"line_end":196,"column_start":5,"column_end":81}},{"value":"/ is `O(n)` space and `O(n)` time. Otherwise, the complexity is `O(n)` space and","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":212991,"byte_end":213073,"line_start":197,"line_end":197,"column_start":5,"column_end":87}},{"value":"/ `O(n * log amount)` time.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":213078,"byte_end":213107,"line_start":198,"line_end":198,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":213112,"byte_end":213115,"line_start":199,"line_end":199,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":213120,"byte_end":213133,"line_start":200,"line_end":200,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":213138,"byte_end":213141,"line_start":201,"line_end":201,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":213146,"byte_end":213153,"line_start":202,"line_end":202,"column_start":5,"column_end":12}},{"value":"/ use rand::prelude::*;","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":213158,"byte_end":213183,"line_start":203,"line_end":203,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":213188,"byte_end":213191,"line_start":204,"line_end":204,"column_start":5,"column_end":8}},{"value":"/ let choices = [('a', 2), ('b', 1), ('c', 1)];","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":213196,"byte_end":213245,"line_start":205,"line_end":205,"column_start":5,"column_end":54}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":213250,"byte_end":213281,"line_start":206,"line_end":206,"column_start":5,"column_end":36}},{"value":"/ // First Draw * Second Draw = total odds","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":213286,"byte_end":213330,"line_start":207,"line_end":207,"column_start":5,"column_end":49}},{"value":"/ // -----------------------","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":213335,"byte_end":213365,"line_start":208,"line_end":208,"column_start":5,"column_end":35}},{"value":"/ // (50% * 50%) + (25% * 67%) = 41.7% chance that the output is `['a', 'b']` in some order.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":213370,"byte_end":213464,"line_start":209,"line_end":209,"column_start":5,"column_end":99}},{"value":"/ // (50% * 50%) + (25% * 67%) = 41.7% chance that the output is `['a', 'c']` in some order.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":213469,"byte_end":213563,"line_start":210,"line_end":210,"column_start":5,"column_end":99}},{"value":"/ // (25% * 33%) + (25% * 33%) = 16.6% chance that the output is `['b', 'c']` in some order.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":213568,"byte_end":213662,"line_start":211,"line_end":211,"column_start":5,"column_end":99}},{"value":"/ println!(\"{:?}\", choices.choose_multiple_weighted(&mut rng, 2, |item| item.1).unwrap().collect::<Vec<_>>());","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":213667,"byte_end":213779,"line_start":212,"line_end":212,"column_start":5,"column_end":117}},{"value":"/ ```","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":213784,"byte_end":213791,"line_start":213,"line_end":213,"column_start":5,"column_end":12}},{"value":"/ [`choose_multiple`]: SliceRandom::choose_multiple","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":213796,"byte_end":213849,"line_start":214,"line_end":214,"column_start":5,"column_end":58}},{"value":"cfg(feature = \"std\")","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":214007,"byte_end":214030,"line_start":218,"line_end":218,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":673},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":214765,"byte_end":214772,"line_start":244,"line_end":244,"column_start":8,"column_end":15},"name":"shuffle","qualname":"::seq::SliceRandom::shuffle","value":"pub fn shuffle<R: ?Sized>(&mut Self, &mut R) where R: Rng","parent":{"krate":0,"index":649},"children":[],"decl_id":null,"docs":" Shuffle a mutable slice in place.","sig":null,"attributes":[{"value":"/ Shuffle a mutable slice in place.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":214340,"byte_end":214377,"line_start":228,"line_end":228,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":214382,"byte_end":214385,"line_start":229,"line_end":229,"column_start":5,"column_end":8}},{"value":"/ For slices of length `n`, complexity is `O(n)`.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":214390,"byte_end":214441,"line_start":230,"line_end":230,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":214446,"byte_end":214449,"line_start":231,"line_end":231,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":214454,"byte_end":214467,"line_start":232,"line_end":232,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":214472,"byte_end":214475,"line_start":233,"line_end":233,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":214480,"byte_end":214487,"line_start":234,"line_end":234,"column_start":5,"column_end":12}},{"value":"/ use rand::seq::SliceRandom;","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":214492,"byte_end":214523,"line_start":235,"line_end":235,"column_start":5,"column_end":36}},{"value":"/ use rand::thread_rng;","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":214528,"byte_end":214553,"line_start":236,"line_end":236,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":214558,"byte_end":214561,"line_start":237,"line_end":237,"column_start":5,"column_end":8}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":214566,"byte_end":214597,"line_start":238,"line_end":238,"column_start":5,"column_end":36}},{"value":"/ let mut y = [1, 2, 3, 4, 5];","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":214602,"byte_end":214634,"line_start":239,"line_end":239,"column_start":5,"column_end":37}},{"value":"/ println!(\"Unshuffled: {:?}\", y);","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":214639,"byte_end":214675,"line_start":240,"line_end":240,"column_start":5,"column_end":41}},{"value":"/ y.shuffle(&mut rng);","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":214680,"byte_end":214704,"line_start":241,"line_end":241,"column_start":5,"column_end":29}},{"value":"/ println!(\"Shuffled:   {:?}\", y);","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":214709,"byte_end":214745,"line_start":242,"line_end":242,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":214750,"byte_end":214757,"line_start":243,"line_end":243,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":675},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":215637,"byte_end":215652,"line_start":264,"line_end":264,"column_start":8,"column_end":23},"name":"partial_shuffle","qualname":"::seq::SliceRandom::partial_shuffle","value":"pub fn partial_shuffle<R: ?Sized>(&mut Self, &mut R, usize)\n-> (&mut [Self::Item], &mut [Self::Item]) where R: Rng","parent":{"krate":0,"index":649},"children":[],"decl_id":null,"docs":" Shuffle a slice in place, but exit early.","sig":null,"attributes":[{"value":"/ Shuffle a slice in place, but exit early.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":214832,"byte_end":214877,"line_start":247,"line_end":247,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":214882,"byte_end":214885,"line_start":248,"line_end":248,"column_start":5,"column_end":8}},{"value":"/ Returns two mutable slices from the source slice. The first contains","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":214890,"byte_end":214962,"line_start":249,"line_end":249,"column_start":5,"column_end":77}},{"value":"/ `amount` elements randomly permuted. The second has the remaining","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":214967,"byte_end":215036,"line_start":250,"line_end":250,"column_start":5,"column_end":74}},{"value":"/ elements that are not fully shuffled.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":215041,"byte_end":215082,"line_start":251,"line_end":251,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":215087,"byte_end":215090,"line_start":252,"line_end":252,"column_start":5,"column_end":8}},{"value":"/ This is an efficient method to select `amount` elements at random from","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":215095,"byte_end":215169,"line_start":253,"line_end":253,"column_start":5,"column_end":79}},{"value":"/ the slice, provided the slice may be mutated.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":215174,"byte_end":215223,"line_start":254,"line_end":254,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":215228,"byte_end":215231,"line_start":255,"line_end":255,"column_start":5,"column_end":8}},{"value":"/ If you only need to choose elements randomly and `amount > self.len()/2`","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":215236,"byte_end":215312,"line_start":256,"line_end":256,"column_start":5,"column_end":81}},{"value":"/ then you may improve performance by taking","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":215317,"byte_end":215363,"line_start":257,"line_end":257,"column_start":5,"column_end":51}},{"value":"/ `amount = values.len() - amount` and using only the second slice.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":215368,"byte_end":215437,"line_start":258,"line_end":258,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":215442,"byte_end":215445,"line_start":259,"line_end":259,"column_start":5,"column_end":8}},{"value":"/ If `amount` is greater than the number of elements in the slice, this","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":215450,"byte_end":215523,"line_start":260,"line_end":260,"column_start":5,"column_end":78}},{"value":"/ will perform a full shuffle.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":215528,"byte_end":215560,"line_start":261,"line_end":261,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":215565,"byte_end":215568,"line_start":262,"line_end":262,"column_start":5,"column_end":8}},{"value":"/ For slices, complexity is `O(m)` where `m = amount`.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":215573,"byte_end":215629,"line_start":263,"line_end":263,"column_start":5,"column_end":61}}]},{"kind":"Trait","id":{"krate":0,"index":677},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":216322,"byte_end":216336,"line_start":288,"line_end":288,"column_start":11,"column_end":25},"name":"IteratorRandom","qualname":"::seq::IteratorRandom","value":"IteratorRandom: Iterator + Sized","parent":null,"children":[{"krate":0,"index":678},{"krate":0,"index":680},{"krate":0,"index":683},{"krate":0,"index":685}],"decl_id":null,"docs":" Extension trait on iterators, providing random sampling methods.","sig":null,"attributes":[{"value":"/ Extension trait on iterators, providing random sampling methods.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":215782,"byte_end":215850,"line_start":270,"line_end":270,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":215851,"byte_end":215854,"line_start":271,"line_end":271,"column_start":1,"column_end":4}},{"value":"/ This trait is implemented on all iterators `I` where `I: Iterator + Sized`","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":215855,"byte_end":215933,"line_start":272,"line_end":272,"column_start":1,"column_end":79}},{"value":"/ and provides methods for","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":215934,"byte_end":215962,"line_start":273,"line_end":273,"column_start":1,"column_end":29}},{"value":"/ choosing one or more elements. You must `use` this trait:","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":215963,"byte_end":216024,"line_start":274,"line_end":274,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":216025,"byte_end":216028,"line_start":275,"line_end":275,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":216029,"byte_end":216036,"line_start":276,"line_end":276,"column_start":1,"column_end":8}},{"value":"/ use rand::seq::IteratorRandom;","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":216037,"byte_end":216071,"line_start":277,"line_end":277,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":216072,"byte_end":216075,"line_start":278,"line_end":278,"column_start":1,"column_end":4}},{"value":"/ let mut rng = rand::thread_rng();","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":216076,"byte_end":216113,"line_start":279,"line_end":279,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":216114,"byte_end":216117,"line_start":280,"line_end":280,"column_start":1,"column_end":4}},{"value":"/ let faces = \"😀😎😐😕😠😢\";","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":216118,"byte_end":216161,"line_start":281,"line_end":281,"column_start":1,"column_end":26}},{"value":"/ println!(\"I am {}!\", faces.chars().choose(&mut rng).unwrap());","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":216162,"byte_end":216228,"line_start":282,"line_end":282,"column_start":1,"column_end":67}},{"value":"/ ```","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":216229,"byte_end":216236,"line_start":283,"line_end":283,"column_start":1,"column_end":8}},{"value":"/ Example output (non-deterministic):","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":216237,"byte_end":216276,"line_start":284,"line_end":284,"column_start":1,"column_end":40}},{"value":"/ ```none","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":216277,"byte_end":216288,"line_start":285,"line_end":285,"column_start":1,"column_end":12}},{"value":"/ I am 😀!","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":216289,"byte_end":216303,"line_start":286,"line_end":286,"column_start":1,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":216304,"byte_end":216311,"line_start":287,"line_end":287,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":678},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":217248,"byte_end":217254,"line_start":304,"line_end":304,"column_start":8,"column_end":14},"name":"choose","qualname":"::seq::IteratorRandom::choose","value":"pub fn choose<R: ?Sized>(Self, &mut R) -> Option<Self::Item> where R: Rng","parent":{"krate":0,"index":677},"children":[],"decl_id":null,"docs":" Choose one element at random from the iterator.","sig":null,"attributes":[{"value":"/ Choose one element at random from the iterator.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":216361,"byte_end":216412,"line_start":289,"line_end":289,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":216417,"byte_end":216420,"line_start":290,"line_end":290,"column_start":5,"column_end":8}},{"value":"/ Returns `None` if and only if the iterator is empty.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":216425,"byte_end":216481,"line_start":291,"line_end":291,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":216486,"byte_end":216489,"line_start":292,"line_end":292,"column_start":5,"column_end":8}},{"value":"/ This method uses [`Iterator::size_hint`] for optimisation. With an","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":216494,"byte_end":216564,"line_start":293,"line_end":293,"column_start":5,"column_end":75}},{"value":"/ accurate hint and where [`Iterator::nth`] is a constant-time operation","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":216569,"byte_end":216643,"line_start":294,"line_end":294,"column_start":5,"column_end":79}},{"value":"/ this method can offer `O(1)` performance. Where no size hint is","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":216648,"byte_end":216715,"line_start":295,"line_end":295,"column_start":5,"column_end":72}},{"value":"/ available, complexity is `O(n)` where `n` is the iterator length.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":216720,"byte_end":216789,"line_start":296,"line_end":296,"column_start":5,"column_end":74}},{"value":"/ Partial hints (where `lower > 0`) also improve performance.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":216794,"byte_end":216857,"line_start":297,"line_end":297,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":216862,"byte_end":216865,"line_start":298,"line_end":298,"column_start":5,"column_end":8}},{"value":"/ Note that the output values and the number of RNG samples used","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":216870,"byte_end":216936,"line_start":299,"line_end":299,"column_start":5,"column_end":71}},{"value":"/ depends on size hints. In particular, `Iterator` combinators that don't","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":216941,"byte_end":217016,"line_start":300,"line_end":300,"column_start":5,"column_end":80}},{"value":"/ change the values yielded but change the size hints may result in","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":217021,"byte_end":217090,"line_start":301,"line_end":301,"column_start":5,"column_end":74}},{"value":"/ `choose` returning different elements. If you want consistent results","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":217095,"byte_end":217168,"line_start":302,"line_end":302,"column_start":5,"column_end":78}},{"value":"/ and RNG usage consider using [`IteratorRandom::choose_stable`].","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":217173,"byte_end":217240,"line_start":303,"line_end":303,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":680},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":219883,"byte_end":219896,"line_start":373,"line_end":373,"column_start":8,"column_end":21},"name":"choose_stable","qualname":"::seq::IteratorRandom::choose_stable","value":"pub fn choose_stable<R: ?Sized>(Self, &mut R) -> Option<Self::Item> where\nR: Rng","parent":{"krate":0,"index":677},"children":[],"decl_id":null,"docs":" Choose one element at random from the iterator.","sig":null,"attributes":[{"value":"/ Choose one element at random from the iterator.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":218850,"byte_end":218901,"line_start":355,"line_end":355,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":218906,"byte_end":218909,"line_start":356,"line_end":356,"column_start":5,"column_end":8}},{"value":"/ Returns `None` if and only if the iterator is empty.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":218914,"byte_end":218970,"line_start":357,"line_end":357,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":218975,"byte_end":218978,"line_start":358,"line_end":358,"column_start":5,"column_end":8}},{"value":"/ This method is very similar to [`choose`] except that the result","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":218983,"byte_end":219051,"line_start":359,"line_end":359,"column_start":5,"column_end":73}},{"value":"/ only depends on the length of the iterator and the values produced by","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":219056,"byte_end":219129,"line_start":360,"line_end":360,"column_start":5,"column_end":78}},{"value":"/ `rng`. Notably for any iterator of a given length this will make the","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":219134,"byte_end":219206,"line_start":361,"line_end":361,"column_start":5,"column_end":77}},{"value":"/ same requests to `rng` and if the same sequence of values are produced","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":219211,"byte_end":219285,"line_start":362,"line_end":362,"column_start":5,"column_end":79}},{"value":"/ the same index will be selected from `self`. This may be useful if you","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":219290,"byte_end":219364,"line_start":363,"line_end":363,"column_start":5,"column_end":79}},{"value":"/ need consistent results no matter what type of iterator you are working","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":219369,"byte_end":219444,"line_start":364,"line_end":364,"column_start":5,"column_end":80}},{"value":"/ with. If you do not need this stability prefer [`choose`].","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":219449,"byte_end":219511,"line_start":365,"line_end":365,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":219516,"byte_end":219519,"line_start":366,"line_end":366,"column_start":5,"column_end":8}},{"value":"/ Note that this method still uses [`Iterator::size_hint`] to skip","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":219524,"byte_end":219592,"line_start":367,"line_end":367,"column_start":5,"column_end":73}},{"value":"/ constructing elements where possible, however the selection and `rng`","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":219597,"byte_end":219670,"line_start":368,"line_end":368,"column_start":5,"column_end":78}},{"value":"/ calls are the same in the face of this optimization. If you want to","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":219675,"byte_end":219746,"line_start":369,"line_end":369,"column_start":5,"column_end":76}},{"value":"/ force every element to be created regardless call `.inspect(|e| ())`.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":219751,"byte_end":219824,"line_start":370,"line_end":370,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":219829,"byte_end":219832,"line_start":371,"line_end":371,"column_start":5,"column_end":8}},{"value":"/ [`choose`]: IteratorRandom::choose","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":219837,"byte_end":219875,"line_start":372,"line_end":372,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":683},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":221845,"byte_end":221865,"line_start":426,"line_end":426,"column_start":8,"column_end":28},"name":"choose_multiple_fill","qualname":"::seq::IteratorRandom::choose_multiple_fill","value":"pub fn choose_multiple_fill<R: ?Sized>(Self, &mut R, &mut [Self::Item])\n-> usize where R: Rng","parent":{"krate":0,"index":677},"children":[],"decl_id":null,"docs":" Collects values at random from the iterator into a supplied buffer\n until that buffer is filled.","sig":null,"attributes":[{"value":"/ Collects values at random from the iterator into a supplied buffer","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":221158,"byte_end":221228,"line_start":413,"line_end":413,"column_start":5,"column_end":75}},{"value":"/ until that buffer is filled.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":221233,"byte_end":221265,"line_start":414,"line_end":414,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":221270,"byte_end":221273,"line_start":415,"line_end":415,"column_start":5,"column_end":8}},{"value":"/ Although the elements are selected randomly, the order of elements in","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":221278,"byte_end":221351,"line_start":416,"line_end":416,"column_start":5,"column_end":78}},{"value":"/ the buffer is neither stable nor fully random. If random ordering is","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":221356,"byte_end":221428,"line_start":417,"line_end":417,"column_start":5,"column_end":77}},{"value":"/ desired, shuffle the result.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":221433,"byte_end":221465,"line_start":418,"line_end":418,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":221470,"byte_end":221473,"line_start":419,"line_end":419,"column_start":5,"column_end":8}},{"value":"/ Returns the number of elements added to the buffer. This equals the length","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":221478,"byte_end":221556,"line_start":420,"line_end":420,"column_start":5,"column_end":83}},{"value":"/ of the buffer unless the iterator contains insufficient elements, in which","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":221561,"byte_end":221639,"line_start":421,"line_end":421,"column_start":5,"column_end":83}},{"value":"/ case this equals the number of elements available.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":221644,"byte_end":221698,"line_start":422,"line_end":422,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":221703,"byte_end":221706,"line_start":423,"line_end":423,"column_start":5,"column_end":8}},{"value":"/ Complexity is `O(n)` where `n` is the length of the iterator.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":221711,"byte_end":221776,"line_start":424,"line_end":424,"column_start":5,"column_end":70}},{"value":"/ For slices, prefer [`SliceRandom::choose_multiple`].","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":221781,"byte_end":221837,"line_start":425,"line_end":425,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":685},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":223331,"byte_end":223346,"line_start":466,"line_end":466,"column_start":8,"column_end":23},"name":"choose_multiple","qualname":"::seq::IteratorRandom::choose_multiple","value":"pub fn choose_multiple<R: ?Sized>(Self, &mut R, usize) -> Vec<Self::Item>\nwhere R: Rng","parent":{"krate":0,"index":677},"children":[],"decl_id":null,"docs":" Collects `amount` values at random from the iterator into a vector.","sig":null,"attributes":[{"value":"/ Collects `amount` values at random from the iterator into a vector.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":222548,"byte_end":222619,"line_start":450,"line_end":450,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":222624,"byte_end":222627,"line_start":451,"line_end":451,"column_start":5,"column_end":8}},{"value":"/ This is equivalent to `choose_multiple_fill` except for the result type.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":222632,"byte_end":222708,"line_start":452,"line_end":452,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":222713,"byte_end":222716,"line_start":453,"line_end":453,"column_start":5,"column_end":8}},{"value":"/ Although the elements are selected randomly, the order of elements in","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":222721,"byte_end":222794,"line_start":454,"line_end":454,"column_start":5,"column_end":78}},{"value":"/ the buffer is neither stable nor fully random. If random ordering is","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":222799,"byte_end":222871,"line_start":455,"line_end":455,"column_start":5,"column_end":77}},{"value":"/ desired, shuffle the result.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":222876,"byte_end":222908,"line_start":456,"line_end":456,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":222913,"byte_end":222916,"line_start":457,"line_end":457,"column_start":5,"column_end":8}},{"value":"/ The length of the returned vector equals `amount` unless the iterator","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":222921,"byte_end":222994,"line_start":458,"line_end":458,"column_start":5,"column_end":78}},{"value":"/ contains insufficient elements, in which case it equals the number of","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":222999,"byte_end":223072,"line_start":459,"line_end":459,"column_start":5,"column_end":78}},{"value":"/ elements available.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":223077,"byte_end":223100,"line_start":460,"line_end":460,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":223105,"byte_end":223108,"line_start":461,"line_end":461,"column_start":5,"column_end":8}},{"value":"/ Complexity is `O(n)` where `n` is the length of the iterator.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":223113,"byte_end":223178,"line_start":462,"line_end":462,"column_start":5,"column_end":70}},{"value":"/ For slices, prefer [`SliceRandom::choose_multiple`].","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":223183,"byte_end":223239,"line_start":463,"line_end":463,"column_start":5,"column_end":61}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":223244,"byte_end":223269,"line_start":464,"line_end":464,"column_start":5,"column_end":30}}]},{"kind":"Struct","id":{"krate":0,"index":2004},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":228370,"byte_end":228385,"line_start":625,"line_end":625,"column_start":12,"column_end":27},"name":"SliceChooseIter","qualname":"::seq::SliceChooseIter","value":"SliceChooseIter {  }","parent":null,"children":[{"krate":0,"index":2008},{"krate":0,"index":2009},{"krate":0,"index":2010}],"decl_id":null,"docs":" An iterator over multiple slice elements.","sig":null,"attributes":[{"value":"/ An iterator over multiple slice elements.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":228099,"byte_end":228144,"line_start":618,"line_end":618,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":228145,"byte_end":228148,"line_start":619,"line_end":619,"column_start":1,"column_end":4}},{"value":"/ This struct is created by","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":228149,"byte_end":228178,"line_start":620,"line_end":620,"column_start":1,"column_end":30}},{"value":"/ [`SliceRandom::choose_multiple`](trait.SliceRandom.html#tymethod.choose_multiple).","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":228179,"byte_end":228265,"line_start":621,"line_end":621,"column_start":1,"column_end":87}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":228266,"byte_end":228291,"line_start":622,"line_end":622,"column_start":1,"column_end":26}}]},{"kind":"Function","id":{"krate":0,"index":747},"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":5795,"byte_end":5801,"line_start":184,"line_end":184,"column_start":8,"column_end":14},"name":"random","qualname":"::random","value":"pub fn random<T>() -> T where Standard: Distribution<T>","parent":null,"children":[],"decl_id":null,"docs":" Generates a random value using the thread-local random number generator.","sig":null,"attributes":[{"value":"/ Generates a random value using the thread-local random number generator.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":3236,"byte_end":3312,"line_start":112,"line_end":112,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":3313,"byte_end":3316,"line_start":113,"line_end":113,"column_start":1,"column_end":4}},{"value":"/ This is simply a shortcut for `thread_rng().gen()`. See [`thread_rng`] for","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":3317,"byte_end":3395,"line_start":114,"line_end":114,"column_start":1,"column_end":79}},{"value":"/ documentation of the entropy source and [`Standard`] for documentation of","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":3396,"byte_end":3473,"line_start":115,"line_end":115,"column_start":1,"column_end":78}},{"value":"/ distributions and type-specific generation.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":3474,"byte_end":3521,"line_start":116,"line_end":116,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":3522,"byte_end":3525,"line_start":117,"line_end":117,"column_start":1,"column_end":4}},{"value":"/ # Provided implementations","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":3526,"byte_end":3556,"line_start":118,"line_end":118,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":3557,"byte_end":3560,"line_start":119,"line_end":119,"column_start":1,"column_end":4}},{"value":"/ The following types have provided implementations that","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":3561,"byte_end":3619,"line_start":120,"line_end":120,"column_start":1,"column_end":59}},{"value":"/ generate values with the following ranges and distributions:","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":3620,"byte_end":3684,"line_start":121,"line_end":121,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":3685,"byte_end":3688,"line_start":122,"line_end":122,"column_start":1,"column_end":4}},{"value":"/ * Integers (`i32`, `u32`, `isize`, `usize`, etc.): Uniformly distributed","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":3689,"byte_end":3765,"line_start":123,"line_end":123,"column_start":1,"column_end":77}},{"value":"/   over all values of the type.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":3766,"byte_end":3800,"line_start":124,"line_end":124,"column_start":1,"column_end":35}},{"value":"/ * `char`: Uniformly distributed over all Unicode scalar values, i.e. all","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":3801,"byte_end":3877,"line_start":125,"line_end":125,"column_start":1,"column_end":77}},{"value":"/   code points in the range `0...0x10_FFFF`, except for the range","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":3878,"byte_end":3946,"line_start":126,"line_end":126,"column_start":1,"column_end":69}},{"value":"/   `0xD800...0xDFFF` (the surrogate code points). This includes","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":3947,"byte_end":4013,"line_start":127,"line_end":127,"column_start":1,"column_end":67}},{"value":"/   unassigned/reserved code points.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":4014,"byte_end":4052,"line_start":128,"line_end":128,"column_start":1,"column_end":39}},{"value":"/ * `bool`: Generates `false` or `true`, each with probability 0.5.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":4053,"byte_end":4122,"line_start":129,"line_end":129,"column_start":1,"column_end":70}},{"value":"/ * Floating point types (`f32` and `f64`): Uniformly distributed in the","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":4123,"byte_end":4197,"line_start":130,"line_end":130,"column_start":1,"column_end":75}},{"value":"/   half-open range `[0, 1)`. See notes below.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":4198,"byte_end":4246,"line_start":131,"line_end":131,"column_start":1,"column_end":49}},{"value":"/ * Wrapping integers (`Wrapping<T>`), besides the type identical to their","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":4247,"byte_end":4323,"line_start":132,"line_end":132,"column_start":1,"column_end":77}},{"value":"/   normal integer variants.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":4324,"byte_end":4354,"line_start":133,"line_end":133,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":4355,"byte_end":4358,"line_start":134,"line_end":134,"column_start":1,"column_end":4}},{"value":"/ Also supported is the generation of the following","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":4359,"byte_end":4412,"line_start":135,"line_end":135,"column_start":1,"column_end":54}},{"value":"/ compound types where all component types are supported:","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":4413,"byte_end":4472,"line_start":136,"line_end":136,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":4473,"byte_end":4476,"line_start":137,"line_end":137,"column_start":1,"column_end":4}},{"value":"/ *   Tuples (up to 12 elements): each element is generated sequentially.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":4477,"byte_end":4552,"line_start":138,"line_end":138,"column_start":1,"column_end":76}},{"value":"/ *   Arrays (up to 32 elements): each element is generated sequentially;","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":4553,"byte_end":4628,"line_start":139,"line_end":139,"column_start":1,"column_end":76}},{"value":"/     see also [`Rng::fill`] which supports arbitrary array length for integer","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":4629,"byte_end":4709,"line_start":140,"line_end":140,"column_start":1,"column_end":81}},{"value":"/     types and tends to be faster for `u32` and smaller types.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":4710,"byte_end":4775,"line_start":141,"line_end":141,"column_start":1,"column_end":66}},{"value":"/ *   `Option<T>` first generates a `bool`, and if true generates and returns","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":4776,"byte_end":4855,"line_start":142,"line_end":142,"column_start":1,"column_end":80}},{"value":"/     `Some(value)` where `value: T`, otherwise returning `None`.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":4856,"byte_end":4923,"line_start":143,"line_end":143,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":4924,"byte_end":4927,"line_start":144,"line_end":144,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":4928,"byte_end":4942,"line_start":145,"line_end":145,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":4943,"byte_end":4946,"line_start":146,"line_end":146,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":4947,"byte_end":4954,"line_start":147,"line_end":147,"column_start":1,"column_end":8}},{"value":"/ let x = rand::random::<u8>();","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":4955,"byte_end":4988,"line_start":148,"line_end":148,"column_start":1,"column_end":34}},{"value":"/ println!(\"{}\", x);","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":4989,"byte_end":5011,"line_start":149,"line_end":149,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":5012,"byte_end":5015,"line_start":150,"line_end":150,"column_start":1,"column_end":4}},{"value":"/ let y = rand::random::<f64>();","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":5016,"byte_end":5050,"line_start":151,"line_end":151,"column_start":1,"column_end":35}},{"value":"/ println!(\"{}\", y);","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":5051,"byte_end":5073,"line_start":152,"line_end":152,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":5074,"byte_end":5077,"line_start":153,"line_end":153,"column_start":1,"column_end":4}},{"value":"/ if rand::random() { // generates a boolean","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":5078,"byte_end":5124,"line_start":154,"line_end":154,"column_start":1,"column_end":47}},{"value":"/     println!(\"Better lucky than good!\");","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":5125,"byte_end":5169,"line_start":155,"line_end":155,"column_start":1,"column_end":45}},{"value":"/ }","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":5170,"byte_end":5175,"line_start":156,"line_end":156,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":5176,"byte_end":5183,"line_start":157,"line_end":157,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":5184,"byte_end":5187,"line_start":158,"line_end":158,"column_start":1,"column_end":4}},{"value":"/ If you're calling `random()` in a loop, caching the generator as in the","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":5188,"byte_end":5263,"line_start":159,"line_end":159,"column_start":1,"column_end":76}},{"value":"/ following example can increase performance.","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":5264,"byte_end":5311,"line_start":160,"line_end":160,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":5312,"byte_end":5315,"line_start":161,"line_end":161,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":5316,"byte_end":5323,"line_start":162,"line_end":162,"column_start":1,"column_end":8}},{"value":"/ use rand::Rng;","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":5324,"byte_end":5342,"line_start":163,"line_end":163,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":5343,"byte_end":5346,"line_start":164,"line_end":164,"column_start":1,"column_end":4}},{"value":"/ let mut v = vec![1, 2, 3];","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":5347,"byte_end":5377,"line_start":165,"line_end":165,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":5378,"byte_end":5381,"line_start":166,"line_end":166,"column_start":1,"column_end":4}},{"value":"/ for x in v.iter_mut() {","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":5382,"byte_end":5409,"line_start":167,"line_end":167,"column_start":1,"column_end":28}},{"value":"/     *x = rand::random()","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":5410,"byte_end":5437,"line_start":168,"line_end":168,"column_start":1,"column_end":28}},{"value":"/ }","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":5438,"byte_end":5443,"line_start":169,"line_end":169,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":5444,"byte_end":5447,"line_start":170,"line_end":170,"column_start":1,"column_end":4}},{"value":"/ // can be made faster by caching thread_rng","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":5448,"byte_end":5495,"line_start":171,"line_end":171,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":5496,"byte_end":5499,"line_start":172,"line_end":172,"column_start":1,"column_end":4}},{"value":"/ let mut rng = rand::thread_rng();","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":5500,"byte_end":5537,"line_start":173,"line_end":173,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":5538,"byte_end":5541,"line_start":174,"line_end":174,"column_start":1,"column_end":4}},{"value":"/ for x in v.iter_mut() {","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":5542,"byte_end":5569,"line_start":175,"line_end":175,"column_start":1,"column_end":28}},{"value":"/     *x = rng.gen();","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":5570,"byte_end":5593,"line_start":176,"line_end":176,"column_start":1,"column_end":24}},{"value":"/ }","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":5594,"byte_end":5599,"line_start":177,"line_end":177,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":5600,"byte_end":5607,"line_start":178,"line_end":178,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":5608,"byte_end":5611,"line_start":179,"line_end":179,"column_start":1,"column_end":4}},{"value":"/ [`Standard`]: distributions::Standard","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":5612,"byte_end":5653,"line_start":180,"line_end":180,"column_start":1,"column_end":42}},{"value":"cfg(all(feature = \"std\", feature = \"std_rng\"))","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":5654,"byte_end":5703,"line_start":181,"line_end":181,"column_start":1,"column_end":50}},{"value":"inline","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":5778,"byte_end":5787,"line_start":183,"line_end":183,"column_start":1,"column_end":10}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/bernoulli.rs","byte_start":23024,"byte_end":23038,"line_start":75,"line_end":75,"column_start":23,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":39}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/bernoulli.rs","byte_start":23309,"byte_end":23323,"line_start":84,"line_end":84,"column_start":30,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/bernoulli.rs","byte_start":23333,"byte_end":23342,"line_start":86,"line_end":86,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":42},{"krate":0,"index":43}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/bernoulli.rs","byte_start":25223,"byte_end":25232,"line_start":131,"line_end":131,"column_start":29,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":45}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":34680,"byte_end":34687,"line_start":177,"line_end":177,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":64},{"krate":0,"index":67}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":35453,"byte_end":35460,"line_start":199,"line_end":199,"column_start":44,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":72}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":39361,"byte_end":39368,"line_start":300,"line_end":300,"column_start":43,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":96}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":39525,"byte_end":39532,"line_start":306,"line_end":306,"column_start":52,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":99}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":40106,"byte_end":40114,"line_start":324,"line_end":324,"column_start":43,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":105}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":40845,"byte_end":40850,"line_start":353,"line_end":353,"column_start":56,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":117},{"krate":0,"index":119}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":41150,"byte_end":41164,"line_start":365,"line_end":365,"column_start":56,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":122},{"krate":0,"index":124}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":56254,"byte_end":56265,"line_start":747,"line_end":747,"column_start":25,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":132},{"krate":0,"index":133},{"krate":0,"index":136},{"krate":0,"index":139}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":67272,"byte_end":67280,"line_start":1025,"line_end":1025,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":143}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":67346,"byte_end":67361,"line_start":1029,"line_end":1029,"column_start":25,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":145},{"krate":0,"index":146},{"krate":0,"index":149},{"krate":0,"index":153}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Inherent","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/weighted.rs","byte_start":90524,"byte_end":90537,"line_start":29,"line_end":29,"column_start":21,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":165}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Inherent","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/weighted_index.rs","byte_start":94580,"byte_end":94593,"line_start":87,"line_end":87,"column_start":37,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":180},{"krate":0,"index":183}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/weighted_index.rs","byte_start":99487,"byte_end":99500,"line_start":223,"line_end":223,"column_start":33,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":188}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/weighted_index.rs","byte_start":106673,"byte_end":106686,"line_start":442,"line_end":442,"column_start":30,"column_end":43},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/weighted_index.rs","byte_start":106713,"byte_end":106726,"line_start":444,"line_end":444,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":194}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/integer.rs","byte_start":120658,"byte_end":120666,"line_start":21,"line_end":21,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":221}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/integer.rs","byte_start":120807,"byte_end":120815,"line_start":28,"line_end":28,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":224}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/integer.rs","byte_start":120958,"byte_end":120966,"line_start":35,"line_end":35,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":227}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/integer.rs","byte_start":121102,"byte_end":121110,"line_start":42,"line_end":42,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":230}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/integer.rs","byte_start":121285,"byte_end":121293,"line_start":50,"line_end":50,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":233}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/integer.rs","byte_start":121588,"byte_end":121596,"line_start":60,"line_end":60,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":236}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/other.rs","byte_start":130984,"byte_end":130992,"line_start":64,"line_end":64,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":249}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/other.rs","byte_start":131739,"byte_end":131751,"line_start":85,"line_end":85,"column_start":27,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":253}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/other.rs","byte_start":132520,"byte_end":132528,"line_start":104,"line_end":104,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":258}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/other.rs","byte_start":133709,"byte_end":133717,"line_start":139,"line_end":139,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":262}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/other.rs","byte_start":135011,"byte_end":135019,"line_start":181,"line_end":181,"column_start":37,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":267}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/other.rs","byte_start":135363,"byte_end":135371,"line_start":195,"line_end":195,"column_start":39,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":271}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":15187,"byte_end":15195,"line_start":218,"line_end":218,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":326},{"krate":0,"index":327},{"krate":0,"index":328}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":15763,"byte_end":15771,"line_start":238,"line_end":238,"column_start":39,"column_end":47},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":163465,"byte_end":163466,"line_start":303,"line_end":303,"column_start":35,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Inherent","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/adapter/read.rs","byte_start":179960,"byte_end":179967,"line_start":51,"line_end":51,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":404}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/adapter/read.rs","byte_start":180121,"byte_end":180128,"line_start":58,"line_end":58,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":407},{"krate":0,"index":408},{"krate":0,"index":409},{"krate":0,"index":411}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/adapter/read.rs","byte_start":180992,"byte_end":181001,"line_start":91,"line_end":91,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":414}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/adapter/read.rs","byte_start":181142,"byte_end":181151,"line_start":97,"line_end":97,"column_start":28,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":416}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Inherent","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/adapter/reseeding.rs","byte_start":186032,"byte_end":186044,"line_start":84,"line_end":84,"column_start":15,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":430},{"krate":0,"index":431}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/adapter/reseeding.rs","byte_start":186871,"byte_end":186883,"line_start":107,"line_end":107,"column_start":36,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":435},{"krate":0,"index":436},{"krate":0,"index":437},{"krate":0,"index":438}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/adapter/reseeding.rs","byte_start":187422,"byte_end":187434,"line_start":131,"line_end":131,"column_start":25,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":442}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/adapter/reseeding.rs","byte_start":187761,"byte_end":187773,"line_start":143,"line_end":143,"column_start":29,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/adapter/reseeding.rs","byte_start":188063,"byte_end":188076,"line_start":159,"line_end":159,"column_start":32,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":449},{"krate":0,"index":450},{"krate":0,"index":451}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Inherent","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/adapter/reseeding.rs","byte_start":188919,"byte_end":188932,"line_start":181,"line_end":181,"column_start":15,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":455},{"krate":0,"index":457},{"krate":0,"index":459},{"krate":0,"index":460}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/adapter/reseeding.rs","byte_start":191508,"byte_end":191521,"line_start":258,"line_end":258,"column_start":25,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":464}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/adapter/reseeding.rs","byte_start":191960,"byte_end":191973,"line_start":274,"line_end":274,"column_start":29,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Inherent","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mock.rs","byte_start":195902,"byte_end":195909,"line_start":37,"line_end":37,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":489}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mock.rs","byte_start":196205,"byte_end":196212,"line_start":48,"line_end":48,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":491},{"krate":0,"index":492},{"krate":0,"index":493},{"krate":0,"index":494}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/std.rs","byte_start":198875,"byte_end":198881,"line_start":40,"line_end":40,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":504},{"krate":0,"index":505},{"krate":0,"index":506},{"krate":0,"index":507}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/std.rs","byte_start":199337,"byte_end":199343,"line_start":62,"line_end":62,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":509},{"krate":0,"index":510},{"krate":0,"index":511}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/std.rs","byte_start":199652,"byte_end":199658,"line_start":76,"line_end":76,"column_start":20,"column_end":26},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/thread.rs","byte_start":204327,"byte_end":204336,"line_start":92,"line_end":92,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":530}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/thread.rs","byte_start":204434,"byte_end":204443,"line_start":98,"line_end":98,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":532},{"krate":0,"index":533},{"krate":0,"index":534},{"krate":0,"index":535}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/thread.rs","byte_start":205528,"byte_end":205537,"line_start":130,"line_end":130,"column_start":20,"column_end":29},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Inherent","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/index.rs","byte_start":253372,"byte_end":253380,"line_start":40,"line_end":40,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":554},{"krate":0,"index":555},{"krate":0,"index":556},{"krate":0,"index":557},{"krate":0,"index":559}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/index.rs","byte_start":254800,"byte_end":254808,"line_start":90,"line_end":90,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":561},{"krate":0,"index":562},{"krate":0,"index":563}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/index.rs","byte_start":255217,"byte_end":255225,"line_start":104,"line_end":104,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":565}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/index.rs","byte_start":255815,"byte_end":255823,"line_start":120,"line_end":120,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":570}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/index.rs","byte_start":255935,"byte_end":255943,"line_start":127,"line_end":127,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":572}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/index.rs","byte_start":256244,"byte_end":256256,"line_start":143,"line_end":143,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":575},{"krate":0,"index":576},{"krate":0,"index":579}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/index.rs","byte_start":256791,"byte_end":256803,"line_start":164,"line_end":164,"column_start":32,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/index.rs","byte_start":257027,"byte_end":257043,"line_start":175,"line_end":175,"column_start":19,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":583},{"krate":0,"index":584},{"krate":0,"index":587}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/index.rs","byte_start":257568,"byte_end":257584,"line_start":197,"line_end":197,"column_start":28,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/index.rs","byte_start":262613,"byte_end":262620,"line_start":331,"line_end":331,"column_start":28,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":612}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/index.rs","byte_start":262784,"byte_end":262791,"line_start":336,"line_end":336,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":615}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/index.rs","byte_start":263064,"byte_end":263071,"line_start":343,"line_end":343,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":618}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/index.rs","byte_start":263191,"byte_end":263198,"line_start":348,"line_end":348,"column_start":20,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":228066,"byte_end":228067,"line_start":615,"line_end":615,"column_start":28,"column_end":29},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":228618,"byte_end":228633,"line_start":632,"line_end":632,"column_start":73,"column_end":88},"value":"","parent":null,"children":[{"krate":0,"index":729},{"krate":0,"index":730},{"krate":0,"index":732}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":229085,"byte_end":229100,"line_start":647,"line_end":647,"column_start":9,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":737}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":2928,"byte_end":2941,"line_start":98,"line_end":98,"column_start":9,"column_end":22},"ref_id":{"krate":0,"index":16}},{"kind":"Mod","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":11462,"byte_end":11469,"line_start":108,"line_end":108,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":47}},{"kind":"Mod","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":11661,"byte_end":11669,"line_start":113,"line_end":113,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":155}},{"kind":"Mod","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":2951,"byte_end":2958,"line_start":99,"line_end":99,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":333}},{"kind":"Mod","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":2977,"byte_end":2981,"line_start":101,"line_end":101,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":393}},{"kind":"Mod","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":177139,"byte_end":177146,"line_start":100,"line_end":100,"column_start":33,"column_end":40},"ref_id":{"krate":0,"index":394}},{"kind":"Mod","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":177157,"byte_end":177161,"line_start":102,"line_end":102,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":483}},{"kind":"Mod","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":2991,"byte_end":2994,"line_start":102,"line_end":102,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":540}},{"kind":"Mod","span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":206779,"byte_end":206784,"line_start":30,"line_end":30,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":541}}],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/bernoulli.rs","byte_start":23024,"byte_end":23038,"line_start":75,"line_end":75,"column_start":23,"column_end":37},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":756},"to":{"krate":1,"index":6922}},{"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/bernoulli.rs","byte_start":23309,"byte_end":23323,"line_start":84,"line_end":84,"column_start":30,"column_end":44},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":756},"to":{"krate":4,"index":1747}},{"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/bernoulli.rs","byte_start":23333,"byte_end":23342,"line_start":86,"line_end":86,"column_start":6,"column_end":15},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":749},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/bernoulli.rs","byte_start":25223,"byte_end":25232,"line_start":131,"line_end":131,"column_start":29,"column_end":38},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":749},"to":{"krate":0,"index":310}},{"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":34680,"byte_end":34687,"line_start":177,"line_end":177,"column_start":24,"column_end":31},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":770},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":35453,"byte_end":35460,"line_start":199,"line_end":199,"column_start":44,"column_end":51},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":770},"to":{"krate":0,"index":310}},{"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":35876,"byte_end":35881,"line_start":212,"line_end":212,"column_start":26,"column_end":31},"kind":"SuperTrait","from":{"krate":1,"index":2083},"to":{"krate":0,"index":74}},{"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":36456,"byte_end":36461,"line_start":227,"line_end":227,"column_start":27,"column_end":32},"kind":"SuperTrait","from":{"krate":1,"index":2083},"to":{"krate":0,"index":76}},{"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":39361,"byte_end":39368,"line_start":300,"line_end":300,"column_start":43,"column_end":50},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":770},"to":{"krate":1,"index":1996}},{"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":39525,"byte_end":39532,"line_start":306,"line_end":306,"column_start":52,"column_end":59},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":770},"to":{"krate":1,"index":1996}},{"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":40106,"byte_end":40114,"line_start":324,"line_end":324,"column_start":43,"column_end":51},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":104},"to":{"krate":0,"index":100}},{"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":40845,"byte_end":40850,"line_start":353,"line_end":353,"column_start":56,"column_end":61},"kind":{"Impl":{"id":9}},"from":{"krate":1,"index":33329},"to":{"krate":0,"index":110}},{"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":41150,"byte_end":41164,"line_start":365,"line_end":365,"column_start":56,"column_end":70},"kind":{"Impl":{"id":10}},"from":{"krate":1,"index":33398},"to":{"krate":0,"index":110}},{"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":56254,"byte_end":56265,"line_start":747,"line_end":747,"column_start":25,"column_end":36},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":1035},"to":{"krate":0,"index":76}},{"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":67272,"byte_end":67280,"line_start":1025,"line_end":1025,"column_start":24,"column_end":32},"kind":{"Impl":{"id":27}},"from":{"krate":1,"index":37196},"to":{"krate":0,"index":74}},{"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":67346,"byte_end":67361,"line_start":1029,"line_end":1029,"column_start":25,"column_end":40},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":1086},"to":{"krate":0,"index":76}},{"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/weighted.rs","byte_start":90524,"byte_end":90537,"line_start":29,"line_end":29,"column_start":21,"column_end":34},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":1109},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/weighted_index.rs","byte_start":94580,"byte_end":94593,"line_start":87,"line_end":87,"column_start":37,"column_end":50},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":1129},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/weighted_index.rs","byte_start":99487,"byte_end":99500,"line_start":223,"line_end":223,"column_start":33,"column_end":46},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":1129},"to":{"krate":0,"index":310}},{"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/weighted_index.rs","byte_start":106673,"byte_end":106686,"line_start":442,"line_end":442,"column_start":30,"column_end":43},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":1140},"to":{"krate":4,"index":1747}},{"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/weighted_index.rs","byte_start":106713,"byte_end":106726,"line_start":444,"line_end":444,"column_start":23,"column_end":36},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":1140},"to":{"krate":1,"index":6922}},{"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/integer.rs","byte_start":120658,"byte_end":120666,"line_start":21,"line_end":21,"column_start":27,"column_end":35},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":1615},"to":{"krate":0,"index":310}},{"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/integer.rs","byte_start":120807,"byte_end":120815,"line_start":28,"line_end":28,"column_start":28,"column_end":36},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":1615},"to":{"krate":0,"index":310}},{"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/integer.rs","byte_start":120958,"byte_end":120966,"line_start":35,"line_end":35,"column_start":28,"column_end":36},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":1615},"to":{"krate":0,"index":310}},{"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/integer.rs","byte_start":121102,"byte_end":121110,"line_start":42,"line_end":42,"column_start":28,"column_end":36},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":1615},"to":{"krate":0,"index":310}},{"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/integer.rs","byte_start":121285,"byte_end":121293,"line_start":50,"line_end":50,"column_start":29,"column_end":37},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":1615},"to":{"krate":0,"index":310}},{"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/integer.rs","byte_start":121588,"byte_end":121596,"line_start":60,"line_end":60,"column_start":30,"column_end":38},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":1615},"to":{"krate":0,"index":310}},{"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/other.rs","byte_start":130984,"byte_end":130992,"line_start":64,"line_end":64,"column_start":29,"column_end":37},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":1615},"to":{"krate":0,"index":310}},{"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/other.rs","byte_start":131739,"byte_end":131751,"line_start":85,"line_end":85,"column_start":27,"column_end":39},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":1236},"to":{"krate":0,"index":310}},{"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/other.rs","byte_start":132520,"byte_end":132528,"line_start":104,"line_end":104,"column_start":29,"column_end":37},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":1615},"to":{"krate":0,"index":310}},{"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/other.rs","byte_start":133709,"byte_end":133717,"line_start":139,"line_end":139,"column_start":27,"column_end":35},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":1615},"to":{"krate":0,"index":310}},{"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/other.rs","byte_start":135011,"byte_end":135019,"line_start":181,"line_end":181,"column_start":37,"column_end":45},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":1615},"to":{"krate":0,"index":310}},{"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/other.rs","byte_start":135363,"byte_end":135371,"line_start":195,"line_end":195,"column_start":39,"column_end":47},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":1615},"to":{"krate":0,"index":310}},{"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/utils.rs","byte_start":146891,"byte_end":146896,"line_start":238,"line_end":238,"column_start":25,"column_end":30},"kind":"SuperTrait","from":{"krate":1,"index":2083},"to":{"krate":0,"index":292}},{"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/utils.rs","byte_start":147102,"byte_end":147107,"line_start":245,"line_end":245,"column_start":31,"column_end":36},"kind":"SuperTrait","from":{"krate":1,"index":2083},"to":{"krate":0,"index":296}},{"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/utils.rs","byte_start":147552,"byte_end":147557,"line_start":266,"line_end":266,"column_start":30,"column_end":35},"kind":"SuperTrait","from":{"krate":1,"index":2083},"to":{"krate":0,"index":301}},{"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":15187,"byte_end":15195,"line_start":218,"line_end":218,"column_start":28,"column_end":36},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":1603},"to":{"krate":1,"index":5619}},{"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":15763,"byte_end":15771,"line_start":238,"line_end":238,"column_start":39,"column_end":47},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":1603},"to":{"krate":1,"index":5885}},{"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":155751,"byte_end":155758,"line_start":55,"line_end":55,"column_start":16,"column_end":23},"kind":"SuperTrait","from":{"krate":16,"index":140},"to":{"krate":0,"index":363}},{"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":163465,"byte_end":163466,"line_start":303,"line_end":303,"column_start":35,"column_end":36},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":383},"to":{"krate":0,"index":363}},{"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/adapter/read.rs","byte_start":179960,"byte_end":179967,"line_start":51,"line_end":51,"column_start":15,"column_end":22},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":1900},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/adapter/read.rs","byte_start":180121,"byte_end":180128,"line_start":58,"line_end":58,"column_start":27,"column_end":34},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":1900},"to":{"krate":16,"index":140}},{"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/adapter/read.rs","byte_start":180992,"byte_end":181001,"line_start":91,"line_end":91,"column_start":23,"column_end":32},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":1906},"to":{"krate":1,"index":6922}},{"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/adapter/read.rs","byte_start":181142,"byte_end":181151,"line_start":97,"line_end":97,"column_start":28,"column_end":37},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":1906},"to":{"krate":4,"index":1747}},{"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/adapter/reseeding.rs","byte_start":186032,"byte_end":186044,"line_start":84,"line_end":84,"column_start":15,"column_end":27},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":1911},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/adapter/reseeding.rs","byte_start":186871,"byte_end":186883,"line_start":107,"line_end":107,"column_start":36,"column_end":48},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":1911},"to":{"krate":16,"index":140}},{"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/adapter/reseeding.rs","byte_start":187422,"byte_end":187434,"line_start":131,"line_end":131,"column_start":25,"column_end":37},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":1911},"to":{"krate":1,"index":1769}},{"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/adapter/reseeding.rs","byte_start":187761,"byte_end":187773,"line_start":143,"line_end":143,"column_start":29,"column_end":41},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":1911},"to":{"krate":16,"index":145}},{"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/adapter/reseeding.rs","byte_start":188063,"byte_end":188076,"line_start":159,"line_end":159,"column_start":32,"column_end":45},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":1920},"to":{"krate":16,"index":22}},{"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/adapter/reseeding.rs","byte_start":188919,"byte_end":188932,"line_start":181,"line_end":181,"column_start":15,"column_end":28},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":1920},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/adapter/reseeding.rs","byte_start":191508,"byte_end":191521,"line_start":258,"line_end":258,"column_start":25,"column_end":38},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":1920},"to":{"krate":1,"index":1769}},{"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/adapter/reseeding.rs","byte_start":191960,"byte_end":191973,"line_start":274,"line_end":274,"column_start":29,"column_end":42},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":1920},"to":{"krate":16,"index":145}},{"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mock.rs","byte_start":195902,"byte_end":195909,"line_start":37,"line_end":37,"column_start":6,"column_end":13},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":1932},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mock.rs","byte_start":196205,"byte_end":196212,"line_start":48,"line_end":48,"column_start":18,"column_end":25},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":1932},"to":{"krate":16,"index":140}},{"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/std.rs","byte_start":198875,"byte_end":198881,"line_start":40,"line_end":40,"column_start":18,"column_end":24},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":1946},"to":{"krate":16,"index":140}},{"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/std.rs","byte_start":199337,"byte_end":199343,"line_start":62,"line_end":62,"column_start":22,"column_end":28},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":1946},"to":{"krate":16,"index":146}},{"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/std.rs","byte_start":199652,"byte_end":199658,"line_start":76,"line_end":76,"column_start":20,"column_end":26},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":1946},"to":{"krate":16,"index":145}},{"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/thread.rs","byte_start":204327,"byte_end":204336,"line_start":92,"line_end":92,"column_start":18,"column_end":27},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":1960},"to":{"krate":1,"index":2066}},{"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/thread.rs","byte_start":204434,"byte_end":204443,"line_start":98,"line_end":98,"column_start":18,"column_end":27},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":1960},"to":{"krate":16,"index":140}},{"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/thread.rs","byte_start":205528,"byte_end":205537,"line_start":130,"line_end":130,"column_start":20,"column_end":29},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":1960},"to":{"krate":16,"index":145}},{"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/index.rs","byte_start":253372,"byte_end":253380,"line_start":40,"line_end":40,"column_start":6,"column_end":14},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":1971},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/index.rs","byte_start":254800,"byte_end":254808,"line_start":90,"line_end":90,"column_start":23,"column_end":31},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":1971},"to":{"krate":1,"index":5523}},{"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/index.rs","byte_start":255217,"byte_end":255225,"line_start":104,"line_end":104,"column_start":20,"column_end":28},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":1971},"to":{"krate":1,"index":1797}},{"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/index.rs","byte_start":255815,"byte_end":255823,"line_start":120,"line_end":120,"column_start":25,"column_end":33},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":1971},"to":{"krate":1,"index":1996}},{"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/index.rs","byte_start":255935,"byte_end":255943,"line_start":127,"line_end":127,"column_start":27,"column_end":35},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":1971},"to":{"krate":1,"index":1996}},{"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/index.rs","byte_start":256244,"byte_end":256256,"line_start":143,"line_end":143,"column_start":23,"column_end":35},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":1982},"to":{"krate":1,"index":5619}},{"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/index.rs","byte_start":256791,"byte_end":256803,"line_start":164,"line_end":164,"column_start":32,"column_end":44},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":1982},"to":{"krate":1,"index":5571}},{"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/index.rs","byte_start":257027,"byte_end":257043,"line_start":175,"line_end":175,"column_start":19,"column_end":35},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":1993},"to":{"krate":1,"index":5619}},{"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/index.rs","byte_start":257568,"byte_end":257584,"line_start":197,"line_end":197,"column_start":28,"column_end":44},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":1993},"to":{"krate":1,"index":5571}},{"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/index.rs","byte_start":262613,"byte_end":262620,"line_start":331,"line_end":331,"column_start":28,"column_end":35},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":606},"to":{"krate":1,"index":1840}},{"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/index.rs","byte_start":262784,"byte_end":262791,"line_start":336,"line_end":336,"column_start":21,"column_end":28},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":606},"to":{"krate":1,"index":1829}},{"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/index.rs","byte_start":263064,"byte_end":263071,"line_start":343,"line_end":343,"column_start":27,"column_end":34},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":606},"to":{"krate":1,"index":1797}},{"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/index.rs","byte_start":263191,"byte_end":263198,"line_start":348,"line_end":348,"column_start":20,"column_end":27},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":606},"to":{"krate":1,"index":1802}},{"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/index.rs","byte_start":267797,"byte_end":267801,"line_start":473,"line_end":473,"column_start":13,"column_end":17},"kind":"SuperTrait","from":{"krate":1,"index":2088},"to":{"krate":0,"index":627}},{"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/index.rs","byte_start":267804,"byte_end":267814,"line_start":473,"line_end":473,"column_start":20,"column_end":30},"kind":"SuperTrait","from":{"krate":1,"index":1840},"to":{"krate":0,"index":627}},{"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/index.rs","byte_start":267817,"byte_end":267820,"line_start":473,"line_end":473,"column_start":33,"column_end":36},"kind":"SuperTrait","from":{"krate":1,"index":1829},"to":{"krate":0,"index":627}},{"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/index.rs","byte_start":267823,"byte_end":267832,"line_start":473,"line_end":473,"column_start":39,"column_end":48},"kind":"SuperTrait","from":{"krate":1,"index":1797},"to":{"krate":0,"index":627}},{"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/index.rs","byte_start":267835,"byte_end":267837,"line_start":473,"line_end":473,"column_start":51,"column_end":53},"kind":"SuperTrait","from":{"krate":1,"index":1802},"to":{"krate":0,"index":627}},{"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/index.rs","byte_start":267840,"byte_end":267853,"line_start":473,"line_end":473,"column_start":56,"column_end":69},"kind":"SuperTrait","from":{"krate":0,"index":74},"to":{"krate":0,"index":627}},{"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/index.rs","byte_start":267872,"byte_end":267876,"line_start":474,"line_end":474,"column_start":19,"column_end":23},"kind":"SuperTrait","from":{"krate":1,"index":7105},"to":{"krate":0,"index":627}},{"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/index.rs","byte_start":267890,"byte_end":267899,"line_start":474,"line_end":474,"column_start":37,"column_end":46},"kind":"SuperTrait","from":{"krate":1,"index":2174},"to":{"krate":0,"index":627}},{"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":216338,"byte_end":216346,"line_start":288,"line_end":288,"column_start":27,"column_end":35},"kind":"SuperTrait","from":{"krate":1,"index":5619},"to":{"krate":0,"index":677}},{"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":216349,"byte_end":216354,"line_start":288,"line_end":288,"column_start":38,"column_end":43},"kind":"SuperTrait","from":{"krate":1,"index":2083},"to":{"krate":0,"index":677}},{"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":228066,"byte_end":228067,"line_start":615,"line_end":615,"column_start":28,"column_end":29},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":724},"to":{"krate":0,"index":677}},{"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":228618,"byte_end":228633,"line_start":632,"line_end":632,"column_start":73,"column_end":88},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":2004},"to":{"krate":1,"index":5619}},{"span":{"file_name":"/Users/kthakore/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":229085,"byte_end":229100,"line_start":647,"line_end":647,"column_start":9,"column_end":24},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":2004},"to":{"krate":1,"index":5571}}]}